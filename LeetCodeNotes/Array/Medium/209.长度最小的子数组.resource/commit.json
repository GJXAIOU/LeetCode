{"compress":true,"commitItems":[["31a29f2c-3674-42da-8fad-5d1d81291e1e",1566993215118,"",[[1566993165763,["GJX@GJXAIOU",[[1,0,"# 209.长度最小的子数组\n\n\n\n"]],[0,0],[17,17]]],[1566993197154,["GJX@GJXAIOU",[[1,16,"## 一、题目"]],[16,16],[23,23]]],[1566993197426,["GJX@GJXAIOU",[[1,25,"\n"]],[23,23],[24,24]]],[1566993197553,["GJX@GJXAIOU",[[1,26,"\n"]],[24,24],[25,25]]],[1566993197775,["GJX@GJXAIOU",[[1,27,"\n"]],[25,25],[26,26]]],[1566993197903,["GJX@GJXAIOU",[[1,28,"\n"]],[26,26],[27,27]]],[1566993201789,["GJX@GJXAIOU",[[1,27,"## 二、解答"]],[27,27],[34,34]]],[1566993204989,["GJX@GJXAIOU",[[1,24,"给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的连续子数组。如果不存在符合条件的连续子数组，返回 0。\n\n示例: \n\n输入: s = 7, nums = [2,3,1,2,4,3]\n输出: 2\n解释: 子数组 [4,3] 是该条件下的长度最小的连续子数组。\n进阶:\n\n如果你已经完成了O(n) 时间复杂度的解法, 请尝试 O(n log n) 时间复杂度的解法。\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/minimum-size-subarray-sum\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。"]],[24,24],[342,342]]],[1566993206672,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1566993214447,["GJX@GJXAIOU",[[1,0,"---\ntags: \n- 简单\n- 完成\n- 数组\n- 排序\n- 双指针\nflag: green\nstyle: summer\ndate: '2019-8-27'\n---"]],[0,0],[84,84]]],[1566993219328,["GJX@GJXAIOU",[[-1,78,"7"]],[79,79],[78,78]]],[1566993219746,["GJX@GJXAIOU",[[-1,78,""],[1,78,"8"],[-1,114," n "],[1,117," n "],[-1,130," "],[1,131," "],[-1,187," "],[1,188," "],[-1,235," "],[1,236," "],[-1,241," "],[1,242," "],[-1,291," "],[1,292," "]],[78,78],[79,79]]],[1566993222788,["GJX@GJXAIOU",[[-1,190,"\n"]],[190,190],[189,189]]],[1566993225303,["GJX@GJXAIOU",[[1,185,"**"],[1,189,"**"]],[185,189],[185,193]]],[1566993228297,["GJX@GJXAIOU",[[1,264,"**"],[1,267,"**"]],[264,267],[264,271]]],[1566993229704,["GJX@GJXAIOU",[[-1,272,"\n"]],[272,272],[271,271]]],[1566993233177,["GJX@GJXAIOU",[[1,264,"\n"]],[264,264],[265,265]]],[1566993236642,["GJX@GJXAIOU",[[-1,322,"来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/minimum-size-subarray-sum\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。"]],[322,434],[322,322]]],[1566993236992,["GJX@GJXAIOU",[[-1,324,"\n"]],[322,322],[321,321]]],[1566993238465,["GJX@GJXAIOU",[[-1,323,"\n"]],[322,322],[321,321]]],[1566993238610,["GJX@GJXAIOU",[[-1,322,"\n"]],[321,321],[320,320]]],[1566993244296,["GJX@GJXAIOU",[[1,331,"\n"]],[330,330],[331,331]]],[1566993245877,["GJX@GJXAIOU",[[-1,331,"\n"],[1,332,"解法"]],[331,331],[333,333]]],[1566993246644,["GJX@GJXAIOU",[[1,333,"一："]],[333,333],[335,335]]],[1566993247035,["GJX@GJXAIOU",[[1,335,"\n\n"]],[335,335],[336,336]]],[1566993247988,["GJX@GJXAIOU",[[-1,336,"\n"],[1,337,"`"]],[336,336],[337,337]]],[1566993248345,["GJX@GJXAIOU",[[1,337,"``"]],[337,337],[339,339]]],[1566993248368,["GJX@GJXAIOU",[[1,339,"language\n```\n"]],[339,339],[339,347]]],[1566993248554,["GJX@GJXAIOU",[[-1,339,"language"],[1,347,"j"]],[339,347],[340,340]]],[1566993249522,["GJX@GJXAIOU",[[1,340,"ava"]],[340,340],[343,343]]],[1566993249707,["GJX@GJXAIOU",[[1,344,"\n"]],[343,343],[344,344]]],[1566993264491,["GJX@GJXAIOU",[[1,344,"class Solution {\n    public int minSubArrayLen(int s, int[] nums) {\n        // 保证初始状态下滑动窗口长度 [left...right] 为空\n        int left = 0;\n        int right = -1;\n        int sum = 0;\n        // 设置默认最小滑动窗口为 nums.length + 1\n        int defaultLength = nums.length + 1;\n        while (left < nums.length){\n            if ((right + 1) < nums.length && sum < s){\n                right++;\n                sum += nums [right];\n            }else {\n                sum -= nums [left];\n                left++;\n            }\n            // 当满足条件的时候返回\n            if (sum >= s){\n                defaultLength = defaultLength < right - left + 1 ? defaultLength :\n                        right - left + 1;\n            }\n        }\n        if (defaultLength == nums.length + 1){\n            return 0;\n        }\n        return defaultLength;\n    }\n}"]],[344,344],[1171,1171]]],[1566993267944,["GJX@GJXAIOU",[[1,1176,"\n"]],[1175,1175],[1176,1176]]],[1566993268514,["GJX@GJXAIOU",[[-1,1176,"\n"],[1,1177,"s"]],[1176,1176],[1177,1177]]],[1566993268723,["GJX@GJXAIOU",[[1,1177,"hi"]],[1177,1177],[1179,1179]]],[1566993269297,["GJX@GJXAIOU",[[-1,1177,"hi"]],[1179,1179],[1177,1177]]],[1566993269743,["GJX@GJXAIOU",[[-1,1176,"s"],[1,1177,"\n"]],[1177,1177],[1176,1176]]],[1566993273973,["GJX@GJXAIOU",[[1,335,"时间"]],[335,335],[337,337]]],[1566993277321,["GJX@GJXAIOU",[[1,337,"复杂度为O"]],[337,337],[342,342]]],[1566993277346,["GJX@GJXAIOU",[[1,341," "]],[342,342],[343,343]]],[1566993278002,["GJX@GJXAIOU",[[1,343,"()"]],[343,343],[345,345]]],[1566993279240,["GJX@GJXAIOU",[[1,344,"n"]],[344,344],[345,345]]],[1566993296434,["GJX@GJXAIOU",[[1,1187,"执行用时 :\n4 ms\n, 在所有 Java 提交中击败了\n58.19%\n的用户\n内存消耗 :\n40.8 MB\n, 在所有 Java 提交中击败了\n29.96%\n的用户"]],[1187,1187],[1271,1271]]],[1566993298951,["GJX@GJXAIOU",[[-1,1187,"执行用时 :\n4 ms\n, 在所有 Java 提交中击败了\n58.19%\n的用户\n内存消耗 :\n40.8 MB\n, 在所有 Java 提交中击败了\n29.96%\n的用户"]],[1271,1271],[1187,1187]]],[1566993300837,["GJX@GJXAIOU",[[1,1187,"执行用时 :4 ms, 在所有 Java 提交中击败了58.19%的用户\n\n内存消耗 :40.8 MB, 在所有 Java 提交中击败了29.96%的用户"]],[1187,1187],[1264,1264]]],[1566993302706,["GJX@GJXAIOU",[[-1,1224,"\n"]],[1224,1224],[1223,1223]]],[1566994684747,["GJX@GJXAIOU",[[1,1264,"\n"]],[1263,1263],[1264,1264]]],[1566994684875,["GJX@GJXAIOU",[[1,1265,"\n"]],[1264,1264],[1265,1265]]],[1566994685010,["GJX@GJXAIOU",[[1,1266,"\n"]],[1265,1265],[1266,1266]]],[1566994688282,["GJX@GJXAIOU",[[1,1266,"### "]],[1266,1266],[1270,1270]]],[1566994689579,["GJX@GJXAIOU",[[-1,1202," "],[1,1203," "],[-1,1207," "],[1,1208," "],[-1,1242," "],[1,1243," "],[-1,1247," "],[1,1248," "],[1,1270,"ces"]],[1270,1270],[1273,1273]]],[1566994690090,["GJX@GJXAIOU",[[-1,1270,"ces"]],[1273,1273],[1270,1270]]],[1566994693232,["GJX@GJXAIOU",[[1,1270,"测试程序"]],[1270,1270],[1274,1274]]],[1566994693540,["GJX@GJXAIOU",[[1,1275,"\n"]],[1274,1274],[1275,1275]]],[1566994694939,["GJX@GJXAIOU",[[-1,1275,"\n"],[1,1276,"`"]],[1275,1275],[1276,1276]]],[1566994695322,["GJX@GJXAIOU",[[1,1276,"``"]],[1276,1276],[1278,1278]]],[1566994695348,["GJX@GJXAIOU",[[1,1278,"language\n```\n"]],[1278,1278],[1278,1286]]],[1566994695580,["GJX@GJXAIOU",[[-1,1278,"language"],[1,1286,"j"]],[1278,1286],[1279,1279]]],[1566994696539,["GJX@GJXAIOU",[[1,1279,"ava"]],[1279,1279],[1282,1282]]],[1566994696694,["GJX@GJXAIOU",[[1,1283,"\n"]],[1282,1282],[1283,1283]]],[1566994713964,["GJX@GJXAIOU",[[1,1283,"public class LeetCode209Minimum_Size_Subarray_Sum_Test {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n int targeSum = scanner.nextInt();\n  scanner.nextLine();\n  String inputString = scanner.nextLine();\n  String[] inputArray = inputString.split(\" \");\n int[] numsArray = new int [inputArray.length];\n for (int i = 0; i < inputArray.length; i++) {\n            numsArray[i] = Integer.parseInt(inputArray[i].trim());\n  }\n\n        int ans = new LeetCode209Minimum_Size_Subarray_Sum().minSubArrayLen(targeSum, numsArray);\n  System.out.println(ans);\n  }\n}"]],[1283,1283],[1880,1880]]],[1566994716380,["GJX@GJXAIOU",[[-1,1283,"public class LeetCode209Minimum_Size_Subarray_Sum_Test {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n int targeSum = scanner.nextInt();\n  scanner.nextLine();\n  String inputString = scanner.nextLine();\n  String[] inputArray = inputString.split(\" \");\n int[] numsArray = new int [inputArray.length];\n for (int i = 0; i < inputArray.length; i++) {\n            numsArray[i] = Integer.parseInt(inputArray[i].trim());\n  }\n\n        int ans = new LeetCode209Minimum_Size_Subarray_Sum().minSubArrayLen(targeSum, numsArray);\n  System.out.println(ans);\n  }\n}"]],[1880,1880],[1283,1283]]],[1566994718524,["GJX@GJXAIOU",[[1,1283,"public class LeetCode209Minimum_Size_Subarray_Sum_Test {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int targeSum = scanner.nextInt();\n        scanner.nextLine();\n        String inputString = scanner.nextLine();\n        String[] inputArray = inputString.split(\" \");\n        int[] numsArray = new int [inputArray.length];\n        for (int i = 0; i < inputArray.length; i++) {\n            numsArray[i] = Integer.parseInt(inputArray[i].trim());\n        }\n\n        int ans = new LeetCode209Minimum_Size_Subarray_Sum().minSubArrayLen(targeSum, numsArray);\n        System.out.println(ans);\n    }\n}"]],[1283,1283],[1933,1933]]]],null,"GJX@GJXAIOU"]]}