{"compress":true,"commitItems":[["20feed1b-468a-428c-9a42-a530256cece0",1561896288153,"在一排座位（ seats）中，1 代表有人坐在座位上，0 代表座位上是空的。\n\n至少有一个空座位，且至少有一人坐在座位上。\n\n亚历克斯希望坐在一个能够使他与离他最近的人之间的距离达到最大化的座位上。\n\n返回他到离他最近的人的最大距离。\n\n示例 1：\n\n输入：[1,0,0,0,1,0,1]\n输出：2\n解释：\n如果亚历克斯坐在第二个空位（seats[2]）上，他到离他最近的人的距离为 2 。\n如果亚历克斯坐在其它任何一个空位上，他到离他最近的人的距离为 1 。\n因此，他到离他最近的人的最大距离是 2 。 \n示例 2：\n\n输入：[1,0,0,0]\n输出：3\n解释： \n如果亚历克斯坐在最后一个座位上，他离最近的人有 3 个座位远。\n这是可能的最大距离，所以答案是 3 。\n提示：\n\n1 <= seats.length <= 20000\nseats 中只含有 0 和 1，至少有一个 0，且至少有一个 1。\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/maximize-distance-to-closest-person\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。",[[1561896269357,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1561896269499,["GJX@GJXAIOU",[[1,0,"\n"]],[1,1],[2,2]]],[1561896271042,["GJX@GJXAIOU",[[1,0,"---\ntags: \n- 简单\n- 完成\n- 数组\nflag: green\nstyle: summer\ndate: '2019-6-29'\n---"]],[0,0],[73,73]]],[1561896273522,["GJX@GJXAIOU",[[-1,66,"29"]],[68,68],[66,66]]],[1561896274283,["GJX@GJXAIOU",[[1,66,"3"],[-1,79," "],[1,80," "],[-1,89," "],[1,90," "],[-1,101," "],[1,102," "],[-1,446," "],[1,447," "]],[66,66],[67,67]]],[1561896274427,["GJX@GJXAIOU",[[1,67,"0"]],[67,67],[68,68]]],[1561896276712,["GJX@GJXAIOU",[[1,75,"\n"]],[74,74],[75,75]]],[1561896287654,["GJX@GJXAIOU",[[1,75,"# 849.到最近的"]],[75,75],[85,85]]],[1561896290937,["GJX@GJXAIOU",[[1,85,"人的最大距离"]],[85,85],[91,91]]],[1561896291609,["GJX@GJXAIOU",[[1,92,"\n"]],[91,91],[92,92]]],[1561896293545,["GJX@GJXAIOU",[[1,93,"\n"]],[92,92],[93,93]]],[1561896293715,["GJX@GJXAIOU",[[1,94,"\n"]],[93,93],[94,94]]],[1561896298216,["GJX@GJXAIOU",[[1,94,"## 一、题目"]],[94,94],[101,101]]],[1561896298545,["GJX@GJXAIOU",[[1,102,"\n"]],[101,101],[102,102]]],[1561896303748,["GJX@GJXAIOU",[[1,629,"\n\n"]],[629,629],[630,630]]],[1561896303875,["GJX@GJXAIOU",[[1,631,"\n"]],[630,630],[631,631]]],[1561896303997,["GJX@GJXAIOU",[[1,632,"\n"]],[631,631],[632,632]]],[1561896308925,["GJX@GJXAIOU",[[1,632,"## 二、解答"]],[632,632],[639,639]]],[1561896312889,["GJX@GJXAIOU",[[-1,142,"\n"]],[142,142],[141,141]]],[1561896313900,["GJX@GJXAIOU",[[-1,164,"\n"]],[164,164],[163,163]]],[1561896314635,["GJX@GJXAIOU",[[-1,201,"\n"]],[201,201],[200,200]]],[1561896427135,["GJX@GJXAIOU",[[1,354,"\n"]],[354,354],[355,355]]],[1561896428463,["GJX@GJXAIOU",[[-1,361,"\n"]],[361,361],[361,361]]],[1561896431952,["GJX@GJXAIOU",[[-1,225,"\n"]],[225,225],[225,225]]],[1561898999375,["GJX@GJXAIOU",[[1,636,"\n"]],[635,635],[636,636]]],[1561898999518,["GJX@GJXAIOU",[[1,637,"\n"]],[636,636],[637,637]]],[1561898999670,["GJX@GJXAIOU",[[1,638,"\n"]],[637,637],[638,638]]],[1561899000770,["GJX@GJXAIOU",[[-1,638,"\n"],[1,639,"-"]],[638,638],[639,639]]],[1561899005137,["GJX@GJXAIOU",[[1,639," 自我解答\n- "]],[639,639],[647,647]]],[1561899005888,["GJX@GJXAIOU",[[-1,646," "]],[647,647],[646,646]]],[1561899006040,["GJX@GJXAIOU",[[-1,645,"-"],[1,646,"\n"]],[646,646],[645,645]]],[1561899007343,["GJX@GJXAIOU",[[-1,645,"\n"],[1,646,"`"]],[645,645],[646,646]]],[1561899007730,["GJX@GJXAIOU",[[1,646,"``"]],[646,646],[648,648]]],[1561899007754,["GJX@GJXAIOU",[[1,648,"language\n```\n"]],[648,648],[648,656]]],[1561899008649,["GJX@GJXAIOU",[[-1,648,"language"],[1,656,"j"]],[648,656],[649,649]]],[1561899009112,["GJX@GJXAIOU",[[1,649,"ava"]],[649,649],[652,652]]],[1561899009230,["GJX@GJXAIOU",[[1,653,"\n"]],[652,652],[653,653]]],[1561899011893,["GJX@GJXAIOU",[[1,645,"\n"]],[645,645],[646,646]]],[1561899018205,["GJX@GJXAIOU",[[1,654,"//849.到最近的人的最大距离\nclass Solution {\n    public int maxDistToClosest(int[] seats) {\n        //相当于求连续0的最大数目\n        /*\n        *  1.求开头连续0的个数\n        *  2.求中间连续0的个数\n       \t*  3.求结尾连续0的个数\n       \t*  4.求countLeft、countRight、countMid / 2 + 1中的最大值\n        */\n        int countLeft = 0;\n        int countRight = 0;\n        int countMid = 0;\n\n        int i = 0;\n        int j = seats.length - 1;\n        int k = 0;\n        //求开头开始连续0的个数\n        while( i < seats.length){\n        \tif (seats[i] == 0) {\n        \t\tcountLeft++;\n        \t\ti++;\n        \t}else{\n        \t\tbreak;\n        \t}\n        }\n\t\t\n\t\t//求结尾开始连续0的个数\n        while(j > 0){\n        \tif (seats[j] == 0) {\n        \t\tcountRight++;\n        \t\tj--;\n        \t}else{\n        \t\tbreak;\n        \t}\n        }\n\n        //求中间连续0的个数\n        //如果k = 0是值为0，上面已经求过了，如果值为1，因为计算0的连续个数，也不用考虑\n        int count = 0;\n        for (k = 1; k < seats.length; k++) {\n        \tif (seats[k] == 0) {\n        \t\tcount++;\n        \t\tcountMid = countMid > count ? countMid : count;\n        \t}else{\n        \t\tcount = 0;\n        \t}\n        }\n        \n        //中间连续零对应的最远距离\n        if (countMid % 2 == 0) {\n        \tcountMid = countMid / 2;\n        }else{\n        \tcountMid = countMid / 2 + 1;\n        }\n\n        int max = countLeft;\n        if ((countMid)> max) {\n        \tmax = countMid;\n        }\n        if (countRight > max) {\n        \tmax = countRight;\n        }\n\n        return max;\n    }\n}"]],[654,654],[2064,2064]]],[1561899041368,["GJX@GJXAIOU",[[1,2069,"\n"]],[2068,2068],[2069,2069]]],[1561899042982,["GJX@GJXAIOU",[[1,2070,"\n"]],[2069,2069],[2070,2070]]],[1561899043486,["GJX@GJXAIOU",[[-1,2070,"\n"],[1,2071,"f"]],[2070,2070],[2071,2071]]],[1561899043607,["GJX@GJXAIOU",[[1,2071,"u"]],[2071,2071],[2072,2072]]],[1561899044085,["GJX@GJXAIOU",[[-1,2071,"u"]],[2072,2072],[2071,2071]]],[1561899044206,["GJX@GJXAIOU",[[-1,2070,"f"],[1,2071,"\n"]],[2071,2071],[2070,2070]]],[1561899045720,["GJX@GJXAIOU",[[-1,2070,"\n"],[1,2071,"复杂"]],[2070,2070],[2072,2072]]],[1561899047339,["GJX@GJXAIOU",[[1,2072,"度分子"]],[2072,2072],[2075,2075]]],[1561899047926,["GJX@GJXAIOU",[[-1,2073,"分子"]],[2075,2075],[2073,2073]]],[1561899049155,["GJX@GJXAIOU",[[1,2073,"分析："]],[2073,2073],[2076,2076]]],[1561899049527,["GJX@GJXAIOU",[[1,2076,"\n\n"]],[2076,2076],[2077,2077]]],[1561899051063,["GJX@GJXAIOU",[[1,2077,"执行用时 :3 ms, 在所有 Java 提交中击败了99.28%的用户\n\n内存消耗 :45.4 MB, 在所有 Java 提交中击败了58.60%的用户"]],[2077,2077],[2154,2154]]],[1561899054759,["GJX@GJXAIOU",[[-1,2114,"\n"]],[2114,2114],[2113,2113]]],[1561899058888,["GJX@GJXAIOU",[[1,638,"\n"]],[637,637],[638,638]]],[1561899058997,["GJX@GJXAIOU",[[1,639,"\n"]],[638,638],[639,639]]],[1561899303155,["GJX@GJXAIOU",[[1,637,"-"],[-1,2094," "],[1,2095," "],[-1,2099," "],[1,2100," "],[-1,2134," "],[1,2135," "],[-1,2139," "],[1,2140," "]],[637,637],[638,638]]],[1561899305244,["GJX@GJXAIOU",[[1,638," 其他"]],[638,638],[641,641]]],[1561899306341,["GJX@GJXAIOU",[[-1,639,"其他"]],[641,641],[639,639]]],[1561899314780,["GJX@GJXAIOU",[[1,639,"其它解答的思想相似"]],[639,639],[648,648]]],[1561899317028,["GJX@GJXAIOU",[[-1,650,"\n"]],[650,650],[649,649]]]],null,"GJX@GJXAIOU"]]}