{"compress":true,"commitItems":[["38126be7-2d1d-4438-b663-02af39bfe32e",1561447193447,"",[[1561447143799,["GJX@GJXAIOU",[[1,0,"# 189.旋转数组\n\n\n\n"]],[0,0],[13,13]]],[1561447147343,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1561447147472,["GJX@GJXAIOU",[[1,0,"\n"]],[1,1],[2,2]]],[1561447147583,["GJX@GJXAIOU",[[1,2,"\n"]],[2,2],[3,3]]],[1561447149363,["GJX@GJXAIOU",[[1,0,"-"]],[0,0],[1,1]]],[1561447149500,["GJX@GJXAIOU",[[1,0,"-"]],[1,1],[2,2]]],[1561447149625,["GJX@GJXAIOU",[[1,2,"-"]],[2,2],[3,3]]],[1561447149647,["GJX@GJXAIOU",[[1,5,"---\n\n\n"]],[3,3],[4,4]]],[1561447154192,["GJX@GJXAIOU",[[1,4,"tags: "]],[4,4],[10,10]]],[1561447155519,["GJX@GJXAIOU",[[1,11,"\n"]],[10,10],[11,11]]],[1561447157138,["GJX@GJXAIOU",[[1,11,"- j"]],[11,11],[14,14]]],[1561447157607,["GJX@GJXAIOU",[[-1,13,"j"]],[14,14],[13,13]]],[1561447158898,["GJX@GJXAIOU",[[1,13,"简单"]],[13,13],[15,15]]],[1561447159153,["GJX@GJXAIOU",[[1,16,"\n"]],[15,15],[16,16]]],[1561447172031,["GJX@GJXAIOU",[[1,16,"-0"]],[16,16],[18,18]]],[1561447173143,["GJX@GJXAIOU",[[-1,17,"0"]],[18,18],[17,17]]],[1561447175863,["GJX@GJXAIOU",[[1,18,"\n"]],[17,17],[18,18]]],[1561447178690,["GJX@GJXAIOU",[[1,18,"- 数组"]],[18,18],[22,22]]],[1561447179047,["GJX@GJXAIOU",[[1,23,"\n"]],[22,22],[23,23]]],[1561447179359,["GJX@GJXAIOU",[[1,24,"\n"]],[23,23],[24,24]]],[1561447187202,["GJX@GJXAIOU",[[1,24,"flag: green"]],[24,24],[35,35]]],[1561447187607,["GJX@GJXAIOU",[[1,36,"\n"]],[35,35],[36,36]]],[1561447190962,["GJX@GJXAIOU",[[1,36,"style: sunm"]],[36,36],[47,47]]],[1561447191760,["GJX@GJXAIOU",[[-1,45,"nm"]],[47,47],[45,45]]],[1561447192561,["GJX@GJXAIOU",[[1,45,"mmer"]],[45,45],[49,49]]],[1561447192970,["GJX@GJXAIOU",[[1,50,"\n"]],[49,49],[50,50]]],[1561447195033,["GJX@GJXAIOU",[[1,50,"date: "]],[50,50],[56,56]]],[1561447195826,["GJX@GJXAIOU",[[1,57,"\n"]],[56,56],[57,57]]],[1561447196355,["GJX@GJXAIOU",[[-1,57,"\n"]],[57,57],[56,56]]],[1561447204033,["GJX@GJXAIOU",[[1,56,"'2019-6-25'"]],[56,56],[67,67]]],[1561447210156,["GJX@GJXAIOU",[[1,87,"## yi"]],[87,87],[92,92]]],[1561447210859,["GJX@GJXAIOU",[[-1,90,"yi"]],[92,92],[90,90]]],[1561447215085,["GJX@GJXAIOU",[[1,90,"一、题目"]],[90,90],[94,94]]],[1561447215392,["GJX@GJXAIOU",[[1,96,"\n"]],[94,94],[95,95]]],[1561447215530,["GJX@GJXAIOU",[[1,97,"\n"]],[95,95],[96,96]]],[1561447215777,["GJX@GJXAIOU",[[1,98,"\n"]],[96,96],[97,97]]],[1561447215944,["GJX@GJXAIOU",[[1,99,"\n"]],[97,97],[98,98]]],[1561447216844,["GJX@GJXAIOU",[[1,98,"2"]],[98,98],[99,99]]],[1561447217561,["GJX@GJXAIOU",[[-1,98,"2"]],[99,99],[98,98]]],[1561447220276,["GJX@GJXAIOU",[[1,98,"## 二？"]],[98,98],[103,103]]],[1561447220880,["GJX@GJXAIOU",[[-1,102,"？"]],[103,103],[102,102]]],[1561447222454,["GJX@GJXAIOU",[[1,102,"、解答"]],[102,102],[105,105]]],[1561447222705,["GJX@GJXAIOU",[[1,107,"\n"]],[105,105],[106,106]]],[1561447224520,["GJX@GJXAIOU",[[1,98,"\n"]],[96,96],[97,97]]],[1561447224634,["GJX@GJXAIOU",[[1,99,"\n"]],[97,97],[98,98]]],[1561447236860,["GJX@GJXAIOU",[[1,96,"给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。\n\n示例 1:\n\n输入: [1,2,3,4,5,6,7] 和 k = 3\n输出: [5,6,7,1,2,3,4]\n解释:\n向右旋转 1 步: [7,1,2,3,4,5,6]\n向右旋转 2 步: [6,7,1,2,3,4,5]\n向右旋转 3 步: [5,6,7,1,2,3,4]\n示例 2:\n\n输入: [-1,-100,3,99] 和 k = 2\n输出: [3,99,-1,-100]\n解释: \n向右旋转 1 步: [99,-1,-100,3]\n向右旋转 2 步: [3,99,-1,-100]\n说明:\n\n尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。\n要求使用空间复杂度为 O(1) 的 原地 算法。\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/rotate-array\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。"]],[96,96],[541,541]]],[1561447266576,["GJX@GJXAIOU",[[-1,139,"\n"]],[139,139],[138,138]]],[1561447266763,["GJX@GJXAIOU",[[-1,137,":"]],[138,138],[137,137]]],[1561447268723,["GJX@GJXAIOU",[[-1,114," k "],[1,117," k "],[-1,123," k "],[1,126," k "],[1,137,"："],[-1,270," "],[1,271," "],[-1,424," "],[1,425," "],[-1,431," 原地 "],[1,435," 原地 "]],[137,137],[138,138]]],[1561447272593,["GJX@GJXAIOU",[[1,133,"- "]],[133,133],[135,135]]],[1561447274705,["GJX@GJXAIOU",[[1,271,"\n"]],[271,271],[272,272]]],[1561447275978,["GJX@GJXAIOU",[[1,272,"- "]],[272,272],[274,274]]],[1561447277321,["GJX@GJXAIOU",[[-1,280,"\n"]],[280,280],[280,280]]],[1561447280936,["GJX@GJXAIOU",[[1,381,"\n"]],[381,381],[382,382]]],[1561447281475,["GJX@GJXAIOU",[[1,382,"- "]],[382,382],[384,384]]],[1561447282816,["GJX@GJXAIOU",[[-1,388,"\n"]],[388,388],[387,387]]],[1561449799483,["GJX@GJXAIOU",[[1,560,"\n"]],[558,558],[559,559]]],[1561449799599,["GJX@GJXAIOU",[[1,561,"\n"]],[559,559],[560,560]]],[1561449804265,["GJX@GJXAIOU",[[1,560,"- 自我解答："]],[560,560],[567,567]]],[1561449805504,["GJX@GJXAIOU",[[1,568,"- \n"]],[567,567],[570,570]]],[1561449805639,["GJX@GJXAIOU",[[-1,568,"- "]],[570,570],[569,569]]],[1561449805952,["GJX@GJXAIOU",[[-1,569,"\n"]],[569,569],[568,568]]],[1561449807472,["GJX@GJXAIOU",[[-1,568,"\n"],[1,569,"`"]],[568,568],[569,569]]],[1561449807811,["GJX@GJXAIOU",[[1,569,"``"]],[569,569],[571,571]]],[1561449807836,["GJX@GJXAIOU",[[1,571,"language\n```\n"]],[571,571],[571,579]]],[1561449808971,["GJX@GJXAIOU",[[-1,571,"language"],[1,579,"j"]],[571,579],[572,572]]],[1561449809456,["GJX@GJXAIOU",[[1,572,"ava"]],[572,572],[575,575]]],[1561449809615,["GJX@GJXAIOU",[[1,576,"\n"]],[575,575],[576,576]]],[1561449811057,["GJX@GJXAIOU",[[1,576,"//旋转数组：最直接的方法\nclass Solution {\n    public void rotate(int[] nums, int k) {\n        //将后面几个依次输出到新的数组中，前面的追加到新的数组即可\n        int length  = nums.length;\n        int[]nums_copy = new int[length];\n        System.arraycopy(nums, 0, nums_copy, 0, length);\n        /* 分情况讨论\n           当K < length时候，直接将length - k到数组尾部的值输出即可，然后将前面的部分依次追加到后面；\n           当k > length时候，因为这样会旋转几次，旋转完数组最前面数组下标为 k % length,然后其他同上； \n        */\n\n        if (k > length) { \n            int p = 0;\n            for (int i = length - (k % length); i < length ;i++) {\n                nums[p++] = nums_copy[i];\n            }\n            System.arraycopy(nums_copy,0,nums,k % length,length - (k % length));\n        }else {        \n            int j = 0;\n            for (int i = length - k; i < length ; i++ ) {\n                nums[j++] = nums_copy[i];\n             }\n            System.arraycopy(nums_copy, 0, nums, k, length - k);\n        }\n        \n    }\n}"]],[576,576],[1496,1496]]],[1561449813073,["GJX@GJXAIOU",[[1,568,"- \n"]],[567,567],[570,570]]],[1561449813767,["GJX@GJXAIOU",[[-1,568,"- "]],[570,570],[568,568]]],[1561449817495,["GJX@GJXAIOU",[[1,1502,"\n"]],[1501,1501],[1502,1502]]],[1561449817616,["GJX@GJXAIOU",[[1,1503,"\n"]],[1502,1502],[1503,1503]]],[1561449817937,["GJX@GJXAIOU",[[-1,1503,"\n"],[1,1504,"-"]],[1503,1503],[1504,1504]]],[1561449818633,["GJX@GJXAIOU",[[1,1504," fu"]],[1504,1504],[1507,1507]]],[1561449819304,["GJX@GJXAIOU",[[-1,1505,"fu"]],[1507,1507],[1505,1505]]],[1561449824034,["GJX@GJXAIOU",[[1,1505,"复杂度分析：\n- "]],[1505,1505],[1514,1514]]],[1561449824667,["GJX@GJXAIOU",[[-1,1513," "]],[1514,1514],[1513,1513]]],[1561449824783,["GJX@GJXAIOU",[[-1,1512,"-"],[1,1513,"\n"]],[1513,1513],[1512,1512]]],[1561449834080,["GJX@GJXAIOU",[[1,1512,"执行用时 :1 ms, 在所有 Java 提交中击败了98.69%的用户\n\n内存消耗 :39.6 MB, 在所有 Java 提交中击败了21.48%的用户"]],[1512,1512],[1589,1589]]],[1561449838688,["GJX@GJXAIOU",[[1,1512,"- "],[1,1549,"- "],[1,1550,"- "]],[1512,1589],[1514,1595]]],[1561449840464,["GJX@GJXAIOU",[[1,1512,"  "],[1,1551,"  "],[1,1554,"  "]],[1514,1595],[1516,1601]]],[1561449842639,["GJX@GJXAIOU",[[-1,1553,"  - "]],[1557,1557],[1553,1553]]],[1561449843010,["GJX@GJXAIOU",[[-1,1553,"\n"]],[1553,1553],[1552,1552]]],[1561449847328,["GJX@GJXAIOU",[[1,560,"\n"]],[558,558],[559,559]]],[1561449847440,["GJX@GJXAIOU",[[1,561,"\n"]],[559,559],[560,560]]],[1561449847648,["GJX@GJXAIOU",[[1,562,"\n"]],[560,560],[561,561]]],[1561449879722,["GJX@GJXAIOU",[[1,559,"方法 1：暴力\n最简单的方法是旋转 k 次，每次将数组旋转 1 个元素。\n\nJava\npublic class Solution {\n    public void rotate(int[] nums, int k) {\n        int temp, previous;\n        for (int i = 0; i < k; i++) {\n            previous = nums[nums.length - 1];\n            for (int j = 0; j < nums.length; j++) {\n                temp = nums[j];\n                nums[j] = previous;\n                previous = temp;\n            }\n        }\n    }\n}\n复杂度分析\n\n时间复杂度：O(n*k)O(n∗k) 。每个元素都被移动 1 步（O(n)O(n)） k次（O(k)O(k)） 。\n空间复杂度：O(1)O(1) 。没有额外空间被使用。\n方法 2：使用额外的数组\n算法\n\n我们可以用一个额外的数组来将每个元素放到正确的位置上，也就是原本数组里下标为 ii 的我们把它放到 (i+k)\\%数组长度(i+k)%数组长度 的位置。然后把新的数组拷贝到原数组中。\n\nJava\npublic class Solution {\n    public void rotate(int[] nums, int k) {\n        int[] a = new int[nums.length];\n        for (int i = 0; i < nums.length; i++) {\n            a[(i + k) % nums.length] = nums[i];\n        }\n        for (int i = 0; i < nums.length; i++) {\n            nums[i] = a[i];\n        }\n    }\n}\n复杂度分析\n\n时间复杂度： O(n)O(n) 。将数字放到新的数组中需要一遍遍历，另一边来把新数组的元素拷贝回原数组。\n空间复杂度： O(n)O(n)。另一个数组需要原数组长度的空间。\n方法 3：使用环状替换\n算法\n\n如果我们直接把每一个数字放到它最后的位置，但这样的后果是遗失原来的元素。因此，我们需要把被替换的数字保存在变量 temptemp 里面。然后，我们将被替换数字（temptemp）放到它正确的位置，并继续这个过程 nn 次， nn 是数组的长度。这是因为我们需要将数组里所有的元素都移动。但是，这种方法可能会有个问题，如果 n\\%k==0n%k==0，其中 k=k\\%nk=k%n （因为如果 kk 大于 nn ，移动 kk 次实际上相当于移动 k\\%nk%n 次）。这种情况下，我们会发现在没有遍历所有数字的情况下回到出发数字。此时，我们应该从下一个数字开始再重复相同的过程。\n\n现在，我们看看上面方法的证明。假设，数组里我们有 nn 个元素并且 kk 是要求移动的次数。更进一步，假设 n\\%k=0n%k=0 。第一轮中，所有移动数字的下标 ii 满足 i\\%k==0i%k==0 。这是因为我们每跳 kk 步，我们只会到达相距为 kk 个位置下标的数。每一轮，我们都会移动 \\frac{n}{k} \nk\nn\n​\t\n  个元素。下一轮中，我们会移动满足 i\\%k==1i%k==1 的位置的数。这样的轮次会一直持续到我们再次遇到 i\\%k==0i%k==0 的地方为止，此时 i=ki=k 。此时在正确位置上的数字共有 k \\times \\frac{n}{k}=nk× \nk\nn\n​\t\n =n 个。因此所有数字都在正确位置上。\n\n让我们看一下接下来的例子，以更好地说明这个过程：\n\nnums: [1, 2, 3, 4, 5, 6]\nk: 2\n\n\nJava\npublic class Solution {\n    public void rotate(int[] nums, int k) {\n        k = k % nums.length;\n        int count = 0;\n        for (int start = 0; count < nums.length; start++) {\n            int current = start;\n            int prev = nums[start];\n            do {\n                int next = (current + k) % nums.length;\n                int temp = nums[next];\n                nums[next] = prev;\n                prev = temp;\n                current = next;\n                count++;\n            } while (start != current);\n        }\n    }\n}\n复杂度分析\n\n时间复杂度：O(n)O(n) 。只遍历了每个元素一次。\n空间复杂度：O(1)O(1) 。使用了常数个额外空间。\n方法 4：使用反转\n算法\n\n这个方法基于这个事实：当我们旋转数组 k 次， k\\%nk%n 个尾部元素会被移动到头部，剩下的元素会被向后移动。\n\n在这个方法中，我们首先将所有元素反转。然后反转前 k 个元素，再反转后面 n-kn−k 个元素，就能得到想要的结果。\n\n假设 n=7n=7 且 k=3k=3 。\n\n原始数组                  : 1 2 3 4 5 6 7\n反转所有数字后             : 7 6 5 4 3 2 1\n反转前 k 个数字后          : 5 6 7 4 3 2 1\n反转后 n-k 个数字后        : 5 6 7 1 2 3 4 --> 结果\nJava\npublic class Solution {\n    public void rotate(int[] nums, int k) {\n        k %= nums.length;\n        reverse(nums, 0, nums.length - 1);\n        reverse(nums, 0, k - 1);\n        reverse(nums, k, nums.length - 1);\n    }\n    public void reverse(int[] nums, int start, int end) {\n        while (start < end) {\n            int temp = nums[start];\n            nums[start] = nums[end];\n            nums[end] = temp;\n            start++;\n            end--;\n        }\n    }\n}\n复杂度分析\n\n时间复杂度：O(n)O(n) 。 nn 个元素被反转了总共 3 次。\n空间复杂度：O(1)O(1) 。 没有使用额外的空间。\n\n作者：LeetCode\n链接：https://leetcode-cn.com/problems/two-sum/solution/xuan-zhuan-shu-zu-by-leetcode/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[559,559],[3871,3871]]],[1561449886251,["GJX@GJXAIOU",[[1,559,"-"],[-1,4846," "],[1,4847," "],[-1,4851," "],[1,4852," "],[-1,4890," "],[1,4891," "],[-1,4895," "],[1,4896," "]],[559,559],[560,560]]],[1561449886404,["GJX@GJXAIOU",[[1,560," "]],[560,560],[561,561]]],[1561449890513,["GJX@GJXAIOU",[[1,561,"**"],[1,568,"**"]],[561,568],[561,572]]],[1561449892208,["GJX@GJXAIOU",[[1,559,"\n"]],[558,558],[559,559]]],[1561449893029,["GJX@GJXAIOU",[[1,559,"- "]],[559,559],[561,561]]],[1561449904310,["GJX@GJXAIOU",[[1,561,"官方解法："]],[561,561],[566,566]]],[1561449911703,["GJX@GJXAIOU",[[1,17," 完成"]],[17,17],[20,20]]],[1561449934162,["GJX@GJXAIOU",[[1,584,"\n"]],[584,584],[585,585]]],[1561449937497,["GJX@GJXAIOU",[[1,570,"\n"]],[570,570],[571,571]]],[1561449941532,["GJX@GJXAIOU",[[1,616,"···"]],[616,616],[619,619]]],[1561449942872,["GJX@GJXAIOU",[[-1,616,"···"]],[619,619],[616,616]]],[1561449944178,["GJX@GJXAIOU",[[1,616,"```"]],[616,616],[619,619]]],[1561449946265,["GJX@GJXAIOU",[[1,989,"\n"]],[988,988],[989,989]]],[1561449946387,["GJX@GJXAIOU",[[1,990,"\n"]],[989,989],[990,990]]],[1561449947290,["GJX@GJXAIOU",[[1,990,"```"]],[990,990],[993,993]]],[1561449951458,["GJX@GJXAIOU",[[-1,1007,"O(n*k)"],[1,1013,"$"]],[1007,1013],[1008,1008]]],[1561449953754,["GJX@GJXAIOU",[[1,1015,"$"]],[1015,1015],[1016,1016]]],[1561449955683,["GJX@GJXAIOU",[[-1,1014," "]],[1015,1015],[1014,1014]]],[1561449971403,["GJX@GJXAIOU",[[-1,1033,"O(n)）"]],[1033,1038],[1033,1033]]],[1561449977528,["GJX@GJXAIOU",[[-1,1028,"（"]],[1029,1029],[1028,1028]]],[1561449981977,["GJX@GJXAIOU",[[-1,1035,"（(k)O"]],[1040,1040],[1035,1035]]],[1561449984003,["GJX@GJXAIOU",[[-1,1039,"）"]],[1040,1040],[1039,1039]]],[1561449988768,["GJX@GJXAIOU",[[-1,1052,"O(1)"]],[1056,1056],[1052,1052]]],[1561449991648,["GJX@GJXAIOU",[[1,994,"\n"]],[994,994],[995,995]]],[1561449992410,["GJX@GJXAIOU",[[1,995,"- "]],[995,995],[997,997]]],[1561449993913,["GJX@GJXAIOU",[[-1,1003,"\n"]],[1003,1003],[1003,1003]]],[1561449995562,["GJX@GJXAIOU",[[1,1003,"- "]],[1003,1003],[1005,1005]]],[1561449996027,["GJX@GJXAIOU",[[1,1003,"  "]],[1005,1005],[1007,1007]]],[1561449998082,["GJX@GJXAIOU",[[1,1048,"- "]],[1048,1048],[1050,1050]]],[1561449998402,["GJX@GJXAIOU",[[1,1048,"  "]],[1050,1050],[1052,1052]]],[1561450000177,["GJX@GJXAIOU",[[1,1075,"\n"]],[1075,1075],[1076,1076]]],[1561450000296,["GJX@GJXAIOU",[[1,1076,"\n"]],[1076,1076],[1077,1077]]],[1561450001797,["GJX@GJXAIOU",[[1,1077,"- "]],[1077,1077],[1079,1079]]],[1561450005371,["GJX@GJXAIOU",[[1,1079,"**"],[1,1091,"**"]],[1079,1091],[1079,1095]]],[1561450007794,["GJX@GJXAIOU",[[1,1096,"\n"]],[1096,1096],[1097,1097]]],[1561450007912,["GJX@GJXAIOU",[[1,1097,"\n"]],[1097,1097],[1098,1098]]],[1561450018315,["GJX@GJXAIOU",[[1,1098,"**"],[1,1100,"**"]],[1098,1100],[1098,1104]]],[1561450163201,["GJX@GJXAIOU",[[1,1199,"···"]],[1199,1199],[1202,1202]]],[1561450164703,["GJX@GJXAIOU",[[-1,1199,"···"]],[1202,1202],[1199,1199]]],[1561450165799,["GJX@GJXAIOU",[[1,1199,"```"]],[1199,1199],[1202,1202]]],[1561450168761,["GJX@GJXAIOU",[[1,1515,"\n"]],[1514,1514],[1515,1515]]],[1561450170452,["GJX@GJXAIOU",[[1,1515,"```"]],[1515,1515],[1518,1518]]],[1561450192137,["GJX@GJXAIOU",[[1,1162,"="]],[1162,1162],[1163,1163]]],[1561450192164,["GJX@GJXAIOU",[[-1,1162,"="]],[1163,1163],[1162,1162]]],[1561450194088,["GJX@GJXAIOU",[[-1,1161,"\\"]],[1162,1162],[1161,1161]]],[1561450196122,["GJX@GJXAIOU",[[-1,1146,"i "]],[1148,1148],[1146,1146]]],[1561450200895,["GJX@GJXAIOU",[[-1,1164,"(i+k)%数组长度"]],[1164,1174],[1164,1164]]],[1561450207684,["GJX@GJXAIOU",[[1,1164,"$"]],[1164,1164],[1165,1165]]],[1561450212873,["GJX@GJXAIOU",[[1,1154,"$"]],[1154,1154],[1155,1155]]],[1561450225307,["GJX@GJXAIOU",[[-1,1165,"$"]],[1166,1166],[1165,1165]]],[1561450226737,["GJX@GJXAIOU",[[1,1162," "]],[1162,1162],[1163,1163]]],[1561450228639,["GJX@GJXAIOU",[[-1,1162," "]],[1163,1163],[1162,1162]]],[1561450230305,["GJX@GJXAIOU",[[1,1166,"  "]],[1165,1165],[1167,1167]]],[1561450234434,["GJX@GJXAIOU",[[-1,1154,"$"]],[1155,1155],[1154,1154]]],[1561450235112,["GJX@GJXAIOU",[[1,1154," "]],[1154,1154],[1155,1155]]],[1561450241464,["GJX@GJXAIOU",[[1,1509,"\n"]],[1508,1508],[1509,1509]]],[1561450242049,["GJX@GJXAIOU",[[1,1509,"- "]],[1509,1509],[1511,1511]]],[1561450243032,["GJX@GJXAIOU",[[-1,1509,"- "]],[1511,1511],[1509,1509]]],[1561450244731,["GJX@GJXAIOU",[[1,1510,"- "]],[1510,1510],[1512,1512]]],[1561450247272,["GJX@GJXAIOU",[[1,1519,"- "]],[1519,1519],[1521,1521]]],[1561450254569,["GJX@GJXAIOU",[[1,1574,"- "]],[1574,1574],[1576,1576]]],[1561450256697,["GJX@GJXAIOU",[[1,1609,"\n"]],[1609,1609],[1610,1610]]],[1561450256810,["GJX@GJXAIOU",[[1,1610,"\n"]],[1610,1610],[1611,1611]]],[1561450268912,["GJX@GJXAIOU",[[-1,1518,"\n"]],[1518,1518],[1517,1517]]],[1561450271424,["GJX@GJXAIOU",[[-1,1531,"O(n)"]],[1527,1531],[1527,1527]]],[1561450272879,["GJX@GJXAIOU",[[-1,1582,"O(n)"]],[1578,1582],[1578,1578]]],[1561450294092,["GJX@GJXAIOU",[[1,1518,"  "],[1,1569,"  "]],[1520,1600],[1522,1604]]],[1561450299672,["GJX@GJXAIOU",[[1,1606,"**"],[1,1617,"**"]],[1606,1617],[1606,1621]]],[1561450302253,["GJX@GJXAIOU",[[1,1606,"- "]],[1606,1606],[1608,1608]]],[1561450303864,["GJX@GJXAIOU",[[1,1624,"\n"]],[1624,1624],[1625,1625]]],[1561450690810,["GJX@GJXAIOU",[[-1,1689,"temp"]],[1693,1693],[1689,1689]]],[1561450705379,["GJX@GJXAIOU",[[-1,1709,"temp"]],[1713,1713],[1709,1709]]],[1561450711408,["GJX@GJXAIOU",[[-1,1789,"n%k==0"]],[1789,1795],[1789,1789]]],[1561450714466,["GJX@GJXAIOU",[[-1,1783,"\\"]],[1784,1784],[1783,1783]]],[1561450718905,["GJX@GJXAIOU",[[1,1782,"$"]],[1782,1782],[1783,1783]]],[1561450721538,["GJX@GJXAIOU",[[1,1789,"$"]],[1789,1789],[1790,1790]]],[1561450733336,["GJX@GJXAIOU",[[-1,1789,"$"]],[1790,1790],[1789,1789]]],[1561450735027,["GJX@GJXAIOU",[[-1,1782,"$"]],[1783,1783],[1782,1782]]],[1561450735866,["GJX@GJXAIOU",[[-1,1734,"n"]],[1735,1735],[1734,1734]]],[1561450736864,["GJX@GJXAIOU",[[-1,1728,"n"]],[1729,1729],[1728,1728]]],[1561450742568,["GJX@GJXAIOU",[[-1,1793,"\\"]],[1794,1794],[1793,1793]]],[1561450744418,["GJX@GJXAIOU",[[-1,1795,"k=k%n"]],[1795,1800],[1795,1795]]],[1561450745697,["GJX@GJXAIOU",[[-1,1803,"k"]],[1803,1803],[1802,1802]]],[1561450746752,["GJX@GJXAIOU",[[-1,1808,"n"]],[1808,1808],[1807,1807]]],[1561450747784,["GJX@GJXAIOU",[[-1,1814,"k"]],[1814,1814],[1813,1813]]],[1561450750058,["GJX@GJXAIOU",[[-1,1829,"k%n"]],[1832,1832],[1829,1829]]],[1561450751651,["GJX@GJXAIOU",[[-1,1826,"\\"]],[1827,1827],[1826,1826]]],[1561450763929,["GJX@GJXAIOU",[[-1,1944,"\\"]],[1945,1945],[1944,1944]]],[1561450767183,["GJX@GJXAIOU",[[-1,1932,"次数。更进一步，假设n%k=0n%k=0 "]],[1948,1953],[1932,1932]]],[1561450768630,["GJX@GJXAIOU",[[1,1932,"次数。更进一步，假设"]],[1932,1932],[1942,1942]]],[1561450769373,["GJX@GJXAIOU",[[1,1943,"n%k=0n%k=0 "]],[1942,1942],[1948,1953]]],[1561450770110,["GJX@GJXAIOU",[[1,1944,"\\"]],[1944,1944],[1945,1945]]],[1561450774344,["GJX@GJXAIOU",[[-1,1944,"\\%k=0n"]],[1949,1949],[1943,1943]]],[1561450778528,["GJX@GJXAIOU",[[-1,1972,"\\%k==0i"]],[1978,1978],[1971,1971]]],[1561450779936,["GJX@GJXAIOU",[[-1,1966,"i"]],[1967,1967],[1966,1966]]],[1561450780944,["GJX@GJXAIOU",[[-1,1915,"n"]],[1916,1916],[1915,1915]]],[1561450782058,["GJX@GJXAIOU",[[-1,1923,"k"]],[1923,1923],[1922,1922]]],[1561450783616,["GJX@GJXAIOU",[[-1,1986,"k"]],[1986,1986],[1985,1985]]],[1561450787033,["GJX@GJXAIOU",[[-1,2000,"k"]],[2000,2000],[1999,1999]]],[1561450800747,["GJX@GJXAIOU",[[-1,2035,"n"]],[2036,2036],[2035,2035]]],[1561450801016,["GJX@GJXAIOU",[[-1,2035,"\n"]],[2035,2035],[2034,2034]]],[1561450803105,["GJX@GJXAIOU",[[-1,2038,"  "]],[2040,2040],[2038,2038]]],[1561450803482,["GJX@GJXAIOU",[[-1,2037,"\n"]],[2038,2038],[2037,2037]]],[1561450804160,["GJX@GJXAIOU",[[-1,2035,"​\t"]],[2037,2037],[2035,2035]]],[1561450804667,["GJX@GJXAIOU",[[-1,2034,"\n"]],[2035,2035],[2034,2034]]],[1561450805089,["GJX@GJXAIOU",[[-1,2033,"k"]],[2034,2034],[2033,2033]]],[1561450805536,["GJX@GJXAIOU",[[-1,2032,"\n"]],[2033,2033],[2032,2032]]],[1561450810684,["GJX@GJXAIOU",[[1,2020,"$"]],[2020,2020],[2021,2021]]],[1561450814258,["GJX@GJXAIOU",[[1,2032,"$"]],[2032,2032],[2033,2033]]],[1561450840720,["GJX@GJXAIOU",[[-1,2052,"\\%k==1i"]],[2058,2058],[2051,2051]]],[1561450846961,["GJX@GJXAIOU",[[-1,2083,"\\%k==0i"]],[2089,2089],[2082,2082]]],[1561450853066,["GJX@GJXAIOU",[[1,2051,"`"]],[2051,2051],[2052,2052]]],[1561450854835,["GJX@GJXAIOU",[[1,2058,"`"]],[2058,2058],[2059,2059]]],[1561450856754,["GJX@GJXAIOU",[[1,2083,"`"]],[2083,2083],[2084,2084]]],[1561450858105,["GJX@GJXAIOU",[[-1,2084," "]],[2085,2085],[2084,2084]]],[1561450859578,["GJX@GJXAIOU",[[1,2090,"`"]],[2090,2090],[2091,2091]]],[1561450863200,["GJX@GJXAIOU",[[-1,2102,"=ki"]],[2104,2104],[2101,2101]]],[1561450869866,["GJX@GJXAIOU",[[1,2120,"$"]],[2120,2120],[2121,2121]]],[1561450875419,["GJX@GJXAIOU",[[1,2143,"$"]],[2143,2143],[2144,2144]]],[1561450881048,["GJX@GJXAIOU",[[-1,2144,"k× "]],[2145,2145],[2144,2144]]],[1561450881535,["GJX@GJXAIOU",[[-1,2144,"\n"]],[2144,2144],[2144,2144]]],[1561450882104,["GJX@GJXAIOU",[[-1,2144,"k"]],[2144,2144],[2144,2144]]],[1561450882568,["GJX@GJXAIOU",[[-1,2144,"\n"]],[2144,2144],[2144,2144]]],[1561450883095,["GJX@GJXAIOU",[[-1,2144,"n"]],[2144,2144],[2144,2144]]],[1561450883655,["GJX@GJXAIOU",[[-1,2144,"\n"]],[2144,2144],[2144,2144]]],[1561450884520,["GJX@GJXAIOU",[[-1,2144,"​\t"]],[2144,2144],[2144,2144]]],[1561450885095,["GJX@GJXAIOU",[[-1,2144,"\n"]],[2144,2144],[2144,2144]]],[1561450886344,["GJX@GJXAIOU",[[-1,2144," =n"]],[2144,2144],[2144,2144]]],[1561450918568,["GJX@GJXAIOU",[[1,2219,"![示例]($resource/%E7%A4%BA%E4%BE%8B.png)"]],[2219,2219],[2259,2259]]],[1561450922107,["GJX@GJXAIOU",[[1,2260,"```"]],[2260,2260],[2263,2263]]],[1561450927698,["GJX@GJXAIOU",[[1,2808,"\n"]],[2807,2807],[2808,2808]]],[1561450928322,["GJX@GJXAIOU",[[1,2808,"```"]],[2808,2808],[2811,2811]]],[1561450930297,["GJX@GJXAIOU",[[1,2812,"\n"]],[2812,2812],[2813,2813]]],[1561450930745,["GJX@GJXAIOU",[[1,2813,"- "]],[2813,2813],[2815,2815]]],[1561450932793,["GJX@GJXAIOU",[[-1,2821,"\n"]],[2821,2821],[2820,2820]]],[1561450935882,["GJX@GJXAIOU",[[1,2821,"- "]],[2821,2821],[2823,2823]]],[1561450937530,["GJX@GJXAIOU",[[1,2851,"- "]],[2851,2851],[2853,2853]]],[1561450939683,["GJX@GJXAIOU",[[1,2851,"  "]],[2853,2853],[2855,2855]]],[1561450940345,["GJX@GJXAIOU",[[1,2821,"  "]],[2824,2824],[2826,2826]]],[1561450942409,["GJX@GJXAIOU",[[1,2885,"\n"]],[2885,2885],[2886,2886]]],[1561450942553,["GJX@GJXAIOU",[[1,2886,"\n"]],[2886,2886],[2887,2887]]],[1561450946731,["GJX@GJXAIOU",[[1,2887,"**"],[1,2896,"**"]],[2887,2896],[2887,2900]]],[1561450960520,["GJX@GJXAIOU",[[-1,2930,"\\%nk"]],[2933,2933],[2929,2929]]],[1561450973128,["GJX@GJXAIOU",[[-1,2998,"-kn"]],[3000,3000],[2997,2997]]],[1561450977392,["GJX@GJXAIOU",[[-1,3021,"=7n"]],[3023,3023],[3020,3020]]],[1561450980192,["GJX@GJXAIOU",[[-1,3027,"=3k"]],[3029,3029],[3026,3026]]],[1561450988011,["GJX@GJXAIOU",[[1,3032,"```"]],[3032,3032],[3035,3035]]],[1561450989873,["GJX@GJXAIOU",[[1,3189,"\n"]],[3188,3188],[3189,3189]]],[1561450990011,["GJX@GJXAIOU",[[1,3190,"\n"]],[3189,3189],[3190,3190]]],[1561450991315,["GJX@GJXAIOU",[[1,3190,"```"]],[3190,3190],[3193,3193]]],[1561450994896,["GJX@GJXAIOU",[[-1,3189,"\n"]],[3189,3189],[3188,3188]]],[1561450998320,["GJX@GJXAIOU",[[1,3193,"\n"]],[3193,3193],[3194,3194]]],[1561450999787,["GJX@GJXAIOU",[[1,3194,"```"]],[3194,3194],[3197,3197]]],[1561451006299,["GJX@GJXAIOU",[[1,3670,"\n"]],[3669,3669],[3670,3670]]],[1561451007109,["GJX@GJXAIOU",[[1,3670,"```"]],[3670,3670],[3673,3673]]],[1561451010272,["GJX@GJXAIOU",[[-1,3688,"(n)O"]],[3691,3691],[3687,3687]]],[1561451013579,["GJX@GJXAIOU",[[-1,3695,"n"]],[3695,3695],[3694,3694]]],[1561451018042,["GJX@GJXAIOU",[[-1,3721,"O(1) "]],[3726,3726],[3721,3721]]]],null,"GJX@GJXAIOU"]]}