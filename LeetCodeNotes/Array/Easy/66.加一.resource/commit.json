{"compress":true,"commitItems":[["03c99443-a0c5-4d8d-abae-af2a0e6a0079",1561341243589,"",[[1561341194419,["GJX@GJXAIOU",[[1,0,"# 66.加一\n\n\n\n"]],[0,0],[10,10]]],[1561341198771,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1561341198939,["GJX@GJXAIOU",[[1,0,"\n"]],[1,1],[2,2]]],[1561341199074,["GJX@GJXAIOU",[[1,2,"\n"]],[2,2],[3,3]]],[1561341201478,["GJX@GJXAIOU",[[1,0,"-"]],[0,0],[1,1]]],[1561341201670,["GJX@GJXAIOU",[[1,0,"-"]],[1,1],[2,2]]],[1561341202199,["GJX@GJXAIOU",[[1,2,"-"]],[2,2],[3,3]]],[1561341202222,["GJX@GJXAIOU",[[1,5,"---\n\n\n"]],[3,3],[4,4]]],[1561341217527,["GJX@GJXAIOU",[[1,4,"tags: shu"]],[4,4],[13,13]]],[1561341218455,["GJX@GJXAIOU",[[-1,10,"shu"]],[13,13],[10,10]]],[1561341222229,["GJX@GJXAIOU",[[1,11,"\n"]],[10,10],[11,11]]],[1561341225668,["GJX@GJXAIOU",[[1,11,"- 简单"]],[11,11],[15,15]]],[1561341226230,["GJX@GJXAIOU",[[1,16,"\n"]],[15,15],[16,16]]],[1561341248311,["GJX@GJXAIOU",[[1,16,"- "]],[16,16],[18,18]]],[1561341249171,["GJX@GJXAIOU",[[1,19,"\n"]],[18,18],[19,19]]],[1561341251113,["GJX@GJXAIOU",[[1,19,"- 数组"]],[19,19],[23,23]]],[1561341251477,["GJX@GJXAIOU",[[1,24,"\n"]],[23,23],[24,24]]],[1561341251582,["GJX@GJXAIOU",[[1,25,"\n"]],[24,24],[25,25]]],[1561341258160,["GJX@GJXAIOU",[[1,25,"flag: sum"]],[25,25],[34,34]]],[1561341260016,["GJX@GJXAIOU",[[-1,31,"sum"]],[34,34],[31,31]]],[1561341261831,["GJX@GJXAIOU",[[1,31,"green"]],[31,31],[36,36]]],[1561341262316,["GJX@GJXAIOU",[[1,37,"\n"]],[36,36],[37,37]]],[1561341268783,["GJX@GJXAIOU",[[1,37,"style: summer"]],[37,37],[50,50]]],[1561341269286,["GJX@GJXAIOU",[[1,51,"\n"]],[50,50],[51,51]]],[1561341276191,["GJX@GJXAIOU",[[1,51,"data"]],[51,51],[55,55]]],[1561341276860,["GJX@GJXAIOU",[[-1,54,"a"]],[55,55],[54,54]]],[1561341284824,["GJX@GJXAIOU",[[1,54,"e: '2019-6-24'"]],[54,54],[68,68]]],[1561341292439,["GJX@GJXAIOU",[[1,85,"## yi"]],[85,85],[90,90]]],[1561341293115,["GJX@GJXAIOU",[[-1,88,"yi"]],[90,90],[88,88]]],[1561341295948,["GJX@GJXAIOU",[[1,88,"一、题目"]],[88,88],[92,92]]],[1561341296291,["GJX@GJXAIOU",[[1,94,"\n"]],[92,92],[93,93]]],[1561341296414,["GJX@GJXAIOU",[[1,95,"\n"]],[93,93],[94,94]]],[1561341296562,["GJX@GJXAIOU",[[1,96,"\n"]],[94,94],[95,95]]],[1561341296774,["GJX@GJXAIOU",[[1,97,"\n"]],[95,95],[96,96]]],[1561341300305,["GJX@GJXAIOU",[[1,96,"## 二‘"]],[96,96],[101,101]]],[1561341300970,["GJX@GJXAIOU",[[-1,100,"‘"]],[101,101],[100,100]]],[1561341301496,["GJX@GJXAIOU",[[1,100,"、"]],[100,100],[101,101]]],[1561341304312,["GJX@GJXAIOU",[[1,101,"解答"]],[101,101],[103,103]]],[1561341314045,["GJX@GJXAIOU",[[1,96,"\n"]],[93,93],[94,94]]],[1561341314480,["GJX@GJXAIOU",[[1,94,"给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。\n\n最高位数字存放在数组的首位， 数组中每个元素只存储一个数字。\n\n你可以假设除了整数 0 之外，这个整数不会以零开头。\n\n示例 1:\n\n输入: [1,2,3]\n输出: [1,2,4]\n解释: 输入数组表示数字 123。\n示例 2:\n\n输入: [4,3,2,1]\n输出: [4,3,2,2]\n解释: 输入数组表示数字 4321。\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/plus-one\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。"]],[94,94],[388,388]]],[1561341324697,["GJX@GJXAIOU",[[1,189,"-"],[-1,191," "],[1,192," "],[-1,240," "],[1,241," "]],[189,189],[190,190]]],[1561341324897,["GJX@GJXAIOU",[[1,190," "]],[190,190],[191,191]]],[1561341327060,["GJX@GJXAIOU",[[-1,197,"\n"]],[197,197],[196,196]]],[1561341329670,["GJX@GJXAIOU",[[1,239,"\n"]],[238,238],[239,239]]],[1561341331839,["GJX@GJXAIOU",[[1,240,"- "]],[240,240],[242,242]]],[1561341333302,["GJX@GJXAIOU",[[-1,248,"\n"]],[248,248],[247,247]]],[1561341337589,["GJX@GJXAIOU",[[1,276,"\n"]],[276,276],[277,277]]],[1561341342566,["GJX@GJXAIOU",[[-1,276,"\n"]],[276,276],[275,275]]],[1561341347854,["GJX@GJXAIOU",[[-1,128,"\n"]],[128,128],[127,127]]],[1561341349376,["GJX@GJXAIOU",[[-1,159,"\n"]],[159,159],[158,158]]],[1561341377407,["GJX@GJXAIOU",[[1,99,"**"],[1,101,"**"]],[99,101],[99,105]]],[1561345369001,["GJX@GJXAIOU",[[1,405,"\n"]],[404,404],[405,405]]],[1561345369135,["GJX@GJXAIOU",[[1,406,"\n"]],[405,405],[406,406]]],[1561345379750,["GJX@GJXAIOU",[[1,405,"思路\n标签：数组遍历\n这道题需要整理出来有哪几种情况，在进行处理会更舒服\n末位无进位，则末位加一即可，因为末位无进位，前面也不可能产生进位，比如 45 => 46\n末位有进位，在中间位置进位停止，则需要找到进位的典型标志，即为当前位 %10 后为 0，则前一位加 1，直到不为 0 为止，比如 499 => 500\n末位有进位，并且一直进位到最前方导致结果多出一位，对于这种情况，需要在第 2 种情况遍历结束的基础上，进行单独处理，比如 999 => 1000\n在下方的 Java 和 JavaScript 代码中，对于第三种情况，对其他位进行了赋值 0 处理，Java 比较 tricky 直接 new 数组即可，JavaScript 则使用了 ES6 语法进行赋值\n时间复杂度：O(n)O(n)\n代码\nJavaJavaScript\nclass Solution {\n    public int[] plusOne(int[] digits) {\n        int len = digits.length;\n        for(int i = len - 1; i >= 0; i--) {\n            digits[i]++;\n            digits[i] %= 10;\n            if(digits[i]!=0)\n                return digits;\n        }\n        digits = new int[len + 1];\n        digits[0] = 1;\n        return digits;\n    }\n}\n画解\n\n\n作者：guanpengchn\n链接：https://leetcode-cn.com/problems/two-sum/solution/hua-jie-suan-fa-66-jia-yi-by-guanpengchn/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[405,405],[1286,1286]]],[1561345523448,["GJX@GJXAIOU",[[1,1126,"\n"]],[1124,1124],[1125,1125]]],[1561345530636,["GJX@GJXAIOU",[[1,1125,"![加一]($resource/%E5%8A%A0%E4%B8%80.gif)"]],[1125,1125],[1165,1165]]],[1561345537329,["GJX@GJXAIOU",[[1,758,"·"]],[758,758],[759,759]]],[1561345538449,["GJX@GJXAIOU",[[-1,758,"·"]],[759,759],[758,758]]],[1561345540081,["GJX@GJXAIOU",[[1,758,"```"]],[758,758],[761,761]]],[1561345540106,["GJX@GJXAIOU",[[1,761,"language\n```\n"]],[761,761],[761,769]]],[1561345542991,["GJX@GJXAIOU",[[1,1137,"\n"]],[1136,1136],[1137,1137]]],[1561345543527,["GJX@GJXAIOU",[[1,1137,"```"]],[1137,1137],[1140,1140]]],[1561345543552,["GJX@GJXAIOU",[[1,1140,"language\n```\n"]],[1140,1140],[1140,1148]]],[1561345545717,["GJX@GJXAIOU",[[-1,1137,"```language"]],[1140,1148],[1137,1137]]],[1561345547534,["GJX@GJXAIOU",[[-1,770,"```"]],[770,773],[770,770]]],[1561345550062,["GJX@GJXAIOU",[[-1,761,"language"],[1,769,"j"]],[761,769],[762,762]]],[1561345550536,["GJX@GJXAIOU",[[1,762,"ava"]],[762,762],[765,765]]],[1561345554292,["GJX@GJXAIOU",[[-1,767,"JavaJavaScript"]],[767,781],[767,767]]],[1561345554621,["GJX@GJXAIOU",[[-1,767,"\n"]],[767,767],[766,766]]],[1561345555053,["GJX@GJXAIOU",[[-1,766,"\n"]],[766,766],[765,765]]],[1561345557198,["GJX@GJXAIOU",[[1,1033,"\n        "]],[1024,1024],[1033,1033]]],[1561345558104,["GJX@GJXAIOU",[[1,1033,"、、"]],[1033,1033],[1035,1035]]],[1561345558775,["GJX@GJXAIOU",[[-1,1033,"、、"]],[1035,1035],[1033,1033]]],[1561345559422,["GJX@GJXAIOU",[[1,1033,"、、"]],[1033,1033],[1035,1035]]],[1561345560448,["GJX@GJXAIOU",[[-1,1033,"、、"]],[1035,1035],[1033,1033]]],[1561345561144,["GJX@GJXAIOU",[[1,1033,"、、"]],[1033,1033],[1035,1035]]],[1561345561727,["GJX@GJXAIOU",[[-1,1033,"、、"]],[1035,1035],[1033,1033]]],[1561345562255,["GJX@GJXAIOU",[[1,1033,"、"]],[1033,1033],[1034,1034]]],[1561345562822,["GJX@GJXAIOU",[[-1,1033,"、"]],[1034,1034],[1033,1033]]],[1561345563496,["GJX@GJXAIOU",[[1,1033,"//"]],[1033,1033],[1035,1035]]],[1561345568960,["GJX@GJXAIOU",[[1,1035,"针对【"]],[1035,1035],[1038,1038]]],[1561345569839,["GJX@GJXAIOU",[[-1,1037,"【"]],[1038,1038],[1037,1037]]],[1561345571183,["GJX@GJXAIOU",[[1,1037,"[]"]],[1037,1037],[1039,1039]]],[1561345573136,["GJX@GJXAIOU",[[1,1038,"99"]],[1038,1038],[1040,1040]]],[1561345576056,["GJX@GJXAIOU",[[1,1039,","]],[1039,1039],[1040,1040]]],[1561345578647,["GJX@GJXAIOU",[[1,1042,",【"]],[1042,1042],[1044,1044]]],[1561345579205,["GJX@GJXAIOU",[[-1,1043,"【"]],[1044,1044],[1043,1043]]],[1561345580142,["GJX@GJXAIOU",[[1,1043,"[]"]],[1043,1043],[1045,1045]]],[1561345582631,["GJX@GJXAIOU",[[1,1044,"9."]],[1044,1044],[1046,1046]]],[1561345583409,["GJX@GJXAIOU",[[-1,1045,"."]],[1046,1046],[1045,1045]]],[1561345585942,["GJX@GJXAIOU",[[1,1045,",9...9"]],[1045,1045],[1051,1051]]],[1561345591494,["GJX@GJXAIOU",[[1,1052,"d"]],[1052,1052],[1053,1053]]],[1561345592425,["GJX@GJXAIOU",[[-1,1052,"d"]],[1053,1053],[1052,1052]]],[1561345614033,["GJX@GJXAIOU",[[1,1052,"等等直接将数组长度+1，然后"]],[1052,1052],[1066,1066]]],[1561345673174,["GJX@GJXAIOU",[[1,1066,"将第一位置为1，其他均为0"]],[1066,1066],[1079,1079]]],[1561346222273,["GJX@GJXAIOU",[[1,1175,"\n"]],[1173,1173],[1174,1174]]],[1561346222487,["GJX@GJXAIOU",[[1,1176,"\n"]],[1174,1174],[1175,1175]]],[1561346229711,["GJX@GJXAIOU",[[1,1175,"执行用时 :1 ms, 在所有 Java 提交中击败了96.75%的用户\n\n内存消耗 :35.8 MB, 在所有 Java 提交中击败了36.79%的用户"]],[1175,1175],[1252,1252]]],[1561346234666,["GJX@GJXAIOU",[[1,1174,"复杂度"],[-1,1190," "],[1,1191," "],[-1,1195," "],[1,1196," "],[-1,1231," "],[1,1232," "],[-1,1236," "],[1,1237," "]],[1174,1174],[1177,1177]]],[1561346236209,["GJX@GJXAIOU",[[1,1177,"分析："]],[1177,1177],[1180,1180]]],[1561346238698,["GJX@GJXAIOU",[[-1,1218,"\n"]],[1218,1218],[1217,1217]]],[1561346242982,["GJX@GJXAIOU",[[1,1174,"* "],[1,1181,"* "],[1,1218,"* "]],[1174,1257],[1176,1263]]],[1561346246205,["GJX@GJXAIOU",[[1,1183,"  "]],[1185,1185],[1187,1187]]],[1561346246741,["GJX@GJXAIOU",[[1,1224,"  "]],[1226,1226],[1228,1228]]],[1561346269501,["GJX@GJXAIOU",[[-1,750,"O(n)"]],[754,754],[750,750]]],[1561346280796,["GJX@GJXAIOU",[[1,740,"\n"]],[740,740],[741,741]]],[1561346283498,["GJX@GJXAIOU",[[-1,712,"，JavaScript 则使用了 ES6 语法进行赋值"]],[712,739],[712,712]]],[1561346287656,["GJX@GJXAIOU",[[-1,646,"和 JavaScript "]],[646,659],[646,646]]],[1561346292351,["GJX@GJXAIOU",[[1,405,"**"],[1,407,"**"]],[405,407],[405,411]]],[1561346295999,["GJX@GJXAIOU",[[-1,412,"标签：数组遍历"]],[412,419],[412,412]]],[1561346299520,["GJX@GJXAIOU",[[1,439,"- "]],[439,439],[441,441]]],[1561346301698,["GJX@GJXAIOU",[[1,486,"- "]],[486,486],[488,488]]],[1561346304464,["GJX@GJXAIOU",[[1,564,"- "]],[564,564],[566,566]]],[1561346306734,["GJX@GJXAIOU",[[1,639,"- \n"]],[638,638],[641,641]]],[1561346307402,["GJX@GJXAIOU",[[-1,639,"- "]],[641,641],[639,639]]],[1561346318329,["GJX@GJXAIOU",[[-1,1230,"画解"]],[1231,1232],[1230,1230]]],[1561346320182,["GJX@GJXAIOU",[[-1,1231,"\n"]],[1230,1230],[1229,1229]]],[1561346340539,["GJX@GJXAIOU",[[1,703,"；"]],[703,703],[704,704]]],[1561346348155,["GJX@GJXAIOU",[[1,704,"一些特殊情况就是当出现 9999、999999 之类的数字时，循环到最后也需要进位，出现这种情况时需要手动将它进一位。"]],[704,704],[763,763]]]],null,"GJX@GJXAIOU"],["537be8cb-1734-4746-8c78-7e4f0d5de22a",1561358244327,"---\ntags: \n- 简单\n- \n- 数组\n\nflag: green\nstyle: summer\ndate: '2019-6-24'\n---\n\n\n\n# 66.加一\n\n## 一、题目\n\n给定一个由**整数**组成的非空数组所表示的非负整数，在该数的基础上加一。\n最高位数字存放在数组的首位， 数组中每个元素只存储一个数字。\n你可以假设除了整数 0 之外，这个整数不会以零开头。\n\n- 示例 1:\n输入: [1,2,3]\n输出: [1,2,4]\n解释: 输入数组表示数字 123。\n\n- 示例 2:\n输入: [4,3,2,1]\n输出: [4,3,2,2]\n解释: 输入数组表示数字 4321。\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/plus-one\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\n\n\n## 二、解答\n\n**思路**\n\n这道题需要整理出来有哪几种情况，在进行处理会更舒服\n- 末位无进位，则末位加一即可，因为末位无进位，前面也不可能产生进位，比如 45 => 46\n- 末位有进位，在中间位置进位停止，则需要找到进位的典型标志，即为当前位 %10 后为 0，则前一位加 1，直到不为 0 为止，比如 499 => 500\n- 末位有进位，并且一直进位到最前方导致结果多出一位，对于这种情况，需要在第 2 种情况遍历结束的基础上，进行单独处理，比如 999 => 1000\n\n在下方的 Java 代码中，对于第三种情况，对其他位进行了赋值 0 处理，Java 比较 tricky 直接 new 数组即可；一些特殊情况就是当出现 9999、999999 之类的数字时，循环到最后也需要进位，出现这种情况时需要手动将它进一位。\n\n时间复杂度：O(n)\n代码\n```java\nclass Solution {\n    public int[] plusOne(int[] digits) {\n        int len = digits.length;\n        for(int i = len - 1; i >= 0; i--) {\n            digits[i]++;\n            digits[i] %= 10;\n            if(digits[i]!=0)\n                return digits;\n        }\n        //针对[9,9],[9,9...9]等等直接将数组长度+1，然后将第一位置为1，其他均为0\n        digits = new int[len + 1];\n        digits[0] = 1;\n        return digits;\n    }\n}\n\n```\n* 复杂度分析：\n  * 执行用时 :1 ms, 在所有 Java 提交中击败了96.75%的用户\n  * 内存消耗 :35.8 MB, 在所有 Java 提交中击败了36.79%的用户\n\n\n![加一]($resource/%E5%8A%A0%E4%B8%80.gif)\n\n作者：guanpengchn\n链接：https://leetcode-cn.com/problems/two-sum/solution/hua-jie-suan-fa-66-jia-yi-by-guanpengchn/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n",[[1561358192204,["GJX@GJXAIOU",[[1,18,"参考"]],[18,18],[20,20]]]],null,"GJX@GJXAIOU"]]}