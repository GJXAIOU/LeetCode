{"compress":true,"commitItems":[["f8a008e0-bc34-4832-96ce-8556695e8de0",1560145641934,"",[[1560145635134,["GJX@GJXAIOU",[[1,0,"# 561.数组拆分1\n\n\n\n"]],[0,0],[14,14]]],[1560145639226,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1560145639379,["GJX@GJXAIOU",[[1,0,"\n"]],[1,1],[2,2]]],[1560145639526,["GJX@GJXAIOU",[[1,2,"\n"]],[2,2],[3,3]]],[1560145639662,["GJX@GJXAIOU",[[1,3,"\n"]],[3,3],[4,4]]],[1560145642428,["GJX@GJXAIOU",[[1,0,"-"]],[0,0],[1,1]]],[1560145642564,["GJX@GJXAIOU",[[1,0,"-"]],[1,1],[2,2]]],[1560145642703,["GJX@GJXAIOU",[[1,2,"-"]],[2,2],[3,3]]],[1560145642725,["GJX@GJXAIOU",[[1,5,"---\n\n\n"]],[3,3],[4,4]]],[1560145648846,["GJX@GJXAIOU",[[1,4,"tags: "]],[4,4],[10,10]]],[1560145649837,["GJX@GJXAIOU",[[1,11,"\n"]],[10,10],[11,11]]],[1560145653533,["GJX@GJXAIOU",[[1,11,"- jiandan "]],[11,11],[21,21]]],[1560145654848,["GJX@GJXAIOU",[[-1,13,"jiandan "]],[21,21],[13,13]]],[1560145657352,["GJX@GJXAIOU",[[1,13,"简单"]],[13,13],[15,15]]],[1560145657657,["GJX@GJXAIOU",[[1,16,"\n"]],[15,15],[16,16]]],[1560145659031,["GJX@GJXAIOU",[[1,16,"- "]],[16,16],[18,18]]],[1560145664564,["GJX@GJXAIOU",[[1,19,"\n"]],[18,18],[19,19]]],[1560145666319,["GJX@GJXAIOU",[[1,19,"- 数组"]],[19,19],[23,23]]],[1560145666838,["GJX@GJXAIOU",[[1,24,"\n"]],[23,23],[24,24]]],[1560145666997,["GJX@GJXAIOU",[[1,25,"\n"]],[24,24],[25,25]]],[1560145670584,["GJX@GJXAIOU",[[1,25,"flags"]],[25,25],[30,30]]],[1560145671132,["GJX@GJXAIOU",[[-1,29,"s"]],[30,30],[29,29]]],[1560145675476,["GJX@GJXAIOU",[[1,29,": green"]],[29,29],[36,36]]],[1560145675932,["GJX@GJXAIOU",[[1,37,"\n"]],[36,36],[37,37]]],[1560145684263,["GJX@GJXAIOU",[[1,37,"data: '1"]],[37,37],[45,45]]],[1560145685138,["GJX@GJXAIOU",[[-1,44,"1"]],[45,45],[44,44]]],[1560145693441,["GJX@GJXAIOU",[[1,44,"2019-6-10'"]],[44,44],[54,54]]],[1560145701112,["GJX@GJXAIOU",[[1,78,"\n"]],[75,75],[76,76]]],[1560145701220,["GJX@GJXAIOU",[[1,79,"\n"]],[76,76],[77,77]]],[1560145701369,["GJX@GJXAIOU",[[1,80,"\n"]],[77,77],[78,78]]],[1560145701435,["GJX@GJXAIOU",[[1,81,"\n"]],[78,78],[79,79]]],[1560145701801,["GJX@GJXAIOU",[[1,82,"\n"]],[79,79],[80,80]]],[1560145701921,["GJX@GJXAIOU",[[1,83,"\n"]],[80,80],[81,81]]],[1560145702038,["GJX@GJXAIOU",[[1,84,"\n"]],[81,81],[82,82]]],[1560145702281,["GJX@GJXAIOU",[[1,85,"\n"]],[82,82],[83,83]]],[1560145702423,["GJX@GJXAIOU",[[1,86,"\n"]],[83,83],[84,84]]],[1560145702536,["GJX@GJXAIOU",[[1,87,"\n"]],[84,84],[85,85]]],[1560145702670,["GJX@GJXAIOU",[[1,88,"\n"]],[85,85],[86,86]]],[1560145702788,["GJX@GJXAIOU",[[1,89,"\n"]],[86,86],[87,87]]],[1560145702933,["GJX@GJXAIOU",[[1,90,"\n"]],[87,87],[88,88]]],[1560145703056,["GJX@GJXAIOU",[[1,91,"\n"]],[88,88],[89,89]]],[1560145703187,["GJX@GJXAIOU",[[1,92,"\n"]],[89,89],[90,90]]],[1560145708227,["GJX@GJXAIOU",[[1,77,"## yi"]],[77,77],[82,82]]],[1560145709008,["GJX@GJXAIOU",[[-1,80,"yi"]],[82,82],[80,80]]],[1560145715024,["GJX@GJXAIOU",[[1,80,"一、题目"]],[80,80],[84,84]]],[1560145715359,["GJX@GJXAIOU",[[1,100,"\n"]],[84,84],[85,85]]],[1560145715521,["GJX@GJXAIOU",[[1,101,"\n"]],[85,85],[86,86]]],[1560145715737,["GJX@GJXAIOU",[[1,102,"\n"]],[86,86],[87,87]]],[1560145715874,["GJX@GJXAIOU",[[1,103,"\n"]],[87,87],[88,88]]],[1560145715969,["GJX@GJXAIOU",[[1,104,"\n"]],[88,88],[89,89]]],[1560145716108,["GJX@GJXAIOU",[[1,105,"\n"]],[89,89],[90,90]]],[1560145716219,["GJX@GJXAIOU",[[1,106,"\n"]],[90,90],[91,91]]],[1560145717969,["GJX@GJXAIOU",[[1,91,"##  "]],[91,91],[95,95]]],[1560145718677,["GJX@GJXAIOU",[[-1,94," "]],[95,95],[94,94]]],[1560145722629,["GJX@GJXAIOU",[[1,94,"二、解答"]],[94,94],[98,98]]],[1560145723262,["GJX@GJXAIOU",[[1,114,"\n"]],[98,98],[99,99]]],[1560145723410,["GJX@GJXAIOU",[[1,115,"\n"]],[99,99],[100,100]]],[1560145723707,["GJX@GJXAIOU",[[1,116,"\n"]],[100,100],[101,101]]],[1560145735098,["GJX@GJXAIOU",[[1,86,"给定长度为 2n 的数组, 你的任务是将这些数分成 n 对, 例如 (a1, b1), (a2, b2), ..., (an, bn) ，使得从1 到 n 的 min(ai, bi) 总和最大。\n\n示例 1:\n\n输入: [1,4,3,2]\n\n输出: 4\n解释: n 等于 2, 最大总和为 4 = min(1, 2) + min(3, 4).\n提示:\n\nn 是正整数,范围在 [1, 10000].\n数组中的元素范围在 [-10000, 10000].\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/array-partition-i\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。"]],[86,86],[418,418]]],[1560145759275,["GJX@GJXAIOU",[[-1,314,"来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/array-partition-i\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。"]],[314,418],[314,314]]],[1560146276647,["GJX@GJXAIOU",[[1,345,"\n"]],[329,329],[330,330]]],[1560146276782,["GJX@GJXAIOU",[[1,346,"\n"]],[330,330],[331,331]]],[1560146276927,["GJX@GJXAIOU",[[1,347,"\n"]],[331,331],[332,332]]],[1560146278110,["GJX@GJXAIOU",[[-1,91," 2n "],[1,95," 2n "],[-1,111," "],[1,112," "],[-1,161," "],[1,162," "],[-1,264," "],[1,265," "],[1,332,"****"]],[332,332],[334,334]]],[1560146283658,["GJX@GJXAIOU",[[1,334,"自己算法："]],[334,334],[339,339]]],[1560146285567,["GJX@GJXAIOU",[[1,357,"\n"]],[341,341],[342,342]]],[1560146286494,["GJX@GJXAIOU",[[1,342,"```"]],[342,342],[345,345]]],[1560146286518,["GJX@GJXAIOU",[[1,345,"language\n```\n"]],[345,345],[345,353]]],[1560146287726,["GJX@GJXAIOU",[[-1,345,"language"],[1,353,"j"]],[345,353],[346,346]]],[1560146288150,["GJX@GJXAIOU",[[1,346,"ava"]],[346,346],[349,349]]],[1560146288365,["GJX@GJXAIOU",[[1,350,"\n"]],[349,349],[350,350]]],[1560146289390,["GJX@GJXAIOU",[[1,350,"class Solution {\n    public int arrayPairSum(int[] nums) {\n        Arrays.sort(nums);\n        int sum = 0;\n        for (int i = 0; i < nums.length; i++ ) {\n           sum += nums[i];\n           i++;\n        }\n        return sum;\n    }\n}"]],[350,350],[586,586]]],[1560146302851,["GJX@GJXAIOU",[[1,328,"执行用时 : 37 ms, 在Array Partition I的Java提交中击败了48.38% 的用户\n\n内存消耗 : 52 MB, 在Array Partition I的Java提交中击败了13.08% 的用户"]],[328,328],[436,436]]],[1560146307181,["GJX@GJXAIOU",[[-1,328,"执行用时 : 37 ms, 在Array Partition I的Java提交中击败了48.38% 的用户\n\n内存消耗 : 52 MB, 在Array Partition I的Java提交中击败了13.08% 的用户"]],[328,436],[328,328]]],[1560146308990,["GJX@GJXAIOU",[[1,592,"执行用时 : 37 ms, 在Array Partition I的Java提交中击败了48.38% 的用户\n\n内存消耗 : 52 MB, 在Array Partition I的Java提交中击败了13.08% 的用户"]],[592,592],[700,700]]],[1560146311130,["GJX@GJXAIOU",[[1,332,"\n"]],[328,328],[329,329]]],[1560146311285,["GJX@GJXAIOU",[[1,333,"\n"]],[329,329],[330,330]]],[1560146311489,["GJX@GJXAIOU",[[1,334,"\n"]],[330,330],[331,331]]],[1560146311643,["GJX@GJXAIOU",[[1,335,"\n"]],[331,331],[332,332]]],[1560146311757,["GJX@GJXAIOU",[[1,336,"\n"]],[332,332],[333,333]]],[1560146538998,["GJX@GJXAIOU",[[-1,505,"+"]],[506,506],[505,505]]],[1560146539502,["GJX@GJXAIOU",[[-1,505,""],[1,505,"="],[-1,602," "],[1,603," "],[-1,645," "],[1,646," "],[-1,657," "],[1,658," "],[-1,700," "],[1,701," "]],[505,505],[506,506]]],[1560146541254,["GJX@GJXAIOU",[[1,507," "]],[506,506],[507,507]]],[1560146541654,["GJX@GJXAIOU",[[1,507,"2"]],[507,507],[508,508]]],[1560146543613,["GJX@GJXAIOU",[[1,504," "]],[504,504],[505,505]]],[1560146547773,["GJX@GJXAIOU",[[-1,541,"           i++;"]],[541,556],[541,541]]],[1560146548097,["GJX@GJXAIOU",[[-1,541,"\n"]],[541,541],[540,540]]],[1560146552803,["GJX@GJXAIOU",[[-1,336,"\n"]],[335,335],[334,334]]],[1560146552925,["GJX@GJXAIOU",[[-1,335,"\n"]],[334,334],[333,333]]],[1560146553084,["GJX@GJXAIOU",[[-1,334,"\n"]],[333,333],[332,332]]],[1560146553292,["GJX@GJXAIOU",[[-1,333,"\n"]],[332,332],[331,331]]],[1560146553476,["GJX@GJXAIOU",[[-1,332,"\n"]],[331,331],[330,330]]],[1560146553685,["GJX@GJXAIOU",[[-1,331,"\n"]],[330,330],[329,329]]],[1560146553808,["GJX@GJXAIOU",[[-1,330,"\n"]],[329,329],[328,328]]],[1560146553938,["GJX@GJXAIOU",[[-1,329,"\n"]],[328,328],[327,327]]],[1560146554276,["GJX@GJXAIOU",[[-1,328,"\n"]],[327,327],[326,326]]],[1560146586111,["GJX@GJXAIOU",[[1,698,"\n"]],[683,683],[684,684]]],[1560146586240,["GJX@GJXAIOU",[[1,699,"\n"]],[684,684],[685,685]]],[1560146586389,["GJX@GJXAIOU",[[1,700,"\n"]],[685,685],[686,686]]],[1560146586620,["GJX@GJXAIOU",[[1,701,"\n"]],[686,686],[687,687]]],[1560146595904,["GJX@GJXAIOU",[[1,687,"zheng"]],[687,687],[692,692]]],[1560146596656,["GJX@GJXAIOU",[[-1,687,"zheng"]],[692,692],[687,687]]],[1560146597877,["GJX@GJXAIOU",[[1,687,"****"]],[687,687],[689,689]]],[1560146598853,["GJX@GJXAIOU",[[1,689,"yauns"]],[689,689],[694,694]]],[1560146599683,["GJX@GJXAIOU",[[-1,689,"yauns"]],[694,694],[689,689]]],[1560146601302,["GJX@GJXAIOU",[[1,689,"原理"]],[689,689],[691,691]]],[1560146603758,["GJX@GJXAIOU",[[1,691,"证明："]],[691,691],[694,694]]],[1560146605440,["GJX@GJXAIOU",[[1,711,"\n"]],[696,696],[697,697]]],[1560146606982,["GJX@GJXAIOU",[[1,712,"\n"]],[697,697],[698,698]]],[1560146627668,["GJX@GJXAIOU",[[1,698,"min(l \ni\n​\t\n ,l \nj\n​\t\n ) 数对必是有序数列上相邻元素的证明\n设原始数列为LL，记为 \n\n将LL排序，得到一个有序数列PP，记为 \n\n数列LL所有元素的和记为sumLsumL，对于给定的LL这是一个定值。\n目标问题记为一个最大化问题：\n\n\n证明：\n容易有  其中 \n得到\n\n\n得到\n\n目标最大化问题\n\n等价于\n\n等价于一个最小化问题\n\n等价于\n\n即元素对的差的绝对值最小的问题。将两个元素映射到有序数列P，以上问题等价于\n\n记作\n\n由于数列PP是有序的，所以对任意的m > 1m>1，有\n\n对任意的m < -1m<−1，有\n\n所以m = 1m=1或m = - 1m=−1 。\n\n所以 l_il \ni\n​\t\n  和 l_jl \nj\n​\t\n  必定是有序数列上的相邻元素。则组对方式一定是 Q=[(p_1, p_2), (p_3, p_4), ... , (p_{n-1}, p_n) ]Q=[(p \n1\n​\t\n ,p \n2\n​\t\n ),(p \n3\n​\t\n ,p \n4\n​\t\n ),...,(p \nn−1\n​\t\n ,p \nn\n​\t\n )]，注意QQ可以是无序的。\n\n作者：xie-yue-san-xing\n链接：https://leetcode-cn.com/problems/two-sum/solution/minshu-dui-bi-shi-you-xu-shu-lie-shang-xiang-lin-y/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[698,698],[1365,1365]]],[1560146635046,["GJX@GJXAIOU",[[1,698,"￥"]],[698,698],[699,699]]],[1560146637179,["GJX@GJXAIOU",[[-1,698,"￥"]],[699,699],[698,698]]],[1560146637877,["GJX@GJXAIOU",[[1,698,"$"]],[698,698],[699,699]]],[1560146640412,["GJX@GJXAIOU",[[1,723,"$"]],[723,723],[724,724]]],[1560146645812,["GJX@GJXAIOU",[[-1,723,"$"]],[724,724],[723,723]]],[1560146646903,["GJX@GJXAIOU",[[-1,698,"$"]],[699,699],[698,698]]],[1560146647616,["GJX@GJXAIOU",[[1,698,"￥"]],[698,698],[699,699]]],[1560146649811,["GJX@GJXAIOU",[[-1,698,"￥min(l \ni\n​\t\n ,l \nj\n​\t\n ) 数对必是有序数列上相邻元素的证明\n设原始数列为LL，记为 \n\n将LL排序，得到一个有序数列PP，记为 \n\n数列LL所有元素的和记为sumLsumL，对于给定的LL这是一个定值。\n目标问题记为一个最大化问题：\n\n\n证明：\n容易有  其中 \n得到\n\n\n得到\n\n目标最大化问题\n\n等价于\n\n等价于一个最小化问题\n\n等价于\n\n即元素对的差的绝对值最小的问题。将两个元素映射到有序数列P，以上问题等价于\n\n记作\n\n由于数列PP是有序的，所以对任意的m > 1m>1，有\n\n对任意的m < -1m<−1，有\n\n所以m = 1m=1或m = - 1m=−1 。\n\n所以 l_il \ni\n​\t\n  和 l_jl \nj\n​\t\n  必定是有序数列上的相邻元素。则组对方式一定是 Q=[(p_1, p_2), (p_3, p_4), ... , (p_{n-1}, p_n) ]Q=[(p \n1\n​\t\n ,p \n2\n​\t\n ),(p \n3\n​\t\n ,p \n4\n​\t\n ),...,(p \nn−1\n​\t\n ,p \nn\n​\t\n )]，注意QQ可以是无序的。\n\n作者：xie-yue-san-xing\n链接：https://leetcode-cn.com/problems/two-sum/solution/minshu-dui-bi-shi-you-xu-shu-lie-shang-xiang-lin-y/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[699,699],[698,698]]],[1560146658470,["GJX@GJXAIOU",[[1,698,"# min(li​,lj​) 数对必是有序数列上相邻元素的证明"]],[698,698],[729,729]]],[1560146660918,["GJX@GJXAIOU",[[-1,698,"#"]],[699,699],[698,698]]],[1560146666797,["GJX@GJXAIOU",[[1,699,"$"],[-1,711," "],[1,712," "]],[699,699],[700,700]]],[1560146668589,["GJX@GJXAIOU",[[1,712,"$"]],[712,712],[713,713]]],[1560146678030,["GJX@GJXAIOU",[[1,745,"\n"]],[731,731],[732,732]]],[1560146695148,["GJX@GJXAIOU",[[1,732,"设原始数列为LL，记为 \n\n将LL排序，得到一个有序数列PP，记为 \n\n数列LL所有元素的和记为sumLsumL，对于给定的LL这是一个定值。\n目标问题记为一个最大化问题：\n\n\n证明：\n容易有  其中 \n得到\n\n\n得到\n\n目标最大化问题\n\n等价于\n\n等价于一个最小化问题\n\n\n作者：xie-yue-san-xing\n链接：https://leetcode-cn.com/problems/two-sum/solution/minshu-dui-bi-shi-you-xu-shu-lie-shang-xiang-lin-y/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[732,732],[1045,1045]]],[1560146697516,["GJX@GJXAIOU",[[-1,732,"设原始数列为LL，记为 \n\n将LL排序，得到一个有序数列PP，记为 \n\n数列LL所有元素的和记为sumLsumL，对于给定的LL这是一个定值。\n目标问题记为一个最大化问题：\n\n\n证明：\n容易有  其中 \n得到\n\n\n得到\n\n目标最大化问题\n\n等价于\n\n等价于一个最小化问题\n\n\n作者：xie-yue-san-xing\n链接：https://leetcode-cn.com/problems/two-sum/solution/minshu-dui-bi-shi-you-xu-shu-lie-shang-xiang-lin-y/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[1045,1045],[732,732]]],[1560146813197,["GJX@GJXAIOU",[[1,733,"![算法原理证明]($resource/%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%E8%AF%81%E6%98%8E.png)"]],[733,733],[813,813]]],[1560146905811,["GJX@GJXAIOU",[[1,18,"完成"]],[18,18],[20,20]]]],null,"GJX@GJXAIOU"],["3142fa1b-9093-40f4-856d-c940995f1f59",1561359469489,"---\ntags: \n- 简单\n- 完成\n- 数组\n\nflag: green\ndata: '2019-6-10'\n---\n\n\n\n\n# 561.数组拆分1\n\n\n## 一、题目\n\n给定长度为 2n 的数组, 你的任务是将这些数分成 n 对, 例如 (a1, b1), (a2, b2), ..., (an, bn) ，使得从1 到 n 的 min(ai, bi) 总和最大。\n\n示例 1:\n\n输入: [1,4,3,2]\n\n输出: 4\n解释: n 等于 2, 最大总和为 4 = min(1, 2) + min(3, 4).\n提示:\n\nn 是正整数,范围在 [1, 10000].\n数组中的元素范围在 [-10000, 10000].\n\n\n\n\n\n\n## 二、解答\n\n**自己算法：**\n```java\nclass Solution {\n    public int arrayPairSum(int[] nums) {\n        Arrays.sort(nums);\n        int sum = 0;\n        for (int i = 0; i < nums.length; i += 2 ) {\n           sum += nums[i];\n        }\n        return sum;\n    }\n}\n```\n\n执行用时 : 37 ms, 在Array Partition I的Java提交中击败了48.38% 的用户\n\n内存消耗 : 52 MB, 在Array Partition I的Java提交中击败了13.08% 的用户\n\n\n\n**原理证明：**\n\n $min(li​,lj​)$ 数对必是有序数列上相邻元素的证明\n\n\n![算法原理证明]($resource/%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%E8%AF%81%E6%98%8E.png)\n\n\n\n\n\n\n\n\n\n\n\n\n",[[1561359423527,["GJX@GJXAIOU",[[1,39,"\n"]],[38,38],[39,39]]],[1561359428126,["GJX@GJXAIOU",[[1,39,"style: summer"]],[39,39],[52,52]]],[1561359432006,["GJX@GJXAIOU",[[-1,81,"561.数组拆分1"]],[81,90],[81,81]]],[1561359433789,["GJX@GJXAIOU",[[1,81,"561.数组拆分1"]],[81,81],[81,90]]]],null,"GJX@GJXAIOU"]]}