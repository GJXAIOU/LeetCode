{"compress":true,"commitItems":[["7cf7fa57-1807-46cf-9c8d-e000fbdf6990",1560067450058,"",[[1560067407495,["GJX@GJXAIOU",[[1,0,"# 977.有序数组的平方\n\n\n\n"]],[0,0],[16,16]]],[1560067410079,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1560067410215,["GJX@GJXAIOU",[[1,0,"\n"]],[1,1],[2,2]]],[1560067435570,["GJX@GJXAIOU",[[1,0,"-"]],[0,0],[1,1]]],[1560067435728,["GJX@GJXAIOU",[[1,0,"-"]],[1,1],[2,2]]],[1560067435837,["GJX@GJXAIOU",[[1,2,"-"]],[2,2],[3,3]]],[1560067435860,["GJX@GJXAIOU",[[1,5,"---\n\n\n"]],[3,3],[4,4]]],[1560067440904,["GJX@GJXAIOU",[[1,4,"tags: "]],[4,4],[10,10]]],[1560067441951,["GJX@GJXAIOU",[[1,11,"\n"]],[10,10],[11,11]]],[1560067447950,["GJX@GJXAIOU",[[1,11,"- jianda"]],[11,11],[19,19]]],[1560067448877,["GJX@GJXAIOU",[[-1,13,"jianda"]],[19,19],[13,13]]],[1560067451474,["GJX@GJXAIOU",[[1,13,"简单"]],[13,13],[15,15]]],[1560067451772,["GJX@GJXAIOU",[[1,16,"\n"]],[15,15],[16,16]]],[1560067452895,["GJX@GJXAIOU",[[1,16,"- "]],[16,16],[18,18]]],[1560067453545,["GJX@GJXAIOU",[[1,19,"\n"]],[18,18],[19,19]]],[1560067459711,["GJX@GJXAIOU",[[1,19,"- 数组"]],[19,19],[23,23]]],[1560067460069,["GJX@GJXAIOU",[[1,24,"\n"]],[23,23],[24,24]]],[1560067461069,["GJX@GJXAIOU",[[1,25,"\n"]],[24,24],[25,25]]],[1560067467656,["GJX@GJXAIOU",[[1,25,"- 双指针"]],[25,25],[30,30]]],[1560067471148,["GJX@GJXAIOU",[[1,31,"\n"]],[30,30],[31,31]]],[1560067480438,["GJX@GJXAIOU",[[1,31,"flag: green"]],[31,31],[42,42]]],[1560067481061,["GJX@GJXAIOU",[[1,43,"\n"]],[42,42],[43,43]]],[1560067482829,["GJX@GJXAIOU",[[1,43,"fat"]],[43,43],[46,46]]],[1560067483576,["GJX@GJXAIOU",[[-1,43,"fat"]],[46,46],[43,43]]],[1560067484022,["GJX@GJXAIOU",[[1,43,"fda"]],[43,43],[46,46]]],[1560067484751,["GJX@GJXAIOU",[[-1,43,"fda"]],[46,46],[43,43]]],[1560067485424,["GJX@GJXAIOU",[[1,43,"data"]],[43,43],[47,47]]],[1560067486607,["GJX@GJXAIOU",[[-1,46,"a"]],[47,47],[46,46]]],[1560067493704,["GJX@GJXAIOU",[[1,46,"e: '2019-9-"]],[46,46],[57,57]]],[1560067495914,["GJX@GJXAIOU",[[-1,55,"9-"]],[57,57],[55,55]]],[1560067497529,["GJX@GJXAIOU",[[1,55,"6"]],[55,55],[56,56]]],[1560067497751,["GJX@GJXAIOU",[[-1,55,"6"]],[56,56],[55,55]]],[1560067500645,["GJX@GJXAIOU",[[1,55,"4"]],[55,55],[56,56]]],[1560067501767,["GJX@GJXAIOU",[[-1,55,"4"]],[56,56],[55,55]]],[1560067504197,["GJX@GJXAIOU",[[1,55,"6-9'"]],[55,55],[59,59]]],[1560067536637,["GJX@GJXAIOU",[[1,81,"## yi "]],[81,81],[87,87]]],[1560067537224,["GJX@GJXAIOU",[[-1,84,"yi "]],[87,87],[84,84]]],[1560067540107,["GJX@GJXAIOU",[[1,84,"一、题目：“"]],[84,84],[90,90]]],[1560067540579,["GJX@GJXAIOU",[[-1,89,"“"]],[90,90],[89,89]]],[1560067541181,["GJX@GJXAIOU",[[1,91,"\n"]],[89,89],[90,90]]],[1560067542176,["GJX@GJXAIOU",[[1,92,"\n"]],[90,90],[91,91]]],[1560067543248,["GJX@GJXAIOU",[[1,91,"给定一个按非递减顺序排序的整数数组 A，返回每个数字的平方组成的新数组，要求也按非递减顺序排序。\n\n \n\n示例 1：\n\n输入：[-4,-1,0,3,10]\n输出：[0,1,9,16,100]\n示例 2：\n\n输入：[-7,-3,2,3,11]\n输出：[4,9,9,49,121]\n \n\n提示：\n\n1 <= A.length <= 10000\n-10000 <= A[i] <= 10000\nA 已按非递减顺序排序。\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/squares-of-a-sorted-array\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。"]],[91,91],[411,411]]],[1560067551590,["GJX@GJXAIOU",[[1,96,"**"],[1,103,"**"]],[96,103],[96,107]]],[1560067606039,["GJX@GJXAIOU",[[-1,303,"来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/squares-of-a-sorted-array\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\n"]],[302,415],[302,302]]],[1560070423616,["GJX@GJXAIOU",[[1,304,"\n"]],[303,303],[304,304]]],[1560070423751,["GJX@GJXAIOU",[[1,305,"\n"]],[304,304],[305,305]]],[1560070424567,["GJX@GJXAIOU",[[1,305,"## "]],[305,305],[308,308]]],[1560070427901,["GJX@GJXAIOU",[[-1,145," "],[1,146," "],[-1,234," "],[1,235," "],[-1,290," "],[1,291," "],[1,308,"二、解答"]],[308,308],[312,312]]],[1560070428242,["GJX@GJXAIOU",[[1,313,"\n"]],[312,312],[313,313]]],[1560070428945,["GJX@GJXAIOU",[[1,314,"\n"]],[313,313],[314,314]]],[1560070429680,["GJX@GJXAIOU",[[1,314,"class Solution {\n    public int[] sortedSquares(int[] A) {\n        int j = 0;\n        int []ans = new int[A.length];\n        //这里尽量使用while，因为不确定小于0的个数，也就是循环的次数\n        // for (int j = 0; j < A.length; j++) {\n        //      if (A[j] < 0  ) {\n        //          j++;\n        //      }\n\n        while(j < A.length && A[j] < 0){\n            j++;\n        }\n\n        int i = j - 1;\n        int t = 0;\n\n        while(i >= 0 && j < A.length){\n            if (A[i]*A[i] < A[j]*A[j]) {\n                ans[t++] = A[i]*A[i];\n                i--;\n            }else{\n                ans[t++] = A[j]*A[j];\n                j++;           \n          }\n        }\n\n        while(i >= 0){\n            ans[t++] = A[i]*A[i];\n            i--;\n        }\n\n        while(j < A.length){\n            ans[t++] = A[j]*A[j];\n            j++;\n        }\n       return ans;\n    }\n}"]],[314,314],[1164,1164]]],[1560070436271,["GJX@GJXAIOU",[[1,313,"    "]],[313,313],[317,317]]],[1560070438138,["GJX@GJXAIOU",[[-1,313,"    "]],[317,317],[313,313]]],[1560070439062,["GJX@GJXAIOU",[[1,314,"\n"]],[313,313],[314,314]]],[1560070439818,["GJX@GJXAIOU",[[1,314,"···"]],[314,314],[317,317]]],[1560070440756,["GJX@GJXAIOU",[[-1,314,"···"]],[317,317],[314,314]]],[1560070441273,["GJX@GJXAIOU",[[-1,314,"\n"]],[314,314],[313,313]]],[1560070442216,["GJX@GJXAIOU",[[1,314,"\n"]],[313,313],[314,314]]],[1560070443186,["GJX@GJXAIOU",[[1,314,"```"]],[314,314],[317,317]]],[1560070443210,["GJX@GJXAIOU",[[1,317,"language\n```\n"]],[317,317],[317,325]]],[1560070444216,["GJX@GJXAIOU",[[-1,317,"language"],[1,325,"j"]],[317,325],[318,318]]],[1560070444657,["GJX@GJXAIOU",[[1,318,"ava"]],[318,318],[321,321]]],[1560070445033,["GJX@GJXAIOU",[[1,322,"\n"]],[321,321],[322,322]]],[1560070447663,["GJX@GJXAIOU",[[-1,323,"```"]],[323,326],[323,323]]],[1560070450630,["GJX@GJXAIOU",[[1,1176,"\n"]],[1175,1175],[1176,1176]]],[1560070451059,["GJX@GJXAIOU",[[1,1176,"```"]],[1176,1176],[1179,1179]]],[1560070455346,["GJX@GJXAIOU",[[-1,324,"\n"]],[324,324],[323,323]]],[1560070455462,["GJX@GJXAIOU",[[-1,323,"\n"]],[323,323],[322,322]]],[1560070456186,["GJX@GJXAIOU",[[-1,322,"\n"]],[322,322],[321,321]]],[1560070458324,["GJX@GJXAIOU",[[1,314,"\n"]],[313,313],[314,314]]],[1560070458468,["GJX@GJXAIOU",[[1,315,"\n"]],[314,314],[315,315]]],[1560070458593,["GJX@GJXAIOU",[[1,316,"\n"]],[315,315],[316,316]]],[1560070458694,["GJX@GJXAIOU",[[1,317,"\n"]],[316,316],[317,317]]],[1560070458818,["GJX@GJXAIOU",[[1,318,"\n"]],[317,317],[318,318]]],[1560070459334,["GJX@GJXAIOU",[[1,319,"\n"]],[318,318],[319,319]]],[1560070459354,["GJX@GJXAIOU",[[1,320,"\n"]],[319,319],[320,320]]],[1560070459385,["GJX@GJXAIOU",[[1,321,"\n"]],[320,320],[321,321]]],[1560070459421,["GJX@GJXAIOU",[[1,322,"\n"]],[321,321],[322,322]]],[1560070459452,["GJX@GJXAIOU",[[1,323,"\n"]],[322,322],[323,323]]],[1560070459486,["GJX@GJXAIOU",[[1,324,"\n"]],[323,323],[324,324]]],[1560070459518,["GJX@GJXAIOU",[[1,325,"\n"]],[324,324],[325,325]]],[1560070459551,["GJX@GJXAIOU",[[1,326,"\n"]],[325,325],[326,326]]],[1560070459585,["GJX@GJXAIOU",[[1,327,"\n"]],[326,326],[327,327]]],[1560070459617,["GJX@GJXAIOU",[[1,328,"\n"]],[327,327],[328,328]]],[1560070459653,["GJX@GJXAIOU",[[1,329,"\n"]],[328,328],[329,329]]],[1560070459685,["GJX@GJXAIOU",[[1,330,"\n"]],[329,329],[330,330]]],[1560070459718,["GJX@GJXAIOU",[[1,331,"\n"]],[330,330],[331,331]]],[1560070480833,["GJX@GJXAIOU",[[1,315,"方法一：排序\n思路与算法\n\n创建一个新的数组，它每个元素是给定数组对应位置元素的平方，然后排序这个数组。\n\nJavaPython\nclass Solution {\n    public int[] sortedSquares(int[] A) {\n        int N = A.length;\n        int[] ans = new int[N];\n        for (int i = 0; i < N; ++i)\n            ans[i] = A[i] * A[i];\n\n        Arrays.sort(ans);\n        return ans;\n    }\n}\n复杂度分析\n\n时间复杂度：O(N \\log N)O(NlogN)，其中 NN 是数组 A 的长度。\n\n空间复杂度：O(N)O(N)。\n\n方法二：双指针\n思路\n\n因为数组 A 已经排好序了， 所以可以说数组中的负数已经按照平方值降序排好了，数组中的非负数已经按照平方值升序排好了。\n\n举一个例子，若给定数组为 [-3, -2, -1, 4, 5, 6]，数组中负数部分 [-3, -2, -1] 的平方为 [9, 4, 1]，数组中非负部分 [4, 5, 6] 的平方为 [16, 25, 36]。我们的策略就是从前向后遍历数组中的非负数部分，并且反向遍历数组中的负数部分。\n\n算法\n\n我们可以使用两个指针分别读取数组的非负部分与负数部分 —— 指针 i 反向读取负数部分，指针 j 正向读取非负数部分。\n\n那么，现在我们就在使用两个指针分别读取两个递增的数组了（按元素的平方排序）。接下来，我们可以使用双指针的技巧合并这两个数组。\n\nJavaPython\nclass Solution {\n    public int[] sortedSquares(int[] A) {\n        int N = A.length;\n        int j = 0;\n        while (j < N && A[j] < 0)\n            j++;\n        int i = j-1;\n\n        int[] ans = new int[N];\n        int t = 0;\n\n        while (i >= 0 && j < N) {\n            if (A[i] * A[i] < A[j] * A[j]) {\n                ans[t++] = A[i] * A[i];\n                i--;\n            } else {\n                ans[t++] = A[j] * A[j];\n                j++;\n            }\n        }\n\n        while (i >= 0) {\n            ans[t++] = A[i] * A[i];\n            i--;\n        }\n        while (j < N) {\n            ans[t++] = A[j] * A[j];\n            j++;\n        }\n\n        return ans;\n    }\n}\n复杂度分析\n\n时间复杂度：O(N)O(N)，其中 NN 是数组 A 的长度。\n空间复杂度：O(N)O(N)。\n\n作者：LeetCode\n链接：https://leetcode-cn.com/problems/two-sum/solution/you-xu-shu-zu-de-ping-fang-by-leetcode/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[315,315],[1941,1941]]],[1560070483228,["GJX@GJXAIOU",[[1,315,"**"],[1,321,"**"]],[315,321],[315,325]]],[1560070495331,["GJX@GJXAIOU",[[1,326,"**"],[1,331,"**"]],[326,331],[326,335]]],[1560070499080,["GJX@GJXAIOU",[[1,377,"`"],[1,387,"`"]],[377,387],[377,389]]],[1560070499259,["GJX@GJXAIOU",[[-1,377,"`"],[-1,388,"`"]],[377,389],[377,387]]],[1560070499793,["GJX@GJXAIOU",[[1,377,"`"],[1,387,"`"]],[377,387],[377,389]]],[1560070500786,["GJX@GJXAIOU",[[-1,377,"`JavaPython`"]],[377,389],[377,377]]],[1560070502553,["GJX@GJXAIOU",[[1,377,"```java"]],[377,377],[384,384]]],[1560070505129,["GJX@GJXAIOU",[[1,627,"\n"]],[626,626],[627,627]]],[1560070505856,["GJX@GJXAIOU",[[1,627,"```"]],[627,627],[630,630]]],[1560070508218,["GJX@GJXAIOU",[[1,631,"**"],[1,636,"**"]],[631,636],[631,640]]],[1560070509417,["GJX@GJXAIOU",[[1,631,"\n"]],[630,630],[631,631]]],[1560070512240,["GJX@GJXAIOU",[[1,643,"- "]],[643,643],[645,645]]],[1560070514864,["GJX@GJXAIOU",[[1,689,"- "]],[689,689],[691,691]]],[1560070519985,["GJX@GJXAIOU",[[-1,662,"O(NlogN)"],[1,670,"$"]],[662,670],[663,663]]],[1560070523535,["GJX@GJXAIOU",[[1,651,"$"]],[651,651],[652,652]]],[1560070526480,["GJX@GJXAIOU",[[1,691,"$"]],[691,691],[692,692]]],[1560070527272,["GJX@GJXAIOU",[[1,696,"$"]],[696,696],[697,697]]],[1560070530302,["GJX@GJXAIOU",[[-1,697,"O(N)"]],[697,701],[697,697]]],[1560070532832,["GJX@GJXAIOU",[[-1,669,"N"]],[670,670],[669,669]]],[1560070535743,["GJX@GJXAIOU",[[1,699,"**"],[1,706,"**"]],[699,706],[699,710]]],[1560070537335,["GJX@GJXAIOU",[[1,711,"**"],[1,713,"**"]],[711,713],[711,717]]],[1560070547135,["GJX@GJXAIOU",[[1,927,"**"],[1,929,"**"]],[927,929],[927,933]]],[1560070554306,["GJX@GJXAIOU",[[1,1060,"···"]],[1060,1060],[1063,1063]]],[1560070555707,["GJX@GJXAIOU",[[-1,1060,"···"]],[1063,1063],[1060,1060]]],[1560070556897,["GJX@GJXAIOU",[[1,1060,"```"]],[1060,1060],[1063,1063]]],[1560070559165,["GJX@GJXAIOU",[[-1,1067,"Python"]],[1067,1073],[1067,1067]]],[1560070562967,["GJX@GJXAIOU",[[1,1748,"\n"]],[1747,1747],[1748,1748]]],[1560070563696,["GJX@GJXAIOU",[[1,1748,"```"]],[1748,1748],[1751,1751]]],[1560070565546,["GJX@GJXAIOU",[[1,1752,"**"],[1,1757,"**"]],[1752,1757],[1752,1761]]],[1560070568441,["GJX@GJXAIOU",[[1,1763,"- "]],[1763,1763],[1765,1765]]],[1560070571751,["GJX@GJXAIOU",[[-1,1775,"O(N)"]],[1779,1779],[1775,1775]]],[1560070574236,["GJX@GJXAIOU",[[-1,1780,"N"]],[1780,1780],[1779,1779]]],[1560070576815,["GJX@GJXAIOU",[[-1,1799,"(N)O"]],[1802,1802],[1798,1798]]],[1560070579216,["GJX@GJXAIOU",[[1,1792,"- "]],[1792,1792],[1794,1794]]],[1560070581344,["GJX@GJXAIOU",[[-1,1807,"作者：LeetCode\n链接：https://leetcode-cn.com/problems/two-sum/solution/you-xu-shu-zu-de-ping-fang-by-leetcode/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n"]],[1806,1962],[1806,1806]]],[1560070584889,["GJX@GJXAIOU",[[-1,1822,"\n"]],[1821,1821],[1820,1820]]],[1560070585071,["GJX@GJXAIOU",[[-1,1821,"\n"]],[1820,1820],[1819,1819]]],[1560070585256,["GJX@GJXAIOU",[[-1,1820,"\n"]],[1819,1819],[1818,1818]]],[1560070585439,["GJX@GJXAIOU",[[-1,1819,"\n"]],[1818,1818],[1817,1817]]],[1560070585631,["GJX@GJXAIOU",[[-1,1818,"\n"]],[1817,1817],[1816,1816]]],[1560070585857,["GJX@GJXAIOU",[[-1,1817,"\n"]],[1816,1816],[1815,1815]]],[1560070586094,["GJX@GJXAIOU",[[-1,1816,"\n"]],[1815,1815],[1814,1814]]],[1560070586281,["GJX@GJXAIOU",[[-1,1815,"\n"]],[1814,1814],[1813,1813]]],[1560070586454,["GJX@GJXAIOU",[[-1,1814,"\n"]],[1813,1813],[1812,1812]]],[1560070586643,["GJX@GJXAIOU",[[-1,1813,"\n"]],[1812,1812],[1811,1811]]],[1560070586889,["GJX@GJXAIOU",[[-1,1812,"\n"]],[1811,1811],[1810,1810]]],[1560070589042,["GJX@GJXAIOU",[[1,1810,"- ziji "]],[1810,1810],[1817,1817]]],[1560070589927,["GJX@GJXAIOU",[[-1,1812,"ziji "]],[1817,1817],[1812,1812]]],[1560070592852,["GJX@GJXAIOU",[[1,1812,"自己代码"]],[1812,1812],[1816,1816]]],[1560070595656,["GJX@GJXAIOU",[[-1,1810,"-"]],[1810,1811],[1810,1810]]],[1560070599380,["GJX@GJXAIOU",[[1,1814,"****"]],[1814,1814],[1816,1816]]],[1560070601426,["GJX@GJXAIOU",[[-1,1814,"****"]],[1814,1818],[1814,1814]]],[1560070603647,["GJX@GJXAIOU",[[1,1813,"****"]],[1813,1813],[1815,1815]]],[1560070605604,["GJX@GJXAIOU",[[-1,1813,"****"]],[1815,1815],[1813,1813]]],[1560070607986,["GJX@GJXAIOU",[[1,1811,"**"],[1,1815,"**"]],[1811,1815],[1811,1819]]],[1560070615354,["GJX@GJXAIOU",[[1,18,"参考"]],[18,18],[20,20]]]],null,"GJX@GJXAIOU"],["3aa393b3-830a-4cf1-b51c-2dcb4a4f7f17",1561359654847,"---\ntags: \n- 简单\n- 参考\n- 数组\n\n- 双指针\nflag: green\ndate: '2019-6-9'\n---\n\n\n# 977.有序数组的平方\n\n## 一、题目：\n\n给定一个按**非递减顺序排序**的整数数组 A，返回每个数字的平方组成的新数组，要求也按非递减顺序排序。\n\n \n\n示例 1：\n\n输入：[-4,-1,0,3,10]\n输出：[0,1,9,16,100]\n示例 2：\n\n输入：[-7,-3,2,3,11]\n输出：[4,9,9,49,121]\n \n\n提示：\n\n1 <= A.length <= 10000\n-10000 <= A[i] <= 10000\nA 已按非递减顺序排序。\n\n\n\n## 二、解答\n\n\n**方法一：排序**\n**思路与算法**\n\n创建一个新的数组，它每个元素是给定数组对应位置元素的平方，然后排序这个数组。\n\n```java\nclass Solution {\n    public int[] sortedSquares(int[] A) {\n        int N = A.length;\n        int[] ans = new int[N];\n        for (int i = 0; i < N; ++i)\n            ans[i] = A[i] * A[i];\n\n        Arrays.sort(ans);\n        return ans;\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N \\log N)$，其中 N 是数组 A 的长度。\n\n- 空间复杂度：$O(N)$。\n\n**方法二：双指针**\n**思路**\n\n因为数组 A 已经排好序了， 所以可以说数组中的负数已经按照平方值降序排好了，数组中的非负数已经按照平方值升序排好了。\n\n举一个例子，若给定数组为 [-3, -2, -1, 4, 5, 6]，数组中负数部分 [-3, -2, -1] 的平方为 [9, 4, 1]，数组中非负部分 [4, 5, 6] 的平方为 [16, 25, 36]。我们的策略就是从前向后遍历数组中的非负数部分，并且反向遍历数组中的负数部分。\n\n**算法**\n\n我们可以使用两个指针分别读取数组的非负部分与负数部分 —— 指针 i 反向读取负数部分，指针 j 正向读取非负数部分。\n\n那么，现在我们就在使用两个指针分别读取两个递增的数组了（按元素的平方排序）。接下来，我们可以使用双指针的技巧合并这两个数组。\n\n```Java\nclass Solution {\n    public int[] sortedSquares(int[] A) {\n        int N = A.length;\n        int j = 0;\n        while (j < N && A[j] < 0)\n            j++;\n        int i = j-1;\n\n        int[] ans = new int[N];\n        int t = 0;\n\n        while (i >= 0 && j < N) {\n            if (A[i] * A[i] < A[j] * A[j]) {\n                ans[t++] = A[i] * A[i];\n                i--;\n            } else {\n                ans[t++] = A[j] * A[j];\n                j++;\n            }\n        }\n\n        while (i >= 0) {\n            ans[t++] = A[i] * A[i];\n            i--;\n        }\n        while (j < N) {\n            ans[t++] = A[j] * A[j];\n            j++;\n        }\n\n        return ans;\n    }\n}\n```\n**复杂度分析**\n\n- 时间复杂度：O(N)，其中 N 是数组 A 的长度。\n- 空间复杂度：O(N)。\n\n\n\n\n **自己代码**\n\n```java\nclass Solution {\n    public int[] sortedSquares(int[] A) {\n        int j = 0;\n        int []ans = new int[A.length];\n        //这里尽量使用while，因为不确定小于0的个数，也就是循环的次数\n        // for (int j = 0; j < A.length; j++) {\n        //      if (A[j] < 0  ) {\n        //          j++;\n        //      }\n\n        while(j < A.length && A[j] < 0){\n            j++;\n        }\n\n        int i = j - 1;\n        int t = 0;\n\n        while(i >= 0 && j < A.length){\n            if (A[i]*A[i] < A[j]*A[j]) {\n                ans[t++] = A[i]*A[i];\n                i--;\n            }else{\n                ans[t++] = A[j]*A[j];\n                j++;           \n          }\n        }\n\n        while(i >= 0){\n            ans[t++] = A[i]*A[i];\n            i--;\n        }\n\n        while(j < A.length){\n            ans[t++] = A[j]*A[j];\n            j++;\n        }\n       return ans;\n    }\n}\n```\n",[[1561359650326,["GJX@GJXAIOU",[[1,45,"\n"]],[44,44],[45,45]]],[1561359651631,["GJX@GJXAIOU",[[1,45,"sy"]],[45,45],[47,47]]],[1561359653391,["GJX@GJXAIOU",[[-1,46,"y"]],[47,47],[46,46]]],[1561359654777,["GJX@GJXAIOU",[[1,46,"tyle"]],[46,46],[50,50]]],[1561359657376,["GJX@GJXAIOU",[[1,50,": summer"]],[50,50],[58,58]]],[1561359659894,["GJX@GJXAIOU",[[-1,26,"\n"]],[26,26],[25,25]]]],null,"GJX@GJXAIOU"]]}