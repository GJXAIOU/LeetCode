{"compress":true,"commitItems":[["b163ec43-5048-4e51-99b4-abc0eaf4b642",1561439919715,"",[[1561439892398,["GJX@GJXAIOU",[[1,0,"# 88.合并两个有序数组\n\n\n\n"]],[0,0],[16,16]]],[1561439898112,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1561439898248,["GJX@GJXAIOU",[[1,0,"\n"]],[1,1],[2,2]]],[1561439898372,["GJX@GJXAIOU",[[1,2,"\n"]],[2,2],[3,3]]],[1561439898518,["GJX@GJXAIOU",[[1,3,"\n"]],[3,3],[4,4]]],[1561439900426,["GJX@GJXAIOU",[[1,0,"-"]],[0,0],[1,1]]],[1561439900554,["GJX@GJXAIOU",[[1,0,"-"]],[1,1],[2,2]]],[1561439900715,["GJX@GJXAIOU",[[1,2,"-"]],[2,2],[3,3]]],[1561439900737,["GJX@GJXAIOU",[[1,5,"---\n\n\n"]],[3,3],[4,4]]],[1561439903627,["GJX@GJXAIOU",[[1,4,"tags "]],[4,4],[9,9]]],[1561439904200,["GJX@GJXAIOU",[[-1,8," "]],[9,9],[8,8]]],[1561439904905,["GJX@GJXAIOU",[[1,8,": "]],[8,8],[10,10]]],[1561439906456,["GJX@GJXAIOU",[[1,11,"\n"]],[10,10],[11,11]]],[1561439907225,["GJX@GJXAIOU",[[1,11,"- j"]],[11,11],[14,14]]],[1561439907710,["GJX@GJXAIOU",[[-1,13,"j"]],[14,14],[13,13]]],[1561439908923,["GJX@GJXAIOU",[[1,13,"简单"]],[13,13],[15,15]]],[1561439909216,["GJX@GJXAIOU",[[1,16,"\n"]],[15,15],[16,16]]],[1561439909937,["GJX@GJXAIOU",[[1,16,"- "]],[16,16],[18,18]]],[1561439911008,["GJX@GJXAIOU",[[1,19,"\n"]],[18,18],[19,19]]],[1561439912418,["GJX@GJXAIOU",[[1,19,"- sh"]],[19,19],[23,23]]],[1561439913767,["GJX@GJXAIOU",[[-1,21,"sh"]],[23,23],[21,21]]],[1561439915123,["GJX@GJXAIOU",[[1,21,"数组"]],[21,21],[23,23]]],[1561439915501,["GJX@GJXAIOU",[[1,24,"\n"]],[23,23],[24,24]]],[1561439915679,["GJX@GJXAIOU",[[1,25,"\n"]],[24,24],[25,25]]],[1561439919145,["GJX@GJXAIOU",[[1,25,"fl"]],[25,25],[27,27]]],[1561439923457,["GJX@GJXAIOU",[[1,27,"ag: sumer"]],[27,27],[36,36]]],[1561439925794,["GJX@GJXAIOU",[[-1,31,"sumer"]],[36,36],[31,31]]],[1561439927258,["GJX@GJXAIOU",[[1,31,"green"]],[31,31],[36,36]]],[1561439927706,["GJX@GJXAIOU",[[1,37,"\n"]],[36,36],[37,37]]],[1561439930257,["GJX@GJXAIOU",[[1,37,"styel"]],[37,37],[42,42]]],[1561439931106,["GJX@GJXAIOU",[[-1,40,"el"]],[42,42],[40,40]]],[1561439934505,["GJX@GJXAIOU",[[1,40,"le: summer"]],[40,40],[50,50]]],[1561439934856,["GJX@GJXAIOU",[[1,51,"\n"]],[50,50],[51,51]]],[1561439945219,["GJX@GJXAIOU",[[1,51,"date: '2019-6-25'"]],[51,51],[68,68]]],[1561439951829,["GJX@GJXAIOU",[[-1,76,"\n"]],[76,76],[75,75]]],[1561439951934,["GJX@GJXAIOU",[[-1,75,"\n"]],[75,75],[74,74]]],[1561439962624,["GJX@GJXAIOU",[[1,90,"给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。\n\n说明:\n\n初始化 nums1 和 nums2 的元素数量分别为 m 和 n。\n你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。\n示例:\n\n输入:\nnums1 = [1,2,3,0,0,0], m = 3\nnums2 = [2,5,6],       n = 3\n\n输出: [1,2,2,3,5,6]\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/merge-sorted-array\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。"]],[90,90],[436,436]]],[1561439967800,["GJX@GJXAIOU",[[1,90,"\n"]],[89,89],[90,90]]],[1561439967933,["GJX@GJXAIOU",[[1,91,"\n"]],[90,90],[91,91]]],[1561439968651,["GJX@GJXAIOU",[[1,91,"## "]],[91,91],[94,94]]],[1561439970161,["GJX@GJXAIOU",[[1,94,"y"],[-1,105," "],[1,106," "],[-1,131," "],[1,132," "],[-1,137," "],[1,138," "],[-1,142," "],[1,143," "],[-1,167," "],[1,168," "],[-1,190," "],[1,191," "],[-1,203," "],[1,204," "],[-1,209," "],[1,210," "],[-1,226," "],[1,227," "],[-1,320," "],[1,321," "]],[94,94],[95,95]]],[1561439970272,["GJX@GJXAIOU",[[1,95,"i"]],[95,95],[96,96]]],[1561439970964,["GJX@GJXAIOU",[[-1,94,"yi"]],[96,96],[94,94]]],[1561439973276,["GJX@GJXAIOU",[[1,94,"一、题目"]],[94,94],[98,98]]],[1561439973561,["GJX@GJXAIOU",[[1,99,"\n"]],[98,98],[99,99]]],[1561439977074,["GJX@GJXAIOU",[[1,448,"\n"]],[446,446],[447,447]]],[1561439977199,["GJX@GJXAIOU",[[1,449,"\n"]],[447,447],[448,448]]],[1561439977340,["GJX@GJXAIOU",[[1,450,"\n"]],[448,448],[449,449]]],[1561439979376,["GJX@GJXAIOU",[[1,449,"## "]],[449,449],[452,452]]],[1561439985306,["GJX@GJXAIOU",[[1,452,"二、解答"]],[452,452],[456,456]]],[1561439985885,["GJX@GJXAIOU",[[1,458,"\n"]],[456,456],[457,457]]],[1561439986048,["GJX@GJXAIOU",[[1,459,"\n"]],[457,457],[458,458]]],[1561440029232,["GJX@GJXAIOU",[[1,104,"**"],[1,108,"**"]],[104,108],[104,112]]],[1561440044662,["GJX@GJXAIOU",[[1,258,"\n"]],[258,258],[259,259]]],[1561440045232,["GJX@GJXAIOU",[[1,259,"- "]],[259,259],[261,261]]],[1561440046675,["GJX@GJXAIOU",[[-1,265,"\n"]],[265,265],[264,264]]],[1561440048673,["GJX@GJXAIOU",[[-1,172,"\n"]],[172,172],[171,171]]],[1561440051464,["GJX@GJXAIOU",[[1,168,"- "]],[168,168],[170,170]]],[1561440054330,["GJX@GJXAIOU",[[-1,328,"\n"]],[328,328],[327,327]]],[1561445970991,["GJX@GJXAIOU",[[1,466,"\n"]],[463,463],[464,464]]],[1561446005365,["GJX@GJXAIOU",[[1,464,"- 官方解法："]],[464,464],[471,471]]],[1561446005629,["GJX@GJXAIOU",[[1,472,"- \n"]],[471,471],[474,474]]],[1561446006089,["GJX@GJXAIOU",[[-1,472,"- "]],[474,474],[472,472]]],[1561446006747,["GJX@GJXAIOU",[[1,475,"\n"]],[472,472],[473,473]]],[1561446007355,["GJX@GJXAIOU",[[1,473,"方法一 : 合并后排序\n直觉\n\n最朴素的解法就是将两个数组合并之后再排序。该算法只需要一行(Java是2行)，时间复杂度较差，为O((n + m)\\log(n + m))O((n+m)log(n+m))。这是由于这种方法没有利用两个数组本身已经有序这一点。\n\n实现\n\nJavaPython\nclass Solution {\n  public void merge(int[] nums1, int m, int[] nums2, int n) {\n    System.arraycopy(nums2, 0, nums1, m, n);\n    Arrays.sort(nums1);\n  }\n}\n复杂度分析\n\n时间复杂度 : O((n + m)\\log(n + m))O((n+m)log(n+m))。\n空间复杂度 : O(1)O(1)。 \n\n方法二 : 双指针 / 从前往后\n直觉\n\n一般而言，对于有序数组可以通过 双指针法 达到O(n + m)O(n+m)的时间复杂度。\n\n最直接的算法实现是将指针p1 置为 nums1的开头， p2为 nums2的开头，在每一步将最小值放入输出数组中。\n\n由于 nums1 是用于输出的数组，需要将nums1中的前m个元素放在其他地方，也就需要 O(m)O(m) 的空间复杂度。\n\n\n\n实现\n\nJavaPython\nclass Solution {\n  public void merge(int[] nums1, int m, int[] nums2, int n) {\n    // Make a copy of nums1.\n    int [] nums1_copy = new int[m];\n    System.arraycopy(nums1, 0, nums1_copy, 0, m);\n\n    // Two get pointers for nums1_copy and nums2.\n    int p1 = 0;\n    int p2 = 0;\n\n    // Set pointer for nums1\n    int p = 0;\n\n    // Compare elements from nums1_copy and nums2\n    // and add the smallest one into nums1.\n    while ((p1 < m) && (p2 < n))\n      nums1[p++] = (nums1_copy[p1] < nums2[p2]) ? nums1_copy[p1++] : nums2[p2++];\n\n    // if there are still elements to add\n    if (p1 < m)\n      System.arraycopy(nums1_copy, p1, nums1, p1 + p2, m + n - p1 - p2);\n    if (p2 < n)\n      System.arraycopy(nums2, p2, nums1, p1 + p2, m + n - p1 - p2);\n  }\n}\n复杂度分析\n\n时间复杂度 : O(n + m)O(n+m)。\n空间复杂度 : O(m)O(m)。 \n\n方法三 : 双指针 / 从后往前\n直觉\n\n方法二已经取得了最优的时间复杂度O(n + m)O(n+m)，但需要使用额外空间。这是由于在从头改变nums1的值时，需要把nums1中的元素存放在其他位置。\n\n如果我们从结尾开始改写 nums1 的值又会如何呢？这里没有信息，因此不需要额外空间。\n\n这里的指针 p 用于追踪添加元素的位置。\n\n\n\n\n1 / 6\n实现\n\nJavaPython\nclass Solution {\n  public void merge(int[] nums1, int m, int[] nums2, int n) {\n    // two get pointers for nums1 and nums2\n    int p1 = m - 1;\n    int p2 = n - 1;\n    // set pointer for nums1\n    int p = m + n - 1;\n\n    // while there are still elements to compare\n    while ((p1 >= 0) && (p2 >= 0))\n      // compare two elements from nums1 and nums2 \n      // and add the largest one in nums1 \n      nums1[p--] = (nums1[p1] < nums2[p2]) ? nums2[p2--] : nums1[p1--];\n\n    // add missing elements from nums2\n    System.arraycopy(nums2, 0, nums1, 0, p2 + 1);\n  }\n}\n复杂度分析\n\n时间复杂度 : O(n + m)O(n+m)。\n空间复杂度 : O(1)O(1)。\n\n作者：LeetCode\n链接：https://leetcode-cn.com/problems/two-sum/solution/he-bing-liang-ge-you-xu-shu-zu-by-leetcode/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[473,473],[2822,2822]]],[1561446011280,["GJX@GJXAIOU",[[1,473,"**"],[1,484,"**"]],[473,484],[473,488]]],[1561446019224,["GJX@GJXAIOU",[[-1,489,"直觉"]],[491,491],[489,489]]],[1561446019684,["GJX@GJXAIOU",[[-1,490,"\n"]],[489,489],[488,488]]],[1561446032635,["GJX@GJXAIOU",[[-1,559,"O((n+mlog(n+m)))"]],[574,574],[559,559]]],[1561446034753,["GJX@GJXAIOU",[[1,559,"$"]],[559,559],[560,560]]],[1561446037624,["GJX@GJXAIOU",[[1,538,"$"]],[538,538],[539,539]]],[1561446043186,["GJX@GJXAIOU",[[1,594,"```"]],[594,594],[597,597]]],[1561446045499,["GJX@GJXAIOU",[[1,597,"language\n```\n```"]],[597,597],[613,613]]],[1561446045527,["GJX@GJXAIOU",[[1,613,"language\n```\n"]],[613,613],[613,621]]],[1561446048597,["GJX@GJXAIOU",[[-1,610,"```language"]],[610,621],[610,610]]],[1561446051738,["GJX@GJXAIOU",[[-1,606,"```\n\n```"]],[606,614],[606,606]]],[1561446054952,["GJX@GJXAIOU",[[-1,607,"JavaPython\n"]],[606,617],[606,606]]],[1561446055335,["GJX@GJXAIOU",[[-1,606,"\n"]],[606,606],[605,605]]],[1561446057458,["GJX@GJXAIOU",[[-1,597,"language"]],[605,605],[597,597]]],[1561446058969,["GJX@GJXAIOU",[[1,597,"Java"]],[597,597],[601,601]]],[1561446061800,["GJX@GJXAIOU",[[1,756,"\n"]],[755,755],[756,756]]],[1561446062939,["GJX@GJXAIOU",[[1,756,"```"]],[756,756],[759,759]]],[1561446064819,["GJX@GJXAIOU",[[1,760,"\n"]],[760,760],[761,761]]],[1561446065273,["GJX@GJXAIOU",[[1,761,"- "]],[761,761],[763,763]]],[1561446066832,["GJX@GJXAIOU",[[-1,769,"\n"]],[769,769],[768,768]]],[1561446072125,["GJX@GJXAIOU",[[1,769,"- "],[1,816,"- "]],[769,832],[771,836]]],[1561446075465,["GJX@GJXAIOU",[[-1,800,"O((n+m)log(n+m))"]],[800,816],[800,800]]],[1561446076841,["GJX@GJXAIOU",[[1,800,"$"]],[800,800],[801,801]]],[1561446079289,["GJX@GJXAIOU",[[1,779,"$"]],[779,779],[780,780]]],[1561446081369,["GJX@GJXAIOU",[[-1,818,"O(1)"]],[822,822],[818,818]]],[1561446087618,["GJX@GJXAIOU",[[-1,590,"实现"],[1,592,"B"]],[590,592],[591,591]]],[1561446088874,["GJX@GJXAIOU",[[-1,590,"B"]],[591,591],[590,590]]],[1561446090278,["GJX@GJXAIOU",[[1,590,"B****"]],[590,590],[593,593]]],[1561446091885,["GJX@GJXAIOU",[[-1,591,"****"]],[593,593],[591,591]]],[1561446092318,["GJX@GJXAIOU",[[1,590,"实现"],[-1,590,"B"]],[591,591],[590,592]]],[1561446093592,["GJX@GJXAIOU",[[1,590,"**"],[1,592,"**"]],[590,592],[590,596]]],[1561446111692,["GJX@GJXAIOU",[[1,826,"- "]],[826,826],[828,828]]],[1561446114785,["GJX@GJXAIOU",[[1,473,"- "]],[473,473],[475,475]]],[1561446124909,["GJX@GJXAIOU",[[-1,847,"直觉"]],[847,849],[847,847]]],[1561446129624,["GJX@GJXAIOU",[[-1,880,"O(n+m)"]],[886,886],[880,880]]],[1561446135402,["GJX@GJXAIOU",[[-1,997,"O(m) "]],[1002,1002],[997,997]]],[1561446140451,["GJX@GJXAIOU",[[1,1008,"**"],[1,1010,"**"]],[1008,1010],[1008,1014]]],[1561446141760,["GJX@GJXAIOU",[[-1,1007,"\n"]],[1006,1006],[1005,1005]]],[1561446141876,["GJX@GJXAIOU",[[-1,1006,"\n"]],[1005,1005],[1004,1004]]],[1561446146398,["GJX@GJXAIOU",[[-1,1018,"Python"]],[1018,1024],[1018,1018]]],[1561446151912,["GJX@GJXAIOU",[[1,1773,"\n"]],[1772,1772],[1773,1773]]],[1561446153257,["GJX@GJXAIOU",[[1,1773,"```"]],[1773,1773],[1776,1776]]],[1561446153283,["GJX@GJXAIOU",[[1,1776,"language\n```\n"]],[1776,1776],[1776,1784]]],[1561446155650,["GJX@GJXAIOU",[[-1,1776,"language"],[1,1784,"j"]],[1776,1784],[1777,1777]]],[1561446156065,["GJX@GJXAIOU",[[1,1777,"ava"]],[1777,1777],[1780,1780]]],[1561446158401,["GJX@GJXAIOU",[[-1,1773,"```java"]],[1773,1780],[1773,1773]]],[1561446161204,["GJX@GJXAIOU",[[-1,1014,"J"],[1,1015,"```j"]],[1014,1018],[1021,1021]]],[1561446165930,["GJX@GJXAIOU",[[1,1782,"- "]],[1782,1782],[1784,1784]]],[1561446167116,["GJX@GJXAIOU",[[-1,1790,"\n"]],[1790,1790],[1789,1789]]],[1561446170298,["GJX@GJXAIOU",[[1,1790,"- "]],[1790,1790],[1792,1792]]],[1561446172137,["GJX@GJXAIOU",[[1,1816,"- "]],[1816,1816],[1818,1818]]],[1561446173802,["GJX@GJXAIOU",[[1,1790,"  "]],[1791,1791],[1793,1793]]],[1561446174354,["GJX@GJXAIOU",[[1,1818,"  "]],[1820,1820],[1822,1822]]],[1561446176740,["GJX@GJXAIOU",[[-1,1803,"(n + m)O"]],[1810,1810],[1802,1802]]],[1561446181172,["GJX@GJXAIOU",[[-1,1823,"(m)O"]],[1826,1826],[1822,1822]]],[1561446183873,["GJX@GJXAIOU",[[1,1830,"- "]],[1830,1830],[1832,1832]]],[1561446185807,["GJX@GJXAIOU",[[-1,1849,"直觉"]],[1849,1851],[1849,1849]]],[1561446187497,["GJX@GJXAIOU",[[1,1830,"\n"]],[1829,1829],[1830,1830]]],[1561446187676,["GJX@GJXAIOU",[[1,1831,"\n"]],[1830,1830],[1831,1831]]],[1561446187873,["GJX@GJXAIOU",[[1,1832,"\n"]],[1831,1831],[1832,1832]]],[1561446193819,["GJX@GJXAIOU",[[1,1835,"**"],[1,1851,"**"]],[1835,1851],[1835,1855]]],[1561446210018,["GJX@GJXAIOU",[[1,1006,"\n"]],[1005,1005],[1006,1006]]],[1561446210141,["GJX@GJXAIOU",[[1,1007,"\n"]],[1006,1006],[1007,1007]]],[1561446210279,["GJX@GJXAIOU",[[1,1008,"\n"]],[1007,1007],[1008,1008]]],[1561446271877,["GJX@GJXAIOU",[[1,1007,"![方法二 双指针-从前往后]($resource/%E6%96%B9%E6%B3%95%E4%BA%8C%20%E5%8F%8C%E6%8C%87%E9%92%88-%E4%BB%8E%E5%89%8D%E5%BE%80%E5%90%8E.png)"]],[1007,1007],[1133,1133]]],[1561446319732,["GJX@GJXAIOU",[[-1,2010,"O(n+m)"]],[2010,2016],[2010,2010]]],[1561446334116,["GJX@GJXAIOU",[[-1,2131,"1 / 6"]],[2131,2136],[2131,2131]]],[1561446560168,["GJX@GJXAIOU",[[1,2128,"![方法三 双指针 - 从后往前]($resource/%E6%96%B9%E6%B3%95%E4%B8%89%20%E5%8F%8C%E6%8C%87%E9%92%88%20-%20%E4%BB%8E%E5%90%8E%E5%BE%80%E5%89%8D.gif)"]],[2128,2128],[2262,2262]]],[1561446564833,["GJX@GJXAIOU",[[1,2265,"**"],[1,2267,"**"]],[2265,2267],[2265,2271]]],[1561446566177,["GJX@GJXAIOU",[[-1,2264,"\n"]],[2264,2264],[2263,2263]]],[1561446566296,["GJX@GJXAIOU",[[-1,2263,"\n"]],[2263,2263],[2262,2262]]],[1561446570419,["GJX@GJXAIOU",[[1,2845,"\n"]],[2844,2844],[2845,2845]]],[1561446574091,["GJX@GJXAIOU",[[-1,2275,"Python"]],[2275,2281],[2275,2275]]],[1561446576668,["GJX@GJXAIOU",[[1,2271,"```"]],[2271,2271],[2274,2274]]],[1561446576696,["GJX@GJXAIOU",[[1,2274,"language\n```\n"]],[2274,2274],[2274,2282]]],[1561446578170,["GJX@GJXAIOU",[[-1,2274,"language"],[1,2282,"j"]],[2274,2282],[2275,2275]]],[1561446578609,["GJX@GJXAIOU",[[1,2275,"ava"]],[2275,2275],[2278,2278]]],[1561446581499,["GJX@GJXAIOU",[[-1,2279,"```"]],[2279,2282],[2279,2279]]],[1561446584113,["GJX@GJXAIOU",[[1,2848,"```"]],[2848,2848],[2851,2851]]],[1561446586944,["GJX@GJXAIOU",[[-1,2280,"Java\n"]],[2279,2284],[2279,2279]]],[1561446591186,["GJX@GJXAIOU",[[1,2847,"\n"]],[2847,2847],[2848,2848]]],[1561446591850,["GJX@GJXAIOU",[[1,2848,"- "]],[2848,2848],[2850,2850]]],[1561446593456,["GJX@GJXAIOU",[[-1,2856,"\n"]],[2856,2856],[2855,2855]]],[1561446598033,["GJX@GJXAIOU",[[1,2856,"- "],[1,2880,"- "]],[2856,2896],[2858,2900]]],[1561446599193,["GJX@GJXAIOU",[[1,2856,"  "],[1,2882,"  "]],[2858,2900],[2860,2904]]],[1561446602042,["GJX@GJXAIOU",[[-1,2869,"(n + m)O"]],[2876,2876],[2868,2868]]],[1561446605202,["GJX@GJXAIOU",[[-1,2889,"(1)O"]],[2892,2892],[2888,2888]]],[1561446609129,["GJX@GJXAIOU",[[1,3057,"\n"]],[3055,3055],[3056,3056]]],[1561446609265,["GJX@GJXAIOU",[[1,3058,"\n"]],[3056,3056],[3057,3057]]],[1561446609512,["GJX@GJXAIOU",[[1,3059,"\n"]],[3057,3057],[3058,3058]]],[1561446609642,["GJX@GJXAIOU",[[1,3060,"\n"]],[3058,3058],[3059,3059]]],[1561446611146,["GJX@GJXAIOU",[[1,3059,"- wose"]],[3059,3059],[3065,3065]]],[1561446611800,["GJX@GJXAIOU",[[-1,3061,"wose"]],[3065,3065],[3061,3061]]],[1561446614299,["GJX@GJXAIOU",[[1,3061,"我的，"]],[3061,3061],[3064,3064]]],[1561446615080,["GJX@GJXAIOU",[[-1,3063,"，"]],[3064,3064],[3063,3063]]],[1561446622583,["GJX@GJXAIOU",[[1,3063,"：有问题，但是不知道神"]],[3063,3063],[3074,3074]]],[1561446623251,["GJX@GJXAIOU",[[-1,3073,"神"]],[3074,3074],[3073,3073]]],[1561446625607,["GJX@GJXAIOU",[[1,3073,"什么鬼"]],[3073,3073],[3076,3076]]],[1561446663651,["GJX@GJXAIOU",[[-1,3077,"\n"],[1,3078,"`"]],[3077,3077],[3078,3078]]],[1561446664012,["GJX@GJXAIOU",[[1,3078,"``"]],[3078,3078],[3080,3080]]],[1561446664040,["GJX@GJXAIOU",[[1,3080,"language\n```\n"]],[3080,3080],[3080,3088]]],[1561446665340,["GJX@GJXAIOU",[[-1,3080,"language"],[1,3088,"j"]],[3080,3088],[3081,3081]]],[1561446665610,["GJX@GJXAIOU",[[1,3081,"av"]],[3081,3081],[3083,3083]]],[1561446665779,["GJX@GJXAIOU",[[1,3084,"\n"]],[3083,3083],[3084,3084]]],[1561446665803,["GJX@GJXAIOU",[[1,3084,"a"]],[3084,3084],[3085,3085]]],[1561446666561,["GJX@GJXAIOU",[[-1,3084,"a"]],[3085,3085],[3084,3084]]],[1561446666683,["GJX@GJXAIOU",[[-1,3084,"\n"]],[3084,3084],[3083,3083]]],[1561446667546,["GJX@GJXAIOU",[[1,3083,"a"]],[3083,3083],[3084,3084]]],[1561446667802,["GJX@GJXAIOU",[[1,3085,"\n"]],[3084,3084],[3085,3085]]],[1561446668920,["GJX@GJXAIOU",[[1,3085,"//合并两个有序数组，数组nums2放置如nums1中\nclass Solution {\n    public void merge(int[] nums1, int m, int[] nums2, int n) {\n        int front = 0;\n        int after = 0;\n        // int length = m > n ? m : n;\n        \n\n        int[] nums1_copy = new int[m];\n        // for (int i = 0; i < m; i++ ) {\n        //     nums1_copy[i] = nums1[i];\n        // }\n        System.arraycopy(nums1, 0, nums1_copy, 0, m);\n\n        int j = 0;\n\n        // while(front < length) {\n        //     if (nums1_copy[front] <= nums2[after]) {\n        //         nums1[j++] = nums1_copy[front]; \n        //         front++;\n        //     }else{\n        //         nums1[j++] = nums2[after];\n        //         after++;\n        //     }\n        // }\n        while((front < m) && (after < n) ){\n         nums1[j++] = nums1_copy[front] < nums2[after] ? nums1_copy[front++] : nums2[after++]; \n        }\n\n\n        if (front < m) {\n            System.arraycopy(nums1_copy, front, mums1, front + after, m + n - front - after);\n        }\n        if (after < n) {\n            System.arraycopy(nums2, after, nums1, front + after, m + n - front - after);\n        }\n    }\n}"]],[3085,3085],[4208,4208]]],[1561446765720,["GJX@GJXAIOU",[[1,1909,"执行用时 :1 ms, 在所有 Java 提交中击败了98.49%的用户\n\n内存消耗 :35.8 MB, 在所有 Java 提交中击败了85.99%的用户"]],[1909,1909],[1986,1986]]],[1561446768168,["GJX@GJXAIOU",[[-1,1946,"\n"]],[1946,1946],[1945,1945]]],[1561446770449,["GJX@GJXAIOU",[[1,1986,"\n"]],[1985,1985],[1986,1986]]],[1561449925247,["GJX@GJXAIOU",[[1,18,"参考"],[-1,1924," "],[1,1925," "],[-1,1929," "],[1,1930," "],[-1,1964," "],[1,1965," "],[-1,1969," "],[1,1970," "]],[18,18],[20,20]]]],null,"GJX@GJXAIOU"]]}