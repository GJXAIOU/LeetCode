{"compress":true,"commitItems":[["4c28d11c-55ff-4182-9a9a-d9fb743a1e4c",1560516084572,"",[[1560516038431,["GJX@GJXAIOU",[[1,0,"# 766.托普利茨矩阵\n\n\n\n"]],[0,0],[15,15]]],[1560516041031,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1560516041153,["GJX@GJXAIOU",[[1,0,"\n"]],[1,1],[2,2]]],[1560516043601,["GJX@GJXAIOU",[[1,0,"-"]],[0,0],[1,1]]],[1560516043752,["GJX@GJXAIOU",[[1,0,"-"]],[1,1],[2,2]]],[1560516043897,["GJX@GJXAIOU",[[1,2,"-"]],[2,2],[3,3]]],[1560516043919,["GJX@GJXAIOU",[[1,5,"---\n\n\n"]],[3,3],[4,4]]],[1560516048913,["GJX@GJXAIOU",[[1,26,"## yi"]],[26,26],[31,31]]],[1560516049498,["GJX@GJXAIOU",[[-1,29,"yi"]],[31,31],[29,29]]],[1560516053004,["GJX@GJXAIOU",[[1,29,"一、题目"]],[29,29],[33,33]]],[1560516053304,["GJX@GJXAIOU",[[1,34,"\n"]],[33,33],[34,34]]],[1560516053463,["GJX@GJXAIOU",[[1,35,"\n"]],[34,34],[35,35]]],[1560516054841,["GJX@GJXAIOU",[[1,35,"如果一个矩阵的每一方向由左上到右下的对角线上具有相同元素，那么这个矩阵是托普利茨矩阵。\n\n给定一个 M x N 的矩阵，当且仅当它是托普利茨矩阵时返回 True。\n\n示例 1:\n\n输入: \nmatrix = [\n  [1,2,3,4],\n  [5,1,2,3],\n  [9,5,1,2]\n]\n输出: True\n解释:\n在上述矩阵中, 其对角线为:\n\"[9]\", \"[5, 5]\", \"[1, 1, 1]\", \"[2, 2, 2]\", \"[3, 3]\", \"[4]\"。\n各条对角线上的所有元素均相同, 因此答案是True。\n示例 2:\n\n输入:\nmatrix = [\n  [1,2],\n  [2,2]\n]\n输出: False\n解释: \n对角线\"[1, 2]\"上的元素不同。\n说明:\n\n matrix 是一个包含整数的二维数组。\nmatrix 的行数和列数均在 [1, 20]范围内。\nmatrix[i][j] 包含的整数在 [0, 99]范围内。\n进阶:\n\n如果矩阵存储在磁盘上，并且磁盘内存是有限的，因此一次最多只能将一行矩阵加载到内存中，该怎么办？\n如果矩阵太大以至于只能一次将部分行加载到内存中，该怎么办？\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/toeplitz-matrix\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。"]],[35,35],[644,644]]],[1560516057330,["GJX@GJXAIOU",[[-1,4,""],[1,4,"t"],[-1,84," "],[1,85," "],[-1,90," "],[1,91," "],[-1,110," "],[1,111," "],[-1,120," "],[1,121," "],[-1,141," "],[1,142," "],[-1,154," "],[1,155," "],[-1,167," "],[1,168," "],[-1,318," "],[1,319," "],[-1,327," "],[1,328," "],[-1,376," "],[1,377," "],[-1,383," "],[1,384," "],[-1,404," "],[1,405," "],[-1,413," "],[1,414," "],[-1,438," "],[1,439," "],[-1,445," "],[1,446," "]],[4,4],[5,5]]],[1560516059376,["GJX@GJXAIOU",[[1,5,"ags: "]],[5,5],[10,10]]],[1560516059815,["GJX@GJXAIOU",[[1,11,"\n"]],[10,10],[11,11]]],[1560516061266,["GJX@GJXAIOU",[[1,11,"- jain"]],[11,11],[17,17]]],[1560516062176,["GJX@GJXAIOU",[[-1,13,"jain"]],[17,17],[13,13]]],[1560516065115,["GJX@GJXAIOU",[[1,13,"简单"]],[13,13],[15,15]]],[1560516065384,["GJX@GJXAIOU",[[1,16,"\n"]],[15,15],[16,16]]],[1560516066483,["GJX@GJXAIOU",[[1,16,"- "]],[16,16],[18,18]]],[1560516066952,["GJX@GJXAIOU",[[1,19,"\n"]],[18,18],[19,19]]],[1560516068963,["GJX@GJXAIOU",[[1,19,"- 数组"]],[19,19],[23,23]]],[1560516069375,["GJX@GJXAIOU",[[1,24,"\n"]],[23,23],[24,24]]],[1560516069546,["GJX@GJXAIOU",[[1,25,"\n"]],[24,24],[25,25]]],[1560516070960,["GJX@GJXAIOU",[[1,25,"flga"]],[25,25],[29,29]]],[1560516071735,["GJX@GJXAIOU",[[-1,27,"ga"]],[29,29],[27,27]]],[1560516073160,["GJX@GJXAIOU",[[1,27,"ag: "]],[27,27],[31,31]]],[1560516073752,["GJX@GJXAIOU",[[1,32,"\n"]],[31,31],[32,32]]],[1560516075096,["GJX@GJXAIOU",[[-1,32,"\n"]],[32,32],[31,31]]],[1560516077049,["GJX@GJXAIOU",[[1,31,"green"]],[31,31],[36,36]]],[1560516077487,["GJX@GJXAIOU",[[1,37,"\n"]],[36,36],[37,37]]],[1560516082897,["GJX@GJXAIOU",[[1,37,"style: summer"]],[37,37],[50,50]]],[1560516083265,["GJX@GJXAIOU",[[1,51,"\n"]],[50,50],[51,51]]],[1560516091313,["GJX@GJXAIOU",[[1,51,"ta"]],[51,51],[53,53]]],[1560516091959,["GJX@GJXAIOU",[[-1,51,"ta"]],[53,53],[51,51]]],[1560516092504,["GJX@GJXAIOU",[[1,51,"fata"]],[51,51],[55,55]]],[1560516093281,["GJX@GJXAIOU",[[-1,51,"fata"]],[55,55],[51,51]]],[1560516106218,["GJX@GJXAIOU",[[1,51,"data:'2019-6-14'"]],[51,51],[67,67]]],[1560516115936,["GJX@GJXAIOU",[[1,56," "]],[56,56],[57,57]]],[1560516533367,["GJX@GJXAIOU",[[-1,439,"\n"]],[439,439],[438,438]]],[1560516535313,["GJX@GJXAIOU",[[1,435,"\n"]],[435,435],[436,436]]],[1560516536546,["GJX@GJXAIOU",[[1,436,"- "]],[436,436],[438,438]]],[1560516540561,["GJX@GJXAIOU",[[-1,442," "]],[443,443],[442,442]]],[1560516542553,["GJX@GJXAIOU",[[1,442,"- "]],[442,442],[444,444]]],[1560516545025,["GJX@GJXAIOU",[[1,465,"- "]],[465,465],[467,467]]],[1560516546907,["GJX@GJXAIOU",[[1,495,"- "]],[495,495],[497,497]]],[1560516549239,["GJX@GJXAIOU",[[1,442,"  "],[1,465,"  "],[1,495,"  "]],[444,511],[446,517]]],[1560516552266,["GJX@GJXAIOU",[[1,367,"- "]],[367,367],[369,369]]],[1560516558252,["GJX@GJXAIOU",[[1,360,"- "]],[360,360],[362,362]]],[1560516560031,["GJX@GJXAIOU",[[-1,368,"\n"]],[368,368],[367,367]]],[1560516563579,["GJX@GJXAIOU",[[1,360,"\n"]],[359,359],[360,360]]],[1560516565864,["GJX@GJXAIOU",[[1,369,"  "]],[369,369],[371,371]]],[1560516568239,["GJX@GJXAIOU",[[-1,188,"\n"]],[188,188],[187,187]]],[1560516570784,["GJX@GJXAIOU",[[1,182,"- "]],[182,182],[184,184]]],[1560516573058,["GJX@GJXAIOU",[[1,190,"  - "]],[190,190],[194,194]]],[1560516600439,["GJX@GJXAIOU",[[-1,630,"来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/toeplitz-matrix\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。"]],[630,732],[630,630]]],[1560518701999,["GJX@GJXAIOU",[[1,631,"\n"]],[629,629],[630,630]]],[1560518702128,["GJX@GJXAIOU",[[1,632,"\n"]],[630,630],[631,631]]],[1560518706916,["GJX@GJXAIOU",[[1,631,"## 二、解答"]],[631,631],[638,638]]],[1560518707224,["GJX@GJXAIOU",[[1,640,"\n"]],[638,638],[639,639]]],[1560518707361,["GJX@GJXAIOU",[[1,641,"\n"]],[639,639],[640,640]]],[1560518709009,["GJX@GJXAIOU",[[1,640,"11"]],[640,640],[642,642]]],[1560518709826,["GJX@GJXAIOU",[[-1,640,"11"]],[642,642],[640,640]]],[1560518710504,["GJX@GJXAIOU",[[1,640,"```"]],[640,640],[643,643]]],[1560518710529,["GJX@GJXAIOU",[[1,643,"language\n```\n"]],[643,643],[643,651]]],[1560518713094,["GJX@GJXAIOU",[[-1,643,"language"],[1,651,"j"]],[643,651],[644,644]]],[1560518713547,["GJX@GJXAIOU",[[1,644,"ava"]],[644,644],[647,647]]],[1560518713760,["GJX@GJXAIOU",[[1,648,"\n"]],[647,647],[648,648]]],[1560518715218,["GJX@GJXAIOU",[[1,648,"class Solution {\n    public boolean isToeplitzMatrix(int[][] matrix) {\n        //除了边缘，只要判读该数和其左斜上方数是否相等即可\n        int cows = matrix.length;\n        int colums = matrix[0].length;\n        if (matrix == null) {\n            return false;\n        }\n        for (int i = 0; i < cows; i++ ) {\n            for (int j = 0; j < colums; j++) {\n                if (i != 0 && j != 0) {\n                    if(matrix[i][j] == matrix[i-1][j-1]){\n                    }else{\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n}"]],[648,648],[1237,1237]]],[1560518718864,["GJX@GJXAIOU",[[1,1244,"\n"]],[1241,1241],[1242,1242]]],[1560518718991,["GJX@GJXAIOU",[[1,1245,"\n"]],[1242,1242],[1243,1243]]],[1560518735827,["GJX@GJXAIOU",[[1,1243,"执行用时 :5 ms, 在所有Java提交中击败了37.31%的用户\n\n内存消耗 :40.7 MB, 在所有Java提交中击败了91.67%的用户"]],[1243,1243],[1316,1316]]],[1560520748943,["GJX@GJXAIOU",[[1,640,"\n"]],[639,639],[640,640]]],[1560520750864,["GJX@GJXAIOU",[[1,640,"- ziwo"]],[640,640],[646,646]]],[1560520751953,["GJX@GJXAIOU",[[-1,642,"ziwo"]],[646,646],[642,642]]],[1560520755516,["GJX@GJXAIOU",[[1,642,"自我解答："]],[642,642],[647,647]]],[1560520758128,["GJX@GJXAIOU",[[1,640,"\n"]],[638,638],[639,639]]],[1560520758265,["GJX@GJXAIOU",[[1,641,"\n"]],[639,639],[640,640]]],[1560520768150,["GJX@GJXAIOU",[[1,640,"- 方法Yi"]],[640,640],[646,646]]],[1560520768895,["GJX@GJXAIOU",[[-1,644,"Yi"]],[646,646],[644,644]]],[1560520770282,["GJX@GJXAIOU",[[1,644,"一："]],[644,644],[646,646]]],[1560520770744,["GJX@GJXAIOU",[[1,647,"- \n"]],[646,646],[649,649]]],[1560520771664,["GJX@GJXAIOU",[[-1,647,"- "]],[649,649],[647,647]]],[1560520792009,["GJX@GJXAIOU",[[1,647,"不少的评论和答案都用了“前行中除最后一个元素外剩余的元素完全等于后行中除第一个元素外剩余的元素”来判断是否满足托普利兹矩阵。但是这样的操作需要内存中至少存储2*(N-1)的数据，不满足题目中扩展要求“内存一次最大读取一行”（内存最大为N）。 通过使用（行数-列数）为键来储存数据可以在扩展要求下完成任务：（Python3）\n\n```stata\nclass Solution:\n    def isToeplitzMatrix(self, matrix: List[List[int]]) -> bool:\n        dict_matrix = {}\n        for index1 in range(len(matrix)):\n            for index2 in range(len(matrix[0])):\n                a = index1 - index2\n                if dict_matrix.__contains__(a):\n                    if dict_matrix[a] != matrix[index1][index2]:\n                        return False\n                else:\n                    dict_matrix[a] = matrix[index1][index2]\n        return True\n\n```\n\n提交结果： 执行用时 :56 ms, 在所有Python3提交中击败了94.56%的用户 内存消耗 :12.9 MB, 在所有Python3提交中击败了98.53%的用户"]],[647,647],[1395,1395]]],[1560520795202,["GJX@GJXAIOU",[[1,1397,"\n"]],[1395,1395],[1396,1396]]],[1560520795313,["GJX@GJXAIOU",[[1,1398,"\n"]],[1396,1396],[1397,1397]]],[1560520800415,["GJX@GJXAIOU",[[-1,798,"：（Python3）"]],[799,808],[798,798]]],[1560520802744,["GJX@GJXAIOU",[[-1,803,"stata"]],[808,808],[803,803]]],[1560520804251,["GJX@GJXAIOU",[[1,803,"PYTHON"]],[803,803],[809,809]]],[1560520805416,["GJX@GJXAIOU",[[-1,803,"PYTHON"]],[809,809],[803,803]]],[1560520807849,["GJX@GJXAIOU",[[1,803,"python3"]],[803,803],[810,810]]],[1560520817440,["GJX@GJXAIOU",[[1,800,"\n"]],[799,799],[800,800]]],[1560520818745,["GJX@GJXAIOU",[[1,800,"****"]],[800,800],[802,802]]],[1560520819724,["GJX@GJXAIOU",[[1,802,"zheng"]],[802,802],[807,807]]],[1560520820719,["GJX@GJXAIOU",[[-1,802,"zheng"]],[807,807],[802,802]]],[1560520838308,["GJX@GJXAIOU",[[1,802,"整体丝丝相"]],[802,802],[807,807]]],[1560520838999,["GJX@GJXAIOU",[[-1,804,"丝丝相"]],[807,807],[804,804]]],[1560520840802,["GJX@GJXAIOU",[[1,804,"思想："]],[804,804],[807,807]]],[1560520856669,["GJX@GJXAIOU",[[1,809," 行减列"]],[809,809],[813,813]]],[1560520860237,["GJX@GJXAIOU",[[1,813,"相同的值"]],[813,813],[817,817]]],[1560520864344,["GJX@GJXAIOU",[[-1,813,"相同的值"]],[817,817],[813,813]]],[1560520868156,["GJX@GJXAIOU",[[1,813,"值相同 "]],[813,813],[817,817]]],[1560520870272,["GJX@GJXAIOU",[[-1,816," "]],[817,817],[816,816]]],[1560520878988,["GJX@GJXAIOU",[[1,816,"，对应的元素应该也相同"]],[816,816],[827,827]]],[1560520885411,["GJX@GJXAIOU",[[1,18,"完成"]],[18,18],[20,20]]]],null,"GJX@GJXAIOU"]]}