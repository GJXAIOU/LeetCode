{"compress":true,"commitItems":[["2a84e2c6-d3b6-4f4c-8638-bd0bd14328e5",1562831089646,"",[[1562831051882,["GJX@GJXAIOU",[[1,0,"# 1018.可被5整除的二进制前缀\n\n\n\n"]],[0,0],[21,21]]],[1562831059719,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1562831060968,["GJX@GJXAIOU",[[1,0,"---\ntags: \n- 简单\n- 参考\n- 数组\n- 动态规划\nflag: yellow\nstyle: summer\ndate: '2019-7-5'\n---"]],[0,0],[80,80]]],[1562831065751,["GJX@GJXAIOU",[[-1,74,"5"]],[75,75],[74,74]]],[1562831066186,["GJX@GJXAIOU",[[1,74,"11"]],[74,74],[76,76]]],[1562831069280,["GJX@GJXAIOU",[[-1,26,"- 动态规划"]],[26,32],[26,26]]],[1562831069703,["GJX@GJXAIOU",[[-1,26,"\n"]],[26,26],[25,25]]],[1562831083331,["GJX@GJXAIOU",[[1,95,"## 一、题目"]],[95,95],[102,102]]],[1562831083599,["GJX@GJXAIOU",[[1,104,"\n"]],[102,102],[103,103]]],[1562831083814,["GJX@GJXAIOU",[[1,105,"\n"]],[103,103],[104,104]]],[1562831083975,["GJX@GJXAIOU",[[1,106,"\n"]],[104,104],[105,105]]],[1562831084135,["GJX@GJXAIOU",[[1,107,"\n"]],[105,105],[106,106]]],[1562831086022,["GJX@GJXAIOU",[[1,106,"### "]],[106,106],[110,110]]],[1562831087175,["GJX@GJXAIOU",[[-1,108,"# "]],[110,110],[108,108]]],[1562831088922,["GJX@GJXAIOU",[[1,108," 二、"]],[108,108],[111,111]]],[1562831093091,["GJX@GJXAIOU",[[1,111,"解答"]],[111,111],[113,113]]],[1562831093409,["GJX@GJXAIOU",[[1,115,"\n"]],[113,113],[114,114]]],[1562831129280,["GJX@GJXAIOU",[[1,104,"给定由若干 0 和 1 组成的数组 A。我们定义 N_i：从 A[0] 到 A[i] 的第 i 个子数组被解释为一个二进制数（从最高有效位到最低有效位）。\n\n返回布尔值列表 answer，只有当 N_i 可以被 5 整除时，答案 answer[i] 为 true，否则为 false。\n\n \n\n示例 1：\n\n输入：[0,1,1]\n输出：[true,false,false]\n解释：\n输入数字为 0, 01, 011；也就是十进制中的 0, 1, 3 。只有第一个数可以被 5 整除，因此 answer[0] 为真。\n示例 2：\n\n输入：[1,1,1]\n输出：[false,false,false]\n示例 3：\n\n输入：[0,1,1,1,1,1]\n输出：[true,false,false,false,true,false]\n示例 4：\n\n输入：[1,1,1,0,1]\n输出：[false,false,false,false,false]\n \n\n提示：\n\n1 <= A.length <= 30000\nA[i] 为 0 或 1\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/binary-prefix-divisible-by-5\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。"]],[104,104],[683,683]]],[1562831131545,["GJX@GJXAIOU",[[-1,248," "]],[249,249],[248,248]]],[1562831131663,["GJX@GJXAIOU",[[-1,249,"\n"]],[248,248],[247,247]]],[1562831244423,["GJX@GJXAIOU",[[-1,255,"\n"]],[255,255],[254,254]]],[1562831250008,["GJX@GJXAIOU",[[1,362,"\n"]],[362,362],[363,363]]],[1562831251038,["GJX@GJXAIOU",[[-1,362,"\n"]],[363,363],[362,362]]],[1562831253201,["GJX@GJXAIOU",[[1,359,"\n"]],[359,359],[360,360]]],[1562831254335,["GJX@GJXAIOU",[[-1,366,"\n"]],[366,366],[365,365]]],[1562831257107,["GJX@GJXAIOU",[[-1,109," 0 和 1 "],[1,116," 0 和 1 "],[-1,128," "],[1,129," "],[-1,134," "],[1,135," "],[-1,141," "],[1,142," "],[-1,146," "],[1,147," "],[-1,151," "],[1,152," "],[-1,190," "],[1,191," "],[-1,201," N_i "],[1,206," N_i "],[-1,211," "],[1,212," "],[-1,218," "],[1,219," "],[-1,230," "],[1,231," "],[-1,360,""],[1,360,"-"],[-1,465," "],[1,466," "],[-1,520," "],[1,521," "],[-1,557," 0 或 "],[1,562," 0 或 "]],[360,360],[361,361]]],[1562831257632,["GJX@GJXAIOU",[[1,361," "]],[361,361],[362,362]]],[1562831259922,["GJX@GJXAIOU",[[1,249,"- "]],[249,249],[251,251]]],[1562831264407,["GJX@GJXAIOU",[[-1,410,"\n"]],[410,410],[409,409]]],[1562831266312,["GJX@GJXAIOU",[[1,404,"\n"]],[404,404],[405,405]]],[1562831267546,["GJX@GJXAIOU",[[1,405,"- "]],[405,405],[407,407]]],[1562831269248,["GJX@GJXAIOU",[[-1,475,"\n"]],[475,475],[474,474]]],[1562831272223,["GJX@GJXAIOU",[[1,469,"\n"]],[469,469],[470,470]]],[1562831273209,["GJX@GJXAIOU",[[1,470,"- "]],[470,470],[472,472]]],[1562831277463,["GJX@GJXAIOU",[[-1,535,"\n"]],[535,535],[534,534]]],[1562831280272,["GJX@GJXAIOU",[[1,531,"- "]],[531,531],[533,533]]],[1562835515738,["GJX@GJXAIOU",[[-1,700,"\n"],[1,701,"`"]],[700,700],[701,701]]],[1562835516131,["GJX@GJXAIOU",[[1,701,"``"]],[701,701],[703,703]]],[1562835516155,["GJX@GJXAIOU",[[1,703,"language\n```\n"]],[703,703],[703,711]]],[1562835517347,["GJX@GJXAIOU",[[-1,703,"language"],[1,711,"j"]],[703,711],[704,704]]],[1562835518098,["GJX@GJXAIOU",[[1,704,"ava"]],[704,704],[707,707]]],[1562835518193,["GJX@GJXAIOU",[[1,708,"\n"]],[707,707],[708,708]]],[1562835519514,["GJX@GJXAIOU",[[1,708,"思路\n[1,1,1,0,1]\n\n第一步：[1] = 0*2+1 = 1;                //被5取模=1\n第二步：[1,1] = 1*2+1 = 3;              //被5取模=3\n第三步：[1,1,1] = 3*2+1 = 7;            //被5取模=2\n第四步：[1,1,1,0] = 7*2+0 = 14;         //被5取模=4\n第五步：[1,1,1,0,1] = 14*2+1 = 29;      //被5取模=4\n如果每步计算2的幂，结果会越来越大，java没有基本类型可以承受如此大的结果考虑采用每次结果的模进行计算\n\n第一步：[1] = (0*2+1)%5 = 1;            //被5取模=1\n第二步：[1,1] = (1*2+1)%5 = 3;          //被5取模=3\n第三步：[1,1,1] = (3*2+1)%5 = 2;        //被5取模=2\n第四步：[1,1,1,0] = (2*2+0)%5 = 4;      //被5取模=4\n第五步：[1,1,1,0,1] = (4*2+1)%5 = 4;    //被5取模=4\nclass Solution {\n    public List<Boolean> prefixesDivBy5(int[] A) {\n\t\tList<Boolean> list = new ArrayList<>(A.length);\n\t\tint mod = 0;\n\t\tfor(int i = 0;i<A.length;i++) {\n\t\t\tmod = (mod << 1)%5 + (A[i] == 1 ? 1 : 0);\n\t\t\tlist.add(mod%5==0);\n\t\t}\n        return list;\n    }\n\t\n}\n\n作者：xiao-qiu-qiu\n链接：https://leetcode-cn.com/problems/two-sum/solution/ke-bei-5-zheng-chu-de-er-jin-zhi-qian-zhui-by-xiao/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[708,708],[1670,1670]]],[1562835522432,["GJX@GJXAIOU",[[-1,708,"思路\n[1,1,1,0,1]\n\n第一步：[1] = 0*2+1 = 1;                //被5取模=1\n第二步：[1,1] = 1*2+1 = 3;              //被5取模=3\n第三步：[1,1,1] = 3*2+1 = 7;            //被5取模=2\n第四步：[1,1,1,0] = 7*2+0 = 14;         //被5取模=4\n第五步：[1,1,1,0,1] = 14*2+1 = 29;      //被5取模=4\n如果每步计算2的幂，结果会越来越大，java没有基本类型可以承受如此大的结果考虑采用每次结果的模进行计算\n\n第一步：[1] = (0*2+1)%5 = 1;            //被5取模=1\n第二步：[1,1] = (1*2+1)%5 = 3;          //被5取模=3\n第三步：[1,1,1] = (3*2+1)%5 = 2;        //被5取模=2\n第四步：[1,1,1,0] = (2*2+0)%5 = 4;      //被5取模=4\n第五步：[1,1,1,0,1] = (4*2+1)%5 = 4;    //被5取模=4\nclass Solution {\n    public List<Boolean> prefixesDivBy5(int[] A) {\n\t\tList<Boolean> list = new ArrayList<>(A.length);\n\t\tint mod = 0;\n\t\tfor(int i = 0;i<A.length;i++) {\n\t\t\tmod = (mod << 1)%5 + (A[i] == 1 ? 1 : 0);\n\t\t\tlist.add(mod%5==0);\n\t\t}\n        return list;\n    }\n\t\n}\n\n作者：xiao-qiu-qiu\n链接：https://leetcode-cn.com/problems/two-sum/solution/ke-bei-5-zheng-chu-de-er-jin-zhi-qian-zhui-by-xiao/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[1670,1670],[708,708]]],[1562835524779,["GJX@GJXAIOU",[[1,699,"思路\n[1,1,1,0,1]\n\n第一步：[1] = 0*2+1 = 1;                //被5取模=1\n第二步：[1,1] = 1*2+1 = 3;              //被5取模=3\n第三步：[1,1,1] = 3*2+1 = 7;            //被5取模=2\n第四步：[1,1,1,0] = 7*2+0 = 14;         //被5取模=4\n第五步：[1,1,1,0,1] = 14*2+1 = 29;      //被5取模=4\n如果每步计算2的幂，结果会越来越大，java没有基本类型可以承受如此大的结果考虑采用每次结果的模进行计算\n\n第一步：[1] = (0*2+1)%5 = 1;            //被5取模=1\n第二步：[1,1] = (1*2+1)%5 = 3;          //被5取模=3\n第三步：[1,1,1] = (3*2+1)%5 = 2;        //被5取模=2\n第四步：[1,1,1,0] = (2*2+0)%5 = 4;      //被5取模=4\n第五步：[1,1,1,0,1] = (4*2+1)%5 = 4;    //被5取模=4\nclass Solution {\n    public List<Boolean> prefixesDivBy5(int[] A) {\n\t\tList<Boolean> list = new ArrayList<>(A.length);\n\t\tint mod = 0;\n\t\tfor(int i = 0;i<A.length;i++) {\n\t\t\tmod = (mod << 1)%5 + (A[i] == 1 ? 1 : 0);\n\t\t\tlist.add(mod%5==0);\n\t\t}\n        return list;\n    }\n\t\n}\n\n作者：xiao-qiu-qiu\n链接：https://leetcode-cn.com/problems/two-sum/solution/ke-bei-5-zheng-chu-de-er-jin-zhi-qian-zhui-by-xiao/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[699,699],[1661,1661]]],[1562835532378,["GJX@GJXAIOU",[[-1,1662,"```java\n\n```"]],[1662,1674],[1662,1662]]],[1562835535129,["GJX@GJXAIOU",[[1,1219,"\n"]],[1219,1219],[1220,1220]]],[1562835536634,["GJX@GJXAIOU",[[1,1219,"```java\n\n```"]],[1219,1219],[1231,1231]]],[1562835538827,["GJX@GJXAIOU",[[-1,1228,"```"]],[1228,1231],[1228,1228]]],[1562835541161,["GJX@GJXAIOU",[[1,1499,"```"]],[1499,1499],[1502,1502]]],[1562835543665,["GJX@GJXAIOU",[[-1,1228,"\n"]],[1228,1228],[1227,1227]]],[1562835544081,["GJX@GJXAIOU",[[-1,1227,"\n"]],[1227,1227],[1226,1226]]],[1562835550345,["GJX@GJXAIOU",[[1,699,"**"],[1,701,"**"]],[699,701],[699,705]]],[1562835570298,["GJX@GJXAIOU",[[-1,1496,"\n"]],[1497,1497],[1496,1496]]],[1562835580474,["GJX@GJXAIOU",[[1,998,"`"]],[998,998],[999,999]]],[1562835582307,["GJX@GJXAIOU",[[1,1043,"`"]],[1043,1043],[1044,1044]]],[1562835587177,["GJX@GJXAIOU",[[-1,1043,"`"]],[1044,1044],[1043,1043]]],[1562835589314,["GJX@GJXAIOU",[[1,1223,"`"]],[1223,1223],[1224,1224]]],[1562835591721,["GJX@GJXAIOU",[[-1,1223,"`"]],[1224,1224],[1223,1223]]],[1562835595473,["GJX@GJXAIOU",[[-1,998,"`"]],[999,999],[998,998]]],[1562835602994,["GJX@GJXAIOU",[[1,1677,"\n"]],[1676,1676],[1677,1677]]],[1562835603129,["GJX@GJXAIOU",[[1,1678,"\n"]],[1677,1677],[1678,1678]]],[1562835604074,["GJX@GJXAIOU",[[-1,1678,"\n"],[1,1679,"-"]],[1678,1678],[1679,1679]]],[1562835605611,["GJX@GJXAIOU",[[1,1679," deo"]],[1679,1679],[1683,1683]]],[1562835606282,["GJX@GJXAIOU",[[-1,1680,"deo"]],[1683,1683],[1680,1680]]],[1562835609577,["GJX@GJXAIOU",[[1,1680,"我的解法\n- "]],[1680,1680],[1687,1687]]],[1562835610435,["GJX@GJXAIOU",[[-1,1686," "]],[1687,1687],[1686,1686]]],[1562835610593,["GJX@GJXAIOU",[[-1,1685,"-"],[1,1686,"\n"]],[1686,1686],[1685,1685]]],[1562835612490,["GJX@GJXAIOU",[[-1,1685,"\n"],[1,1686,"`"]],[1685,1685],[1686,1686]]],[1562835613059,["GJX@GJXAIOU",[[1,1686,"``"]],[1686,1686],[1688,1688]]],[1562835613084,["GJX@GJXAIOU",[[1,1688,"language\n```\n"]],[1688,1688],[1688,1696]]],[1562835613844,["GJX@GJXAIOU",[[-1,1688,"language"],[1,1696,"j"]],[1688,1696],[1689,1689]]],[1562835614587,["GJX@GJXAIOU",[[1,1689,"ava"]],[1689,1689],[1692,1692]]],[1562835614780,["GJX@GJXAIOU",[[1,1693,"\n"]],[1692,1692],[1693,1693]]],[1562835624033,["GJX@GJXAIOU",[[1,1693,"class Solution {\n    public List<Boolean> prefixesDivBy5(int[] A) {\n        \n        //合法性检查\n        if (A.length == 0 || A == null) {\n            return null;\n        }\n\n        List<Boolean> ans = new ArrayList<Boolean>();\n\n        //遍历数组\n        int temp = 0;\n        for (int i : A ) {\n            for(int j = i; j >= 0; --j){\n                 temp += A[j]*Math.pow(2,i-j);\n            }                 \n            if (temp % 5 == 0) {\n                ans.add(true);\n            }else{\n                ans.add(false);\n            }\n            temp = 0;\n          \n        }\n\n        return ans;\n    }\n}"]],[1693,1693],[2302,2302]]],[1562835626617,["GJX@GJXAIOU",[[1,2307,"\n"]],[2306,2306],[2307,2307]]],[1562835627330,["GJX@GJXAIOU",[[-1,2307,"\n"],[1,2308,"k"]],[2307,2307],[2308,2308]]],[1562835627731,["GJX@GJXAIOU",[[1,2308,"as"]],[2308,2308],[2310,2310]]],[1562835628248,["GJX@GJXAIOU",[[-1,2308,"as"]],[2310,2310],[2308,2308]]],[1562835628385,["GJX@GJXAIOU",[[-1,2307,"k"],[1,2308,"\n"]],[2308,2308],[2307,2307]]],[1562835628569,["GJX@GJXAIOU",[[-1,2307,"\n"]],[2307,2307],[2306,2306]]],[1562835630187,["GJX@GJXAIOU",[[1,2307,"\n"]],[2306,2306],[2307,2307]]],[1562835631945,["GJX@GJXAIOU",[[-1,2307,"\n"],[1,2308,"卡死"]],[2307,2307],[2309,2309]]],[1562835634491,["GJX@GJXAIOU",[[1,2309,"一个范例："]],[2309,2309],[2314,2314]]],[1562835634713,["GJX@GJXAIOU",[[1,2314,"\n\n"]],[2314,2314],[2315,2315]]],[1562835692181,["GJX@GJXAIOU",[[1,2315,"**输入：**[0,1,1,1,1,1]\n**输出：**[true,false,false,false,true,false]"]],[2315,2315],[2378,2378]]],[1562835695321,["GJX@GJXAIOU",[[1,2379,"\n"]],[2378,2378],[2379,2379]]],[1562835697878,["GJX@GJXAIOU",[[-1,2379,"\n"],[1,2380,"输出"]],[2379,2379],[2381,2381]]],[1562835703912,["GJX@GJXAIOU",[[1,2381,"为：[true,false,false,false,true,false]"]],[2381,2381],[2418,2418]]],[1562835706457,["GJX@GJXAIOU",[[-1,2407,"true"]],[2411,2411],[2407,2407]]],[1562835708387,["GJX@GJXAIOU",[[1,2407,"false"]],[2407,2407],[2412,2412]]],[1562835711360,["GJX@GJXAIOU",[[-1,2413,"false"]],[2418,2418],[2413,2413]]],[1562835712803,["GJX@GJXAIOU",[[1,2413,"true"]],[2413,2413],[2417,2417]]],[1562835736360,["GJX@GJXAIOU",[[1,706,"\n"]],[706,706],[707,707]]],[1562835738518,["GJX@GJXAIOU",[[1,706,"```"]],[706,706],[709,709]]],[1562835741320,["GJX@GJXAIOU",[[1,1227,"\n"]],[1226,1226],[1227,1227]]],[1562835741906,["GJX@GJXAIOU",[[1,1227,"```"]],[1227,1227],[1230,1230]]],[1562835746722,["GJX@GJXAIOU",[[1,1231,"\n"]],[1230,1230],[1231,1231]]],[1562836298915,["GJX@GJXAIOU",[[1,1513,"\n"]],[1512,1512],[1513,1513]]],[1562836309709,["GJX@GJXAIOU",[[1,1513,"****"]],[1513,1513],[1515,1515]]],[1562836310188,["GJX@GJXAIOU",[[1,1515,"fu"]],[1515,1515],[1517,1517]]],[1562836310985,["GJX@GJXAIOU",[[-1,1515,"fu"]],[1517,1517],[1515,1515]]],[1562836314437,["GJX@GJXAIOU",[[1,1515,"复杂度分析："]],[1515,1515],[1521,1521]]],[1562836315985,["GJX@GJXAIOU",[[1,1524,"\n"]],[1523,1523],[1524,1524]]],[1562836316113,["GJX@GJXAIOU",[[1,1525,"\n"]],[1524,1524],[1525,1525]]],[1562836316256,["GJX@GJXAIOU",[[1,1526,"\n"]],[1525,1525],[1526,1526]]],[1562836316354,["GJX@GJXAIOU",[[1,1527,"\n"]],[1526,1526],[1527,1527]]],[1562836318290,["GJX@GJXAIOU",[[1,1524,"****"]],[1524,1524],[1526,1526]]],[1562836319625,["GJX@GJXAIOU",[[-1,1526,"**"]],[1526,1526],[1524,1524]]],[1562836320818,["GJX@GJXAIOU",[[-1,1524,"**"]],[1526,1526],[1524,1524]]],[1562836321227,["GJX@GJXAIOU",[[1,1524,"执行用时 :8 ms, 在所有 Java 提交中击败了39.42%的用户\n\n内存消耗 :50.8 MB, 在所有 Java 提交中击败了31.85%的用户"]],[1524,1524],[1601,1601]]],[1562836323897,["GJX@GJXAIOU",[[-1,1604,"\n"]],[1604,1604],[1603,1603]]],[1562836324025,["GJX@GJXAIOU",[[-1,1603,"\n"]],[1603,1603],[1602,1602]]],[1562836621483,["GJX@GJXAIOU",[[1,1777,"\n"]],[1775,1775],[1776,1776]]],[1562836629031,["GJX@GJXAIOU",[[-1,1539," "],[1,1540," "],[-1,1544," "],[1,1545," "],[-1,1580," "],[1,1581," "],[-1,1585," "],[1,1586," "],[1,1776,"- 解法二：有点垃圾"]],[1776,1776],[1786,1786]]],[1562836629307,["GJX@GJXAIOU",[[1,1787,"- \n"]],[1786,1786],[1789,1789]]],[1562836630353,["GJX@GJXAIOU",[[-1,1787,"- "]],[1789,1789],[1787,1787]]],[1562836633611,["GJX@GJXAIOU",[[1,1787,"```java"]],[1787,1787],[1794,1794]]],[1562836633721,["GJX@GJXAIOU",[[1,1796,"\n"]],[1794,1794],[1795,1795]]],[1562836633873,["GJX@GJXAIOU",[[1,1797,"\n"]],[1795,1795],[1796,1796]]],[1562836634017,["GJX@GJXAIOU",[[1,1798,"\n"]],[1796,1796],[1797,1797]]],[1562836635309,["GJX@GJXAIOU",[[1,1797,"```"]],[1797,1797],[1800,1800]]],[1562836636754,["GJX@GJXAIOU",[[1,1795,"class Solution {\n    public List<Boolean> prefixesDivBy5(int[] A) {\n        List<Boolean> result = new ArrayList<>(A.length);\n        long num = 0;\n        for(int i=0;i<A.length;i++){\n            num = (num*2+A[i])%10;\n            if(num%5==0){\n                result.add(true);\n            }else {\n                result.add(false);\n            }\n        }\n        return result;\n    }\n}"]],[1795,1795],[2184,2184]]],[1562836657362,["GJX@GJXAIOU",[[1,2191,"\n"]],[2189,2189],[2190,2190]]],[1562836657850,["GJX@GJXAIOU",[[1,2190,"执行用时 :9 ms, 在所有 Java 提交中击败了17.92%的用户\n\n内存消耗 :51.1 MB, 在所有 Java 提交中击败了27.68%的用户"]],[2190,2190],[2267,2267]]],[1562836667738,["GJX@GJXAIOU",[[1,699,"\n"]],[698,698],[699,699]]],[1562836667891,["GJX@GJXAIOU",[[1,700,"\n"]],[699,699],[700,700]]],[1562836668066,["GJX@GJXAIOU",[[1,701,"\n"]],[700,700],[701,701]]],[1562836668241,["GJX@GJXAIOU",[[1,702,"\n"]],[701,701],[702,702]]],[1562836668378,["GJX@GJXAIOU",[[1,703,"\n"]],[702,702],[703,703]]],[1562836669314,["GJX@GJXAIOU",[[1,701,"-"],[-1,2210," "],[1,2211," "],[-1,2215," "],[1,2216," "],[-1,2251," "],[1,2252," "],[-1,2256," "],[1,2257," "]],[701,701],[702,702]]],[1562836670733,["GJX@GJXAIOU",[[1,702," dala"]],[702,702],[707,707]]],[1562836671538,["GJX@GJXAIOU",[[-1,703,"dala"]],[707,707],[703,703]]],[1562836674309,["GJX@GJXAIOU",[[1,703,"大佬解法："]],[703,703],[708,708]]],[1562836674585,["GJX@GJXAIOU",[[1,709,"- \n"]],[708,708],[711,711]]],[1562836675634,["GJX@GJXAIOU",[[-1,709,"- "]],[711,711],[709,709]]],[1562836678242,["GJX@GJXAIOU",[[1,709,"```java"]],[709,709],[716,716]]],[1562836678297,["GJX@GJXAIOU",[[1,719,"\n"]],[716,716],[717,717]]],[1562836679273,["GJX@GJXAIOU",[[1,720,"\n"]],[717,717],[718,718]]],[1562836680141,["GJX@GJXAIOU",[[1,718,"```"]],[718,718],[721,721]]],[1562836770723,["GJX@GJXAIOU",[[1,722,"执行用时 :5 ms, 在所有 Java 提交中击败了92.49%的用户\n\n内存消耗 :50.4 MB, 在所有 Java 提交中击败了36.02%的用户"]],[722,722],[799,799]]],[1562836777314,["GJX@GJXAIOU",[[1,717,"class Solution {\n       public List<Boolean> prefixesDivBy5(int[] A) {\n        List<Boolean> res = new ArrayList<>();\n        if (A.length < 1) return res;\n        int StateSet[][] = new int[][]{\n                {0, 1},\n                {2, 3},\n                {4, 0},\n                {1, 2},\n                {3, 4}\n        };\n        int state = 0;\n        for (int i = 0; i < A.length; i++) {\n\n            state = StateSet[state][A[i]];  //转换后的状态\n\n            if (state == 0) {\n                res.add(Boolean.TRUE);\n            } else {\n                res.add(Boolean.FALSE);\n            }\n\n        }\n        \n        return res;\n    }\n}"]],[717,717],[1357,1357]]],[1562836786698,["GJX@GJXAIOU",[[-1,707,"："]],[708,708],[707,707]]],[1562836788114,["GJX@GJXAIOU",[[1,708,"- \n"]],[707,707],[710,710]]],[1562836788817,["GJX@GJXAIOU",[[-1,708,"- "]],[710,710],[708,708]]],[1562836789641,["GJX@GJXAIOU",[[1,708,"//编译原理，有限状体自动机 DFA，O(n)"]],[708,708],[731,731]]],[1562836825738,["GJX@GJXAIOU",[[1,1464,"\n"]],[1463,1463],[1464,1464]]],[1562836825890,["GJX@GJXAIOU",[[1,1465,"\n"]],[1464,1464],[1465,1465]]],[1562836826041,["GJX@GJXAIOU",[[1,1466,"\n"]],[1465,1465],[1466,1466]]],[1562836826194,["GJX@GJXAIOU",[[1,1467,"\n"]],[1466,1466],[1467,1467]]],[1562836826289,["GJX@GJXAIOU",[[1,1468,"\n"]],[1467,1467],[1468,1468]]],[1562836836607,["GJX@GJXAIOU",[[-1,1400," "],[1,1401," "],[-1,1405," "],[1,1406," "],[-1,1441," "],[1,1442," "],[-1,1446," "],[1,1447," "],[1,1464,"- 另一种解法："]],[1464,1464],[1472,1472]]],[1562836850554,["GJX@GJXAIOU",[[-1,2554,"- 解法二：有点垃圾\n```java\nclass Solution {\n    public List<Boolean> prefixesDivBy5(int[] A) {\n        List<Boolean> result = new ArrayList<>(A.length);\n        long num = 0;\n        for(int i=0;i<A.length;i++){\n            num = (num*2+A[i])%10;\n            if(num%5==0){\n                result.add(true);\n            }else {\n                result.add(false);\n            }\n        }\n        return result;\n    }\n}\n\n```\n执行用时 :9 ms, 在所有 Java 提交中击败了17.92%的用户\n\n内存消耗 :51.1 MB, 在所有 Java 提交中击败了27.68%的用户"]],[2554,3045],[2554,2554]]],[1562836859892,["GJX@GJXAIOU",[[1,1476,"- 第三种解法："]],[1476,1476],[1484,1484]]],[1562836862796,["GJX@GJXAIOU",[[1,1476,"\n"]],[1474,1474],[1475,1475]]],[1562836862929,["GJX@GJXAIOU",[[1,1477,"\n"]],[1475,1475],[1476,1476]]],[1562836863060,["GJX@GJXAIOU",[[1,1478,"\n"]],[1476,1476],[1477,1477]]],[1562836863194,["GJX@GJXAIOU",[[1,1479,"\n"]],[1477,1477],[1478,1478]]],[1562836863297,["GJX@GJXAIOU",[[1,1480,"\n"]],[1478,1478],[1479,1479]]],[1562836874609,["GJX@GJXAIOU",[[1,1474,"刚开始想的很简单，不就是从头开始算出十进制，判断是否能被五整除吗？后来才发现 naive，早就超过位数了。\n\n那么自然的想到如果上一个数就能被5整除，再乘以2，当然也能被5整除，所以直接把它当做0不是很好？\n\n同样的如果上一个数被5除余数是1，就可以把它当做1来看，自然地想到 pre=pre%5\n\n这就有了第一个代码\n\nclass Solution {\npublic:\n\tvector<bool> prefixesDivBy5(vector<int>& A) {\n\t\tvector<bool> res(A.size());\n\t\tint pre(0);\n\t\tfor (int i = 0; i < A.size(); i++)\n\t\t{\n\t\t\tpre = pre << 1;\n\t\t\tpre += A[i];\n\t\t\tif (pre % 5 == 0)\n\t\t\t{\n\t\t\t\tres[i] = true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tres[i] = false;\n\t\t\t}\n\t\t\tpre = pre % 5;\n\t\t}\n\t\treturn res;\n\t}\n};\n但是一运行，发现只超过了46%，这不科学啊，感觉已经改进的很不错了\n\n最后发现了几个可以改进的地方，第一是没必要既赋 true，又赋 false，直接在初始化的时候赋 false，有需要的时候在赋 true 不是更好？\n\n第二个是，计算机算除法是很浪费时间的，%5 那一段花费了大量的时间，不如做个表，直接查表余数，岂不是更好？\n\n这就有了第二段，超过了 96%\n\nclass Solution {\npublic:\n\tvector<bool> prefixesDivBy5(vector<int>& A) {\n\t\tvector<bool> res(A.size(),false);\n\t\tint pre(0);\n\t\tvector<int> what_five_divided = { 0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4 };\n\t\tfor (int i = 0; i < A.size(); i++)\n\t\t{\n\t\t\tpre = pre << 1;\n\t\t\tpre += A[i];\n\t\t\tif (what_five_divided[pre] == 0)\n\t\t\t{\n\t\t\t\tres[i] = true;\n\t\t\t}\n\t\t\tpre = what_five_divided[pre];\n\t\t}\n\t\treturn res;\n\t}\n};\n\n作者：yan-si-zai-shui-li-de-yu\n链接：https://leetcode-cn.com/problems/two-sum/solution/zhe-dao-ti-mu-de-gai-jin-guo-cheng-by-yan-si-zai-s/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[1474,1474],[2780,2780]]],[1562836878834,["GJX@GJXAIOU",[[-1,1474,"刚开始想的很简单，不就是"]],[1474,1486],[1474,1474]]],[1562836885681,["GJX@GJXAIOU",[[-1,1495,"后来才发现 naive，"]],[1495,1507],[1495,1495]]],[1562836891770,["GJX@GJXAIOU",[[-1,1554,"\n"]],[1554,1554],[1553,1553]]],[1562836895322,["GJX@GJXAIOU",[[-1,1599,"这就有了第一个代码\n"]],[1599,1609],[1599,1599]]],[1562836896797,["GJX@GJXAIOU",[[1,1599,"·"]],[1599,1599],[1600,1600]]],[1562836897142,["GJX@GJXAIOU",[[1,1600,"··"]],[1600,1600],[1602,1602]]],[1562836898322,["GJX@GJXAIOU",[[-1,1599,"···"]],[1602,1602],[1599,1599]]],[1562836900717,["GJX@GJXAIOU",[[1,1599,"```java"]],[1599,1599],[1606,1606]]],[1562836904346,["GJX@GJXAIOU",[[1,1926,"\n"]],[1925,1925],[1926,1926]]],[1562836906666,["GJX@GJXAIOU",[[1,1926,"```ja"]],[1926,1926],[1931,1931]]],[1562836907249,["GJX@GJXAIOU",[[-1,1929,"ja"]],[1931,1931],[1929,1929]]],[1562836912634,["GJX@GJXAIOU",[[-1,1965,"最后发现了几个可以改进的地方，第一是没必要既赋 true，又赋 false，直接在初始化的时候赋 false，有需要的时候在赋 true 不是更好？"]],[1965,2039],[1965,1965]]],[1562836914921,["GJX@GJXAIOU",[[1,1599,"\n"]],[1598,1598],[1599,1599]]],[1562836915307,["GJX@GJXAIOU",[[1,1599,"最后发现了几个可以改进的地方，第一是没必要既赋 true，又赋 false，直接在初始化的时候赋 false，有需要的时候在赋 true 不是更好？"]],[1599,1599],[1673,1673]]],[1562836919362,["GJX@GJXAIOU",[[-1,2042,"第二个是，计算机算除法是很浪费时间的，%5 那一段花费了大量的时间，不如做个表，直接查表余数，岂不是更好？"]],[2042,2095],[2042,2042]]],[1562836921548,["GJX@GJXAIOU",[[1,1674,"\n"]],[1673,1673],[1674,1674]]],[1562836921962,["GJX@GJXAIOU",[[1,1674,"第二个是，计算机算除法是很浪费时间的，%5 那一段花费了大量的时间，不如做个表，直接查表余数，岂不是更好？"]],[1674,1674],[1727,1727]]],[1562836926698,["GJX@GJXAIOU",[[-1,2059,"但是一运行，发现只超过了46%，这不科学啊，感觉已经改进的很不错了\n\n\n\n\n\n这就有了第二段，超过了 96%"]],[2059,2113],[2059,2059]]],[1562836930338,["GJX@GJXAIOU",[[-1,2061,"class Solution {\npublic:\n\tvector<bool> prefixesDivBy5(vector<int>& A) {\n\t\tvector<bool> res(A.size(),false);\n\t\tint pre(0);\n\t\tvector<int> what_five_divided = { 0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4 };\n\t\tfor (int i = 0; i < A.size(); i++)\n\t\t{\n\t\t\tpre = pre << 1;\n\t\t\tpre += A[i];\n\t\t\tif (what_five_divided[pre] == 0)\n\t\t\t{\n\t\t\t\tres[i] = true;\n\t\t\t}\n\t\t\tpre = what_five_divided[pre];\n\t\t}\n\t\treturn res;\n\t}\n};\n"]],[2061,2520],[2061,2061]]],[1562836934214,["GJX@GJXAIOU",[[-1,1835,""],[1,1835,",false"],[1,1854,"vector<int> what_five_divided = { 0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4 };\n\t\t"],[1,1935,"what_five_divided["],[-1,1938," % 5"],[1,1942,"]"],[-1,1981,"else {\n\t\t\t\t"],[1,1992,"p"],[-1,1994,"s[i]"],[-1,2001,"false;\n\t\t\t}\n\t\t\tpre = pre % 5"],[1,2029,"what_five_divided[pre]"],[-1,2054,""],[1,2054,"\n"]],[1736,2054],[2195,2195]]],[1562840718453,["GJX@GJXAIOU",[[-1,32,"yellow"]],[32,38],[32,32]]],[1562840720574,["GJX@GJXAIOU",[[1,32,"green"]],[32,32],[37,37]]]],null,"GJX@GJXAIOU"]]}