{"compress":true,"commitItems":[["7ee6c4d5-3c51-404c-9943-572e84af788f",1562847565905,"",[[1562847522032,["GJX@GJXAIOU",[[1,0,"# 121.买卖股票的最佳时机\n\n\n\n"]],[0,0],[18,18]]],[1562847529038,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1562847530350,["GJX@GJXAIOU",[[1,0,"---\ntags: \n- 简单\n- 参考\n- 数组\nflag: green\nstyle: summer\ndate: '2019-7-11'\n---"]],[0,0],[73,73]]],[1562847542307,["GJX@GJXAIOU",[[1,91,"## 一、题目"]],[91,91],[98,98]]],[1562847542566,["GJX@GJXAIOU",[[1,100,"\n"]],[98,98],[99,99]]],[1562847549719,["GJX@GJXAIOU",[[1,100,"给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。\n\n如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。\n\n注意你不能在买入股票前卖出股票。\n\n示例 1:\n\n输入: [7,1,5,3,6,4]\n输出: 5\n解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。\n     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。\n示例 2:\n\n输入: [7,6,4,3,1]\n输出: 0\n解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。"]],[100,100],[514,514]]],[1562847554609,["GJX@GJXAIOU",[[-1,480,"著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。"]],[480,514],[480,480]]],[1562847557007,["GJX@GJXAIOU",[[1,481,"\n"]],[480,480],[481,481]]],[1562847563547,["GJX@GJXAIOU",[[-1,110," "],[1,111," "],[-1,481,"\n"],[1,482,"二"]],[481,481],[482,482]]],[1562847563874,["GJX@GJXAIOU",[[1,482,"、"]],[482,482],[483,483]]],[1562847569628,["GJX@GJXAIOU",[[1,483,"解答"]],[483,483],[485,485]]],[1562847571313,["GJX@GJXAIOU",[[1,481,"## "]],[485,485],[488,488]]],[1562848632783,["GJX@GJXAIOU",[[1,488,"\n\n"]],[488,488],[489,489]]],[1562848632913,["GJX@GJXAIOU",[[1,490,"\n"]],[489,489],[490,490]]],[1562848633882,["GJX@GJXAIOU",[[-1,490,"\n"],[1,491,"-"]],[490,490],[491,491]]],[1562848636360,["GJX@GJXAIOU",[[1,491," 自己解答\n- "]],[491,491],[499,499]]],[1562848636514,["GJX@GJXAIOU",[[-1,497,"- "],[1,499,"\n\n"]],[499,499],[498,498]]],[1562848637945,["GJX@GJXAIOU",[[-1,498,"\n"],[1,499,"`"]],[498,498],[499,499]]],[1562848638315,["GJX@GJXAIOU",[[1,499,"``"]],[499,499],[501,501]]],[1562848638338,["GJX@GJXAIOU",[[1,501,"language\n```\n"]],[501,501],[501,509]]],[1562848639418,["GJX@GJXAIOU",[[-1,501,"language"],[1,509,"j"]],[501,509],[502,502]]],[1562848639849,["GJX@GJXAIOU",[[1,502,"ava"]],[502,502],[505,505]]],[1562848640031,["GJX@GJXAIOU",[[1,506,"\n"]],[505,505],[506,506]]],[1562848641120,["GJX@GJXAIOU",[[1,506,"class Solution {\n    public int maxProfit(int[] prices) {\n        int length = prices.length;\n\n        int max = 0;\n\n        for (int i = 0; i < length - 1; ++i) {\n            for (int j = i + 1; j < length; ++j) {\n                int temp = prices[j] - prices[i];\n                max = temp > max ? temp : max;\n            }\n        }\n        return max;\n    }\n}"]],[506,506],[869,869]]],[1562848643409,["GJX@GJXAIOU",[[1,497,"zhijie"]],[497,497],[503,503]]],[1562848644664,["GJX@GJXAIOU",[[-1,497,"zhijie"]],[503,503],[497,497]]],[1562848644840,["GJX@GJXAIOU",[[-1,497,"\n"]],[497,497],[496,496]]],[1562848645705,["GJX@GJXAIOU",[[1,497,"- \n"]],[496,496],[499,499]]],[1562848646696,["GJX@GJXAIOU",[[-1,497,"- "]],[499,499],[497,497]]],[1562848647955,["GJX@GJXAIOU",[[1,497,"zhijie"]],[497,497],[503,503]]],[1562848649152,["GJX@GJXAIOU",[[-1,497,"zhijie"]],[503,503],[497,497]]],[1562848654243,["GJX@GJXAIOU",[[1,497,"直接暴力循环"]],[497,497],[503,503]]],[1562848662841,["GJX@GJXAIOU",[[1,880,"\n"]],[879,879],[880,880]]],[1562848663209,["GJX@GJXAIOU",[[1,880,"执行用时 :494 ms, 在所有 Java 提交中击败了7.50%的用户\n\n内存消耗 :50.2 MB, 在所有 Java 提交中击败了5.08%的用户"]],[880,880],[957,957]]],[1562848694095,["GJX@GJXAIOU",[[1,490,"\n"]],[489,489],[490,490]]],[1562848694218,["GJX@GJXAIOU",[[1,491,"\n"]],[490,490],[491,491]]],[1562848696306,["GJX@GJXAIOU",[[1,490,"-"],[-1,899," "],[1,900," "],[-1,904," "],[1,905," "],[-1,939," "],[1,940," "],[-1,944," "],[1,945," "]],[490,490],[491,491]]],[1562848698547,["GJX@GJXAIOU",[[1,491,"解答一："]],[491,491],[495,495]]],[1562848698992,["GJX@GJXAIOU",[[1,497,"\n"]],[495,495],[496,496]]],[1562848700344,["GJX@GJXAIOU",[[1,491," "]],[491,491],[492,492]]],[1562848702123,["GJX@GJXAIOU",[[1,497,"···"]],[497,497],[500,500]]],[1562848703191,["GJX@GJXAIOU",[[-1,497,"···"]],[500,500],[497,497]]],[1562848705776,["GJX@GJXAIOU",[[1,497,"```java"]],[497,497],[504,504]]],[1562848705889,["GJX@GJXAIOU",[[1,506,"\n"]],[504,504],[505,505]]],[1562848707266,["GJX@GJXAIOU",[[1,505,"class Solution { public int maxProfit(int[] prices) { int minprice = Integer.MAX_VALUE; int maxprofit = 0; for (int i = 0; i < prices.length; i++) { if (prices[i] < minprice) minprice = prices[i]; else  if (prices[i] - minprice > maxprofit) maxprofit = prices[i] - minprice; } return maxprofit; } }"]],[505,505],[803,803]]],[1562848709423,["GJX@GJXAIOU",[[-1,505,"class Solution { public int maxProfit(int[] prices) { int minprice = Integer.MAX_VALUE; int maxprofit = 0; for (int i = 0; i < prices.length; i++) { if (prices[i] < minprice) minprice = prices[i]; else  if (prices[i] - minprice > maxprofit) maxprofit = prices[i] - minprice; } return maxprofit; } }"]],[803,803],[505,505]]],[1562848712153,["GJX@GJXAIOU",[[1,506,"```"]],[506,506],[509,509]]],[1562848713472,["GJX@GJXAIOU",[[1,505,"class Solution { public int maxProfit(int[] prices) { int minprice = Integer.MAX_VALUE; int maxprofit = 0; for (int i = 0; i < prices.length; i++) { if (prices[i] < minprice) minprice = prices[i]; else  if (prices[i] - minprice > maxprofit) maxprofit = prices[i] - minprice; } return maxprofit; } }"]],[505,505],[803,803]]],[1562848715129,["GJX@GJXAIOU",[[-1,505,"class Solution { public int maxProfit(int[] prices) { int minprice = Integer.MAX_VALUE; int maxprofit = 0; for (int i = 0; i < prices.length; i++) { if (prices[i] < minprice) minprice = prices[i]; else  if (prices[i] - minprice > maxprofit) maxprofit = prices[i] - minprice; } return maxprofit; } }"]],[803,803],[505,505]]],[1562848716916,["GJX@GJXAIOU",[[1,505,"class Solution {\n    public int maxProfit(int[] prices) {\n         int minprice = Integer.MAX_VALUE;\n        int maxprofit = 0;\n        for (int i = 0; i < prices.length; i++) {\n            if (prices[i] < minprice)\n                minprice = prices[i];\n            else if (prices[i] - minprice > maxprofit)\n                maxprofit = prices[i] - minprice;\n        }\n        return maxprofit;\n    }\n}"]],[505,505],[907,907]]],[1562849057008,["GJX@GJXAIOU",[[1,497,"- \n"]],[496,496],[499,499]]],[1562849058568,["GJX@GJXAIOU",[[-1,497,"- "]],[499,499],[497,497]]],[1562849061328,["GJX@GJXAIOU",[[-1,497,"\n"]],[497,497],[496,496]]],[1562849065177,["GJX@GJXAIOU",[[1,758,"//"]],[758,758],[760,760]]],[1562849077125,["GJX@GJXAIOU",[[1,760,"先找比较小的"]],[760,760],[766,766]]],[1562849082131,["GJX@GJXAIOU",[[1,821," 、、"]],[821,821],[824,824]]],[1562849082616,["GJX@GJXAIOU",[[-1,822,"、、"]],[824,824],[822,822]]],[1562849083339,["GJX@GJXAIOU",[[1,822,"？、"]],[822,822],[824,824]]],[1562849083992,["GJX@GJXAIOU",[[-1,822,"？、"]],[824,824],[822,822]]],[1562849094894,["GJX@GJXAIOU",[[1,822,"//如果后面大于前面，就算插值"]],[822,822],[837,837]]],[1562849097266,["GJX@GJXAIOU",[[-1,835,"插"]],[836,836],[835,835]]],[1562849099442,["GJX@GJXAIOU",[[1,835,"差"]],[835,835],[836,836]]],[1562849235701,["GJX@GJXAIOU",[[1,496,"一次遍历"]],[496,496],[500,500]]],[1562849243943,["GJX@GJXAIOU",[[1,501,"- \n"]],[500,500],[503,503]]],[1562849244567,["GJX@GJXAIOU",[[-1,501,"- "]],[503,503],[501,501]]],[1562849245703,["GJX@GJXAIOU",[[1,501,"假设给定的数组为：\n\n[7, 1, 5, 3, 6, 4]\n\n如果我们在图表上绘制给定数组中的数字，我们将会得到：\n\n\n\n使我们感兴趣的点是上图中的峰和谷。我们需要找到最小的谷之后的最大的峰。 我们可以维持两个变量——minprice 和 maxprofit，它们分别对应迄今为止所得到的最小的谷值和最大的利润（卖出价格与最低价格之间的最大差值）。\n\n作者：LeetCode\n链接：https://leetcode-cn.com/problems/two-sum/solution/mai-mai-gu-piao-de-zui-jia-shi-ji-by-leetcode/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[501,501],[839,839]]],[1562849248520,["GJX@GJXAIOU",[[-1,511,"\n"]],[511,511],[510,510]]],[1562849250488,["GJX@GJXAIOU",[[1,501,"\n"]],[501,501],[502,502]]],[1562849251530,["GJX@GJXAIOU",[[-1,531,"\n"]],[531,531],[530,530]]],[1562849255297,["GJX@GJXAIOU",[[-1,676,"作者：LeetCode\n链接：https://leetcode-cn.com/problems/two-sum/solution/mai-mai-gu-piao-de-zui-jia-shi-ji-by-leetcode/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处"]],[676,837],[676,676]]],[1562849255832,["GJX@GJXAIOU",[[-1,675,"\n"]],[676,676],[675,675]]],[1562849256664,["GJX@GJXAIOU",[[-1,675,"。"]],[676,676],[675,675]]],[1562849257007,["GJX@GJXAIOU",[[-1,675,"\n"]],[675,675],[674,674]]],[1562849273880,["GJX@GJXAIOU",[[1,558,"![cc4ef55d97cfef6f9215285c7573027c4b265c31101dd54e8555a7021c95c927-file_1555699418271]($resource/cc4ef55d97cfef6f9215285c7573027c4b265c31101dd54e8555a7021c95c927-file_1555699418271.png)"]],[558,558],[744,744]]],[1562849278447,["GJX@GJXAIOU",[[-1,745,"\n"]],[745,745],[744,744]]],[1562849281568,["GJX@GJXAIOU",[[1,1298,"\n"]],[1297,1297],[1298,1298]]],[1562849289601,["GJX@GJXAIOU",[[1,1298,"**复杂度分析**\n\n*   时间复杂度：O(n)O(n)，只需要遍历一次。\n*   空间复杂度：O(1)O(1)，只使用了两个变量。"]],[1298,1298],[1365,1365]]],[1562849291271,["GJX@GJXAIOU",[[-1,1308,"\n"]],[1308,1308],[1307,1307]]],[1562849292561,["GJX@GJXAIOU",[[1,1365,"* \n"]],[1364,1364],[1367,1367]]],[1562849293751,["GJX@GJXAIOU",[[-1,1365,"* "]],[1367,1367],[1365,1365]]],[1562849295360,["GJX@GJXAIOU",[[-1,1350,"O(1)"]],[1354,1354],[1350,1350]]],[1562849296664,["GJX@GJXAIOU",[[-1,1322,"O(n)"]],[1326,1326],[1322,1322]]],[1562850601337,["GJX@GJXAIOU",[[-1,18,"参考"]],[20,20],[18,18]]],[1562850602755,["GJX@GJXAIOU",[[1,18,"完成"]],[18,18],[20,20]]]],null,"GJX@GJXAIOU"]]}