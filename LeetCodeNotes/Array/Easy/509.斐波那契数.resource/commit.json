{"compress":true,"commitItems":[["201a54b0-dbcf-4cc8-84d9-dc1795be37dc",1560146918777,"",[[1560146872726,["GJX@GJXAIOU",[[1,0,"# 509.斐波那契数\n\n\n\n"]],[0,0],[14,14]]],[1560146875008,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1560146875164,["GJX@GJXAIOU",[[1,0,"\n"]],[1,1],[2,2]]],[1560146875290,["GJX@GJXAIOU",[[1,2,"\n"]],[2,2],[3,3]]],[1560146875412,["GJX@GJXAIOU",[[1,3,"\n"]],[3,3],[4,4]]],[1560146875523,["GJX@GJXAIOU",[[1,4,"\n"]],[4,4],[5,5]]],[1560146877757,["GJX@GJXAIOU",[[1,0,"-"]],[0,0],[1,1]]],[1560146878056,["GJX@GJXAIOU",[[1,0,"-"]],[1,1],[2,2]]],[1560146878213,["GJX@GJXAIOU",[[1,2,"-"]],[2,2],[3,3]]],[1560146878238,["GJX@GJXAIOU",[[1,5,"---\n\n\n"]],[3,3],[4,4]]],[1560146881957,["GJX@GJXAIOU",[[1,4,"flag: "]],[4,4],[10,10]]],[1560146883781,["GJX@GJXAIOU",[[-1,4,"flag: "]],[10,10],[4,4]]],[1560146884973,["GJX@GJXAIOU",[[1,4,"taga"]],[4,4],[8,8]]],[1560146885546,["GJX@GJXAIOU",[[-1,7,"a"]],[8,8],[7,7]]],[1560146887477,["GJX@GJXAIOU",[[1,7,"s: "]],[7,7],[10,10]]],[1560146888227,["GJX@GJXAIOU",[[1,11,"\n"]],[10,10],[11,11]]],[1560146890159,["GJX@GJXAIOU",[[1,11,"- jian"]],[11,11],[17,17]]],[1560146890789,["GJX@GJXAIOU",[[-1,13,"jian"]],[17,17],[13,13]]],[1560146892640,["GJX@GJXAIOU",[[1,13,"简单"]],[13,13],[15,15]]],[1560146893019,["GJX@GJXAIOU",[[1,16,"\n"]],[15,15],[16,16]]],[1560146894543,["GJX@GJXAIOU",[[1,16,"-="]],[16,16],[18,18]]],[1560146895170,["GJX@GJXAIOU",[[-1,17,"="]],[18,18],[17,17]]],[1560146895509,["GJX@GJXAIOU",[[1,17," "]],[17,17],[18,18]]],[1560146909762,["GJX@GJXAIOU",[[1,19,"\n"]],[18,18],[19,19]]],[1560146911889,["GJX@GJXAIOU",[[1,19,"- 数组"]],[19,19],[23,23]]],[1560146912285,["GJX@GJXAIOU",[[1,24,"\n"]],[23,23],[24,24]]],[1560146914579,["GJX@GJXAIOU",[[1,24,"-0"]],[24,24],[26,26]]],[1560146915471,["GJX@GJXAIOU",[[-1,25,"0"]],[26,26],[25,25]]],[1560146916549,["GJX@GJXAIOU",[[1,25," "]],[25,25],[26,26]]],[1560146933216,["GJX@GJXAIOU",[[1,26,"斐波那契数列"]],[26,26],[32,32]]],[1560146933893,["GJX@GJXAIOU",[[1,33,"\n"]],[32,32],[33,33]]],[1560146934047,["GJX@GJXAIOU",[[1,34,"\n"]],[33,33],[34,34]]],[1560146936108,["GJX@GJXAIOU",[[1,34,"fagl"]],[34,34],[38,38]]],[1560146936971,["GJX@GJXAIOU",[[-1,35,"agl"]],[38,38],[35,35]]],[1560146938244,["GJX@GJXAIOU",[[1,35,"lags"]],[35,35],[39,39]]],[1560146938708,["GJX@GJXAIOU",[[-1,38,"s"]],[39,39],[38,38]]],[1560146941909,["GJX@GJXAIOU",[[1,38,": green"]],[38,38],[45,45]]],[1560146942444,["GJX@GJXAIOU",[[1,46,"\n"]],[45,45],[46,46]]],[1560146952940,["GJX@GJXAIOU",[[1,46,"data: '2019-6-10'"]],[46,46],[63,63]]],[1560146957535,["GJX@GJXAIOU",[[-1,72,"\n"]],[72,72],[71,71]]],[1560146957656,["GJX@GJXAIOU",[[-1,71,"\n"]],[71,71],[70,70]]],[1560146957789,["GJX@GJXAIOU",[[-1,70,"\n"]],[70,70],[69,69]]],[1560146958083,["GJX@GJXAIOU",[[-1,69,"\n"]],[69,69],[68,68]]],[1560146961293,["GJX@GJXAIOU",[[1,82,"## yi"]],[82,82],[87,87]]],[1560146962003,["GJX@GJXAIOU",[[-1,85,"yi"]],[87,87],[85,85]]],[1560146964689,["GJX@GJXAIOU",[[1,85,"一、题目"]],[85,85],[89,89]]],[1560146965046,["GJX@GJXAIOU",[[1,91,"\n"]],[89,89],[90,90]]],[1560146965181,["GJX@GJXAIOU",[[1,92,"\n"]],[90,90],[91,91]]],[1560146976472,["GJX@GJXAIOU",[[1,91,"斐波那契数，通常用 F(n) 表示，形成的序列称为斐波那契数列。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是：\n\nF(0) = 0,   F(1) = 1\nF(N) = F(N - 1) + F(N - 2), 其中 N > 1.\n给定 N，计算 F(N)。\n\n \n\n示例 1：\n\n输入：2\n输出：1\n解释：F(2) = F(1) + F(0) = 1 + 0 = 1.\n示例 2：\n\n输入：3\n输出：2\n解释：F(3) = F(2) + F(1) = 1 + 1 = 2.\n示例 3：\n\n输入：4\n输出：3\n解释：F(4) = F(3) + F(2) = 2 + 1 = 3.\n \n\n提示：\n\n0 ≤ N ≤ 30\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/fibonacci-number\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。"]],[91,91],[518,518]]],[1560146983001,["GJX@GJXAIOU",[[-1,100," "],[1,101," "],[-1,127," "],[1,128," "],[1,162,"·"],[-1,171,"   "],[1,174,"   "],[-1,178," "],[1,179," "],[-1,223," "],[1,224," "],[-1,228," "],[1,229," "],[-1,236," "],[1,237," "],[-1,395," "],[1,396," "]],[162,162],[163,163]]],[1560146984187,["GJX@GJXAIOU",[[-1,162,"·"]],[163,163],[162,162]]],[1560146984614,["GJX@GJXAIOU",[[1,162,"`"]],[162,162],[163,163]]],[1560146985764,["GJX@GJXAIOU",[[1,183,"`"]],[183,183],[184,184]]],[1560146987348,["GJX@GJXAIOU",[[1,185,"`"]],[185,185],[186,186]]],[1560146988564,["GJX@GJXAIOU",[[1,223,"`"]],[223,223],[224,224]]],[1560146990316,["GJX@GJXAIOU",[[1,225,"`"]],[225,225],[226,226]]],[1560146992519,["GJX@GJXAIOU",[[1,239,"`"]],[239,239],[240,240]]],[1560146995509,["GJX@GJXAIOU",[[1,245,"- "]],[245,245],[247,247]]],[1560146998532,["GJX@GJXAIOU",[[1,299,"\n"]],[299,299],[300,300]]],[1560146998999,["GJX@GJXAIOU",[[1,300,"- "]],[300,300],[302,302]]],[1560147003203,["GJX@GJXAIOU",[[1,354,"\n"]],[354,354],[355,355]]],[1560147003709,["GJX@GJXAIOU",[[1,355,"- "]],[355,355],[357,357]]],[1560147005564,["GJX@GJXAIOU",[[-1,308,"\n"]],[308,308],[307,307]]],[1560147006556,["GJX@GJXAIOU",[[-1,253,"\n"]],[253,253],[252,252]]],[1560147007756,["GJX@GJXAIOU",[[-1,361,"\n"]],[361,361],[360,360]]],[1560147011317,["GJX@GJXAIOU",[[1,409,"- "]],[409,409],[411,411]]],[1560147013299,["GJX@GJXAIOU",[[-1,415,"\n"]],[415,415],[414,414]]],[1560147016818,["GJX@GJXAIOU",[[-1,427,"来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/fibonacci-number\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。"]],[427,530],[427,427]]],[1560147019732,["GJX@GJXAIOU",[[1,427,"## er"]],[427,427],[432,432]]],[1560147020454,["GJX@GJXAIOU",[[-1,430,"er"]],[432,432],[430,430]]],[1560147022991,["GJX@GJXAIOU",[[1,430,"二、解答"]],[430,430],[434,434]]],[1560147023411,["GJX@GJXAIOU",[[1,436,"\n"]],[434,434],[435,435]]],[1560147023532,["GJX@GJXAIOU",[[1,437,"\n"]],[435,435],[436,436]]],[1560147766529,["GJX@GJXAIOU",[[1,438,"\n"]],[435,435],[436,436]]],[1560147766650,["GJX@GJXAIOU",[[1,439,"\n"]],[436,436],[437,437]]],[1560147769764,["GJX@GJXAIOU",[[1,437,"****"]],[437,437],[439,439]]],[1560147774725,["GJX@GJXAIOU",[[1,439,"整体方案："]],[439,439],[444,444]]],[1560147783695,["GJX@GJXAIOU",[[1,446," 迭代和递归"]],[446,446],[452,452]]],[1560147785028,["GJX@GJXAIOU",[[1,455,"\n"]],[452,452],[453,453]]],[1560147792395,["GJX@GJXAIOU",[[1,456,"\n"]],[453,453],[454,454]]],[1560147792515,["GJX@GJXAIOU",[[1,457,"\n"]],[454,454],[455,455]]],[1560147792626,["GJX@GJXAIOU",[[1,458,"\n"]],[455,455],[456,456]]],[1560147792755,["GJX@GJXAIOU",[[1,459,"\n"]],[456,456],[457,457]]],[1560147792874,["GJX@GJXAIOU",[[1,460,"\n"]],[457,457],[458,458]]],[1560147793003,["GJX@GJXAIOU",[[1,461,"\n"]],[458,458],[459,459]]],[1560147793131,["GJX@GJXAIOU",[[1,462,"\n"]],[459,459],[460,460]]],[1560147793266,["GJX@GJXAIOU",[[1,463,"\n"]],[460,460],[461,461]]],[1560147794005,["GJX@GJXAIOU",[[1,461,"--"]],[461,461],[463,463]]],[1560147795146,["GJX@GJXAIOU",[[-1,461,"--"]],[463,463],[461,461]]],[1560147797012,["GJX@GJXAIOU",[[1,461,"****"]],[461,461],[463,463]]],[1560147804639,["GJX@GJXAIOU",[[1,463,"个人解法：递归："]],[463,463],[471,471]]],[1560147805250,["GJX@GJXAIOU",[[-1,470,"："]],[471,471],[470,470]]],[1560147806969,["GJX@GJXAIOU",[[1,475,"\n"]],[472,472],[473,473]]],[1560147807115,["GJX@GJXAIOU",[[1,476,"\n"]],[473,473],[474,474]]],[1560147808580,["GJX@GJXAIOU",[[1,474,"```"]],[474,474],[477,477]]],[1560147808605,["GJX@GJXAIOU",[[1,477,"language\n```\n"]],[477,477],[477,485]]],[1560147809651,["GJX@GJXAIOU",[[-1,477,"language"],[1,485,"j"]],[477,485],[478,478]]],[1560147809995,["GJX@GJXAIOU",[[1,478,"ava"]],[478,478],[481,481]]],[1560147810061,["GJX@GJXAIOU",[[1,482,"\n"]],[481,481],[482,482]]],[1560147815299,["GJX@GJXAIOU",[[1,482,"class Solution {\n    public int fib(int N) {\n        if (N == 0) {\n            return 0;\n        }else if (N == 1) {\n            return 1;\n        }else{\n           return fib(N - 1) + fib(N - 2);\n        }\n    }\n}"]],[482,482],[696,696]]],[1560147822568,["GJX@GJXAIOU",[[1,704,"\n"]],[700,700],[701,701]]],[1560147823075,["GJX@GJXAIOU",[[1,705,"\n"]],[701,701],[702,702]]],[1560147837770,["GJX@GJXAIOU",[[1,702,"执行用时 : 14 ms, 在Fibonacci Number的Java提交中击败了37.92% 的用户\n\n内存消耗 : 31.8 MB, 在Fibonacci Number的Java提交中击败了96.00% 的用户"]],[702,702],[810,810]]],[1560147848940,["GJX@GJXAIOU",[[1,461,"\n"]],[453,453],[454,454]]],[1560147862710,["GJX@GJXAIOU",[[1,455,"递归时间久但不需要额外空间, 迭代时间少, 但需要额外空间\n\n    /**\n     * 迭代\n     * @param N 位置\n     * @return int\n     */\n    public int fib(int N) {\n        int[] fib = new int[N + 2];\n        fib[0] = 0;\n        fib[1] = 1;\n        if (N < 2) return fib[N];\n        for (int i = 2; i <= N; i++) {\n            fib[i] = fib[i-1] + fib[i-2];\n        }\n        return fib[N-1] + fib[N-2];\n    }\n\n    /**\n     * 递归\n     * @param N 位置\n     * @return int\n     */\n    public int fib2(int N) {\n        if (N == 1) return 1;\n        if (N == 0) return 0;\n        return fib(N - 1) + fib(N - 2);\n    }\n\n作者：nza\n链接：https://leetcode-cn.com/problems/two-sum/solution/die-dai-huo-zhe-di-gui-by-pepsi-3/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[455,455],[1167,1167]]],[1560147866100,["GJX@GJXAIOU",[[1,485,"`"],[-1,1421," "],[1,1422," "],[-1,1463," "],[1,1464," "],[-1,1475," "],[1,1476," "],[-1,1519," "],[1,1520," "]],[485,485],[486,486]]],[1560147868086,["GJX@GJXAIOU",[[1,486,"``java"]],[486,486],[492,492]]],[1560147872547,["GJX@GJXAIOU",[[1,1028,"```"]],[1028,1028],[1031,1031]]],[1560147930356,["GJX@GJXAIOU",[[1,452,"huozhe"]],[452,452],[458,458]]],[1560147931409,["GJX@GJXAIOU",[[-1,452,"huozhe"]],[458,458],[452,452]]],[1560147934632,["GJX@GJXAIOU",[[1,452,"或者冬天"]],[452,452],[456,456]]],[1560147935624,["GJX@GJXAIOU",[[-1,454,"冬天"]],[456,456],[454,454]]],[1560147937738,["GJX@GJXAIOU",[[1,454,"动态"]],[454,454],[456,456]]],[1560147940343,["GJX@GJXAIOU",[[1,461,"\n"]],[458,458],[459,459]]],[1560147941310,["GJX@GJXAIOU",[[1,462,"\n"]],[459,459],[460,460]]],[1560147946342,["GJX@GJXAIOU",[[1,460,"- 动态规划："]],[460,460],[467,467]]],[1560147946659,["GJX@GJXAIOU",[[1,468,"- \n"]],[467,467],[470,470]]],[1560147947941,["GJX@GJXAIOU",[[-1,468,"- "]],[470,470],[468,468]]],[1560147949920,["GJX@GJXAIOU",[[1,468,"不能使用递归f(n) = f(n-1) + f(n-2)的原因：会造成大量重复计算，导致时间复杂度为O(2^n)。\n\n使用动态规划消除重复计算，可使时间复杂度优化至O(n)。可用数组保存计算结果，则空间复杂度为O(n)。此处进一步简化，只使用两个变量保存结果，因此空间复杂度为O(1)。\n\nclass Solution {\n    public int fib(int N) {\n        int curr = 0, next = 1;\n        while(N-- > 0) {\n            next = next + curr;\n            curr = next - curr;\n        }\n        return curr;\n    }\n}\n\n作者：scvthedefect\n链接：https://leetcode-cn.com/problems/two-sum/solution/dong-tai-gui-hua-by-scvthedefect/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[468,468],[972,972]]],[1560147954427,["GJX@GJXAIOU",[[1,612,"··"]],[612,612],[614,614]]],[1560147955684,["GJX@GJXAIOU",[[-1,612,"··"]],[614,614],[612,612]]],[1560147958954,["GJX@GJXAIOU",[[1,612,"```java"]],[612,612],[619,619]]],[1560147962442,["GJX@GJXAIOU",[[1,825,"```"]],[825,825],[828,828]]],[1560147966345,["GJX@GJXAIOU",[[1,985,"\n"]],[984,984],[985,985]]],[1560147969914,["GJX@GJXAIOU",[[1,984,"- dui"]],[984,984],[989,989]]],[1560147970355,["GJX@GJXAIOU",[[-1,986,"dui"]],[989,989],[986,986]]],[1560147975603,["GJX@GJXAIOU",[[1,986,"递归和迭代的比较"]],[986,986],[994,994]]],[1560147985027,["GJX@GJXAIOU",[[1,18,"完成"]],[18,18],[20,20]]],[1560147990085,["GJX@GJXAIOU",[[1,36,"\n"]],[34,34],[35,35]]],[1560147991931,["GJX@GJXAIOU",[[1,35,"- "]],[35,35],[37,37]]],[1560148058958,[null,[[1,461,"规划"],[-1,463,"\n递"],[-1,472,"归"],[1,473,"\n"],[1,1001,"递归"]],[461,461],[1003,1003]]],[1560148058959,[null,[[-1,461,"规划"],[1,465,"\n递"],[1,472,"归"],[-1,472,"\n"],[-1,1001,"递归"]],[1003,1003],[461,461]]],[1560148013984,["GJX@GJXAIOU",[[1,37,"动态规划"]],[37,37],[41,41]]],[1560148358989,[null,[[1,465,"规划"],[-1,467,"\n递"],[-1,476,"归"],[1,477,"\n"],[1,1005,"递归"]],[465,465],[1007,1007]]],[1560148358989,[null,[[-1,465,"规划"],[1,469,"\n递"],[1,476,"归"],[-1,476,"\n"],[-1,1005,"递归"]],[1007,1007],[465,465]]],[1560148332259,["GJX@GJXAIOU",[[-1,941,"来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[941,991],[941,941]]],[1560148336300,["GJX@GJXAIOU",[[-1,1627,"来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[1627,1677],[1627,1627]]]],null,"GJX@GJXAIOU"],["b03768b4-b24a-46be-9c6c-3adbf2655add",1561359133659,"---\ntags: \n- 简单\n- 完成\n- 数组\n- 斐波那契数列\n- 动态规划\n\nflag: green\ndata: '2019-6-10'\n---\n\n# 509.斐波那契数\n\n## 一、题目\n\n斐波那契数，通常用 F(n) 表示，形成的序列称为斐波那契数列。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是：\n\n`F(0) = 0,   F(1) = 1`\n`F(N) = F(N - 1) + F(N - 2), 其中 N > 1.`\n`给定 N，计算 F(N)。`\n\n \n\n- 示例 1：\n输入：2\n输出：1\n解释：F(2) = F(1) + F(0) = 1 + 0 = 1.\n\n- 示例 2：\n输入：3\n输出：2\n解释：F(3) = F(2) + F(1) = 1 + 1 = 2.\n\n- 示例 3：\n输入：4\n输出：3\n解释：F(4) = F(3) + F(2) = 2 + 1 = 3.\n \n\n- 提示：\n0 ≤ N ≤ 30\n\n## 二、解答\n\n\n**整体方案：** 迭代和递归或者动态规划\n\n- 动态规划：\n不能使用递归f(n) = f(n-1) + f(n-2)的原因：会造成大量重复计算，导致时间复杂度为O(2^n)。\n\n使用动态规划消除重复计算，可使时间复杂度优化至O(n)。可用数组保存计算结果，则空间复杂度为O(n)。此处进一步简化，只使用两个变量保存结果，因此空间复杂度为O(1)。\n```java\nclass Solution {\n    public int fib(int N) {\n        int curr = 0, next = 1;\n        while(N-- > 0) {\n            next = next + curr;\n            curr = next - curr;\n        }\n        return curr;\n    }\n}\n```\n作者：scvthedefect\n链接：https://leetcode-cn.com/problems/two-sum/solution/dong-tai-gui-hua-by-scvthedefect/\n\n\n- 递归和迭代的比较\n\n递归时间久但不需要额外空间, 迭代时间少, 但需要额外空间\n```java\n    /**\n     * 迭代\n     * @param N 位置\n     * @return int\n     */\n    public int fib(int N) {\n        int[] fib = new int[N + 2];\n        fib[0] = 0;\n        fib[1] = 1;\n        if (N < 2) return fib[N];\n        for (int i = 2; i <= N; i++) {\n            fib[i] = fib[i-1] + fib[i-2];\n        }\n        return fib[N-1] + fib[N-2];\n    }\n\n    /**\n     * 递归\n     * @param N 位置\n     * @return int\n     */\n    public int fib2(int N) {\n        if (N == 1) return 1;\n        if (N == 0) return 0;\n        return fib(N - 1) + fib(N - 2);\n    }\n```\n作者：nza\n链接：https://leetcode-cn.com/problems/two-sum/solution/die-dai-huo-zhe-di-gui-by-pepsi-3/\n\n\n\n\n\n\n\n**个人解法：递归**\n\n```java\nclass Solution {\n    public int fib(int N) {\n        if (N == 0) {\n            return 0;\n        }else if (N == 1) {\n            return 1;\n        }else{\n           return fib(N - 1) + fib(N - 2);\n        }\n    }\n}\n```\n\n执行用时 : 14 ms, 在Fibonacci Number的Java提交中击败了37.92% 的用户\n\n内存消耗 : 31.8 MB, 在Fibonacci Number的Java提交中击败了96.00% 的用户\n\n\n\n",[[1561359100582,["GJX@GJXAIOU",[[1,55,"\n"]],[54,54],[55,55]]],[1561359105280,["GJX@GJXAIOU",[[1,55,"style: summer"]],[55,55],[68,68]]]],null,"GJX@GJXAIOU"]]}