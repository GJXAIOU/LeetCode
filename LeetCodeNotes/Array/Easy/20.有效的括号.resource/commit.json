{"compress":true,"commitItems":[["32ca2c93-f43a-47bf-9a18-7d96eae344a9",1559811905233,"",[[1559811856992,["GJX@GJXAIOU",[[1,0,"# 6.有效的括号\n\n\n\n"]],[0,0],[12,12]]],[1559811859663,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1559811859799,["GJX@GJXAIOU",[[1,0,"\n"]],[1,1],[2,2]]],[1559811860006,["GJX@GJXAIOU",[[1,2,"\n"]],[2,2],[3,3]]],[1559811861416,["GJX@GJXAIOU",[[1,0,"·"]],[0,0],[1,1]]],[1559811861641,["GJX@GJXAIOU",[[1,0,"·"]],[1,1],[2,2]]],[1559811862923,["GJX@GJXAIOU",[[-1,0,"··"]],[2,2],[0,0]]],[1559811864705,["GJX@GJXAIOU",[[1,0,"-"]],[0,0],[1,1]]],[1559811864857,["GJX@GJXAIOU",[[1,0,"-"]],[1,1],[2,2]]],[1559811865009,["GJX@GJXAIOU",[[1,2,"-"]],[2,2],[3,3]]],[1559811865031,["GJX@GJXAIOU",[[1,5,"---\n\n\n"]],[3,3],[4,4]]],[1559811916545,["GJX@GJXAIOU",[[1,4,"tags: "]],[4,4],[10,10]]],[1559811917728,["GJX@GJXAIOU",[[1,11,"\n"]],[10,10],[11,11]]],[1559811921985,["GJX@GJXAIOU",[[1,11,"flg"]],[11,11],[14,14]]],[1559811922631,["GJX@GJXAIOU",[[-1,13,"g"]],[14,14],[13,13]]],[1559811928128,["GJX@GJXAIOU",[[1,13,"ag: green"]],[13,13],[22,22]]],[1559811928712,["GJX@GJXAIOU",[[1,23,"\n"]],[22,22],[23,23]]],[1559811944841,["GJX@GJXAIOU",[[1,23,"data: '2019-6-6'"]],[23,23],[39,39]]],[1559811962759,["GJX@GJXAIOU",[[1,60,"\n"]],[57,57],[58,58]]],[1559811962890,["GJX@GJXAIOU",[[1,61,"\n"]],[58,58],[59,59]]],[1559811964224,["GJX@GJXAIOU",[[1,59,"## "]],[59,59],[62,62]]],[1559811965977,["GJX@GJXAIOU",[[1,62,"yi "]],[62,62],[65,65]]],[1559811967073,["GJX@GJXAIOU",[[-1,62,"yi "]],[65,65],[62,62]]],[1559811969738,["GJX@GJXAIOU",[[1,62,"一、题吗"]],[62,62],[66,66]]],[1559811970104,["GJX@GJXAIOU",[[1,69,"\n"]],[66,66],[67,67]]],[1559811970239,["GJX@GJXAIOU",[[1,70,"\n"]],[67,67],[68,68]]],[1559811970633,["GJX@GJXAIOU",[[-1,70,"\n"]],[68,68],[67,67]]],[1559811970753,["GJX@GJXAIOU",[[-1,69,"\n"]],[67,67],[66,66]]],[1559811971665,["GJX@GJXAIOU",[[-1,64,"题吗"]],[66,66],[64,64]]],[1559811973037,["GJX@GJXAIOU",[[1,64,"题目"]],[64,64],[66,66]]],[1559811973415,["GJX@GJXAIOU",[[1,69,"\n"]],[66,66],[67,67]]],[1559811973531,["GJX@GJXAIOU",[[1,70,"\n"]],[67,67],[68,68]]],[1559811973863,["GJX@GJXAIOU",[[1,71,"\n"]],[68,68],[69,69]]],[1559811979771,["GJX@GJXAIOU",[[1,69,"## 二、解答"]],[69,69],[76,76]]],[1559811981994,["GJX@GJXAIOU",[[1,69,"\n"]],[68,68],[69,69]]],[1559811982127,["GJX@GJXAIOU",[[1,70,"\n"]],[69,69],[70,70]]],[1559811982255,["GJX@GJXAIOU",[[1,71,"\n"]],[70,70],[71,71]]],[1559811984317,["GJX@GJXAIOU",[[1,68,"给定一个只包括 `'('`，`')'`，`'{'`，`'}'`，`'['`，`']'` 的字符串，判断字符串是否有效。\n\n有效字符串需满足：\n\n1.  左括号必须用相同类型的右括号闭合。\n2.  左括号必须以正确的顺序闭合。\n\n注意空字符串可被认为是有效字符串。\n\n**示例 1:**\n\n**输入:** \"()\"\n**输出:** true\n\n**示例 2:**\n\n**输入:** \"()[]{}\"\n**输出:** true\n\n**示例 3:**\n\n**输入:** \"(]\"\n**输出:** false\n\n**示例 4:**\n\n**输入:** \"([)]\"\n**输出:** false\n\n**示例 5:**\n\n**输入:** \"{[]}\"\n**输出:** true"]],[68,68],[399,399]]]],null,"GJX@GJXAIOU"],["8e7bebf8-14ea-48ca-b59f-74581439da4b",1559888499169,"---\ntags: \nflag: green\ndata: '2019-6-6'\n---\n\n\n\n# 6.有效的括号\n\n\n## 一、题目\n\n给定一个只包括 `'('`，`')'`，`'{'`，`'}'`，`'['`，`']'` 的字符串，判断字符串是否有效。\n\n有效字符串需满足：\n\n1.  左括号必须用相同类型的右括号闭合。\n2.  左括号必须以正确的顺序闭合。\n\n注意空字符串可被认为是有效字符串。\n\n**示例 1:**\n\n**输入:** \"()\"\n**输出:** true\n\n**示例 2:**\n\n**输入:** \"()[]{}\"\n**输出:** true\n\n**示例 3:**\n\n**输入:** \"(]\"\n**输出:** false\n\n**示例 4:**\n\n**输入:** \"([)]\"\n**输出:** false\n\n**示例 5:**\n\n**输入:** \"{[]}\"\n**输出:** true\n\n\n\n## 二、解答\n\n\n",[[1559888455341,["GJX@GJXAIOU",[[1,412,"思路\n\n想象一下，你正在为你的大学课设编写一个小型编译器，编译器的任务之一（或称子任务）将检测括号是否匹配。\n\n我们本文中看到的算法可用于处理编译器正在编译的程序中的所有括号，并检查是否所有括号都已配对。这将检查给定的括号字符串是否有效，是一个重要的编程问题。\n\n我们这个问题中将要处理的表达式可以包含以下三种不同类型的括号：\n\n()，\n{} 以及\n[]\n在查看如何检查由这些括号组成的给定表达式是否有效之前，让我们看一下该问题的简化版本，在简化后的问题中，只含一种类型的括号。这么一来，我们将会遇到的表达式是\n\n(((((()))))) -- VALID\n\n()()()()     -- VALID\n\n(((((((()    -- INVALID\n\n((()(())))   -- VALID\n上我们试着用一个简单的算法来解决这一问题。\n\n我们从表达式的左侧开始，每次只处理一个括号。\n假设我们遇到一个开括号（即 (），表达式是否无效取决于在该表达式的其余部分的某处是否有相匹配的闭括号（即 )）。此时，我们只是增加计数器的值保持跟踪现在为止开括号的数目。left += 1\n如果我们遇到一个闭括号，这可能意味着这样两种情况：\n此闭括号没有与与之对应的开括号，在这种情况下，我们的表达式无效。当 left == 0，也就是没有未配对的左括号可用时就是这种情况。\n我们有一些未配对的开括号可以与该闭括号配对。当 left > 0，也就是有未配对的左括号可用时就是这种情况。\n如果我们在 left == 0 时遇到一个闭括号（例如 )），那么当前的表达式无效。否则，我们会减少 left 的值，也就是减少了可用的未配对的左括号的数量。\n继续处理字符串，直到处理完所有括号。\n如果最后我们仍然有未配对的左括号，这意味着表达式无效。\n在这里讨论这个特定算法是因为我们从该解决方案中获得灵感以解决原始问题。为了更好地理解我们讨论的算法，请观看下面的动画演示。\n\n\n1 / 12\n如果我们只是尝试对原始问题采用相同的办法，这是根本就行不通的。基于简单计数器的方法能够在上面完美运行是因为所有括号都具有相同的类型。因此，当我们遇到一个闭括号时，我们只需要假设有一个对应匹配的开括号是可用的，即假设 left > 0。\n\n但是，在我们的问题中，如果我们遇到 ]，我们真的不知道是否有相应的 [ 可用。你可能会问：\n\n为什么不为不同类型的括号分别维护一个单独的计数器？\n\n这可能不起作用，因为括号的相对位置在这里也很重要。例如：\n\n[{]\n如果我们只是在这里维持计数器，那么只要我们遇到闭合方括号，我们就会知道此处有一个可用的未配对的开口方括号。但是，最近的未配对的开括号是一个花括号，而不是一个方括号，因此计数方法在这里被打破了。\n\n方法：栈\n关于有效括号表达式的一个有趣属性是有效表达式的子表达式也应该是有效表达式。（不是每个子表达式）例如\n\n\n\n此外，如果仔细查看上述结构，颜色标识的单元格将标记开闭的括号对。整个表达式是有效的，而它的子表达式本身也是有效的。这为问题提供了一种递归结构。例如，考虑上图中两个绿色括号内的表达式。开括号位于索引 1，相应闭括号位于索引 6。\n\n如果每当我们在表达式中遇到一对匹配的括号时，我们只是从表达式中删除它，会发生什么？\n\n让我们看看下面的这个想法，从整体表达式中一次删除一个较小的表达式，因为这是一个有效的表达式，我们最后剩留下一个空字符串。\n\n\n2 / 5\n在表示问题的递归结构时，栈数据结构可以派上用场。我们无法真正地从内到外处理这个问题，因为我们对整体结构一无所知。但是，栈可以帮助我们递归地处理这种情况，即从外部到内部。\n\n让我们看看使用栈作为该问题的中间数据结构的算法。\n\n算法\n\n初始化栈 S。\n一次处理表达式的每个括号。\n如果遇到开括号，我们只需将其推到栈上即可。这意味着我们将稍后处理它，让我们简单地转到前面的 子表达式。\n如果我们遇到一个闭括号，那么我们检查栈顶的元素。如果栈顶的元素是一个 相同类型的 左括号，那么我们将它从栈中弹出并继续处理。否则，这意味着表达式无效。\n如果到最后我们剩下的栈中仍然有元素，那么这意味着表达式无效。\n我们来看一下该算法的动画演示，然后转到实现部分。\n\n\n10 / 12\n现在让我们看看该算法是如何实现的。\n\nJavaPython\nclass Solution {\n\n  // Hash table that takes care of the mappings.\n  private HashMap<Character, Character> mappings;\n\n  // Initialize hash map with mappings. This simply makes the code easier to read.\n  public Solution() {\n    this.mappings = new HashMap<Character, Character>();\n    this.mappings.put(')', '(');\n    this.mappings.put('}', '{');\n    this.mappings.put(']', '[');\n  }\n\n  public boolean isValid(String s) {\n\n    // Initialize a stack to be used in the algorithm.\n    Stack<Character> stack = new Stack<Character>();\n\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n\n      // If the current character is a closing bracket.\n      if (this.mappings.containsKey(c)) {\n\n        // Get the top element of the stack. If the stack is empty, set a dummy value of '#'\n        char topElement = stack.empty() ? '#' : stack.pop();\n\n        // If the mapping for this bracket doesn't match the stack's top element, return false.\n        if (topElement != this.mappings.get(c)) {\n          return false;\n        }\n      } else {\n        // If it was an opening bracket, push to the stack.\n        stack.push(c);\n      }\n    }\n\n    // If the stack still contains elements, then it is an invalid expression.\n    return stack.isEmpty();\n  }\n}\n复杂度分析\n\n时间复杂度：O(n)O(n)，因为我们一次只遍历给定的字符串中的一个字符并在栈上进行 O(1)O(1) 的推入和弹出操作。\n空间复杂度：O(n)O(n)，当我们将所有的开括号都推到栈上时以及在最糟糕的情况下，我们最终要把所有括号推到栈上。例如 ((((((((((。\n\n作者：LeetCode\n链接：https://leetcode-cn.com/problems/two-sum/solution/you-xiao-de-gua-hao-by-leetcode/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[412,412],[3774,3774]]],[1559888482520,["GJX@GJXAIOU",[[1,412,"**"],[1,414,"**"]],[412,414],[412,418]]],[1559888492447,["GJX@GJXAIOU",[[-1,580,"\n"]],[580,580],[579,579]]],[1559888496176,["GJX@GJXAIOU",[[-1,583,"\n"]],[584,584],[583,583]]],[1559888497271,["GJX@GJXAIOU",[[-1,588,"\n"]],[589,589],[588,588]]],[1559888500096,["GJX@GJXAIOU",[[-1,579,"\n"]],[580,580],[579,579]]],[1559888500784,["GJX@GJXAIOU",[[-1,75," "],[1,76," "],[-1,111," "],[1,112," "],[-1,243," "],[1,244," "],[-1,285," "],[1,286," "],[-1,324," "],[1,325," "],[-1,365," "],[1,366," "],[-1,548,""],[1,579,"·"]],[579,579],[580,580]]],[1559888501999,["GJX@GJXAIOU",[[-1,579,"·"]],[580,580],[579,579]]],[1559888502633,["GJX@GJXAIOU",[[1,579,"`"]],[579,579],[580,580]]],[1559888504506,["GJX@GJXAIOU",[[1,590,"`"]],[590,590],[591,591]]],[1559888518319,["GJX@GJXAIOU",[[1,671,"`"]],[671,671],[672,672]]],[1559888520524,["GJX@GJXAIOU",[[1,695,"`"]],[695,695],[696,696]]],[1559888524324,["GJX@GJXAIOU",[[1,719,"`"]],[719,719],[720,720]]],[1559888528570,["GJX@GJXAIOU",[[1,745,"`"]],[745,745],[746,746]]],[1559888531624,["GJX@GJXAIOU",[[-1,744,"\n"]],[744,744],[744,744]]],[1559888534388,["GJX@GJXAIOU",[[-1,718,"\n"]],[718,718],[718,718]]],[1559888535777,["GJX@GJXAIOU",[[-1,694,"\n"]],[694,694],[694,694]]],[1559888539290,["GJX@GJXAIOU",[[1,716,"`"]],[716,716],[717,717]]],[1559888540162,["GJX@GJXAIOU",[[1,693,"`"]],[693,693],[694,694]]],[1559888542585,["GJX@GJXAIOU",[[1,743,"`"]],[743,743],[744,744]]],[1559888543282,["GJX@GJXAIOU",[[1,767,"`"]],[767,767],[768,768]]],[1559888557891,["GJX@GJXAIOU",[[1,830,"``"]],[830,830],[831,831]]],[1559888559234,["GJX@GJXAIOU",[[-1,831,"`"]],[831,831],[830,830]]],[1559888560066,["GJX@GJXAIOU",[[1,829,"`"]],[829,829],[830,830]]],[1559888565285,["GJX@GJXAIOU",[[1,870,"`"]],[870,870],[871,871]]],[1559888566291,["GJX@GJXAIOU",[[1,872,"`"]],[872,872],[873,873]]],[1559888573402,["GJX@GJXAIOU",[[1,792,"1."]],[792,792],[794,794]]],[1559888577874,["GJX@GJXAIOU",[[1,817,"2."]],[817,817],[819,819]]],[1559888582763,["GJX@GJXAIOU",[[1,918,"3."]],[918,918],[920,920]]],[1559888592173,["GJX@GJXAIOU",[[1,946,"  - "]],[946,946],[950,950]]],[1559888596738,["GJX@GJXAIOU",[[1,1017,"- "]],[1017,1017],[1019,1019]]],[1559888598472,["GJX@GJXAIOU",[[1,1017,"  "]],[1019,1019],[1021,1021]]],[1559888609042,["GJX@GJXAIOU",[[1,1076,"3."]],[1076,1076],[1078,1078]]],[1559888613006,["GJX@GJXAIOU",[[1,1076,"  - \n"]],[1075,1075],[1080,1080]]],[1559888619873,["GJX@GJXAIOU",[[-1,1076,"  - "]],[1076,1080],[1076,1076]]],[1559888622563,["GJX@GJXAIOU",[[-1,1077,"3"]],[1078,1078],[1077,1077]]],[1559888622802,["GJX@GJXAIOU",[[1,1077,"4"]],[1077,1077],[1078,1078]]],[1559888627738,["GJX@GJXAIOU",[[1,1159,"6"]],[1159,1159],[1160,1160]]],[1559888630051,["GJX@GJXAIOU",[[-1,1159,"6"]],[1160,1160],[1159,1159]]],[1559888630882,["GJX@GJXAIOU",[[1,1159,"5."]],[1159,1159],[1161,1161]]],[1559888633594,["GJX@GJXAIOU",[[1,1180,"6."]],[1180,1180],[1182,1182]]],[1559888637500,["GJX@GJXAIOU",[[1,1210,"\n"]],[1209,1209],[1210,1210]]],[1559888691546,["GJX@GJXAIOU",[[1,1273,"https://pic.leetcode-cn.com/Figures/20/SIMPLE-3.png"]],[1273,1273],[1324,1324]]],[1559888704679,["GJX@GJXAIOU",[[-1,1273,"https://pic.leetcode-cn.com/Figures/20/SIMPLE-3.png"]],[1273,1324],[1273,1273]]],[1559888715482,["GJX@GJXAIOU",[[-1,1275,"1 / 12"]],[1275,1281],[1275,1275]]],[1559888719233,["GJX@GJXAIOU",[[1,1384,"·"]],[1384,1384],[1385,1385]]],[1559888722249,["GJX@GJXAIOU",[[-1,1384,"·"]],[1385,1385],[1384,1384]]],[1559888722945,["GJX@GJXAIOU",[[1,1384,"`"]],[1384,1384],[1385,1385]]],[1559888725793,["GJX@GJXAIOU",[[1,1393,"`"]],[1393,1393],[1394,1394]]],[1559888730469,["GJX@GJXAIOU",[[1,1415,"`"]],[1415,1415],[1416,1416]]],[1559888731811,["GJX@GJXAIOU",[[1,1417,"`"]],[1417,1417],[1418,1418]]],[1559888733178,["GJX@GJXAIOU",[[1,1433,"`"]],[1433,1433],[1434,1434]]],[1559888733955,["GJX@GJXAIOU",[[1,1436,"`"]],[1436,1436],[1437,1437]]],[1559888740015,["GJX@GJXAIOU",[[-1,1447,"\n"]],[1448,1448],[1447,1447]]],[1559888744616,["GJX@GJXAIOU",[[-1,1503,"\n"]],[1504,1504],[1503,1503]]],[1559888745008,["GJX@GJXAIOU",[[-1,1502,"\n"]],[1503,1503],[1502,1502]]],[1559888745448,["GJX@GJXAIOU",[[1,1502,"`"]],[1502,1502],[1503,1503]]],[1559888746811,["GJX@GJXAIOU",[[1,1506,"`"]],[1506,1506],[1507,1507]]],[1559888753393,["GJX@GJXAIOU",[[1,1508,"\n"]],[1507,1507],[1508,1508]]],[1559888761089,["GJX@GJXAIOU",[[-1,1565,"最近的未配对的开括号是一个花括号，而不是一个方括号"],[1,1590,"https://pic.leetcode-cn.com/Figures/20/SIMPLE-3.png"]],[1565,1590],[1616,1616]]],[1559888763154,["GJX@GJXAIOU",[[1,1565,"最近的未配对的开括号是一个花括号，而不是一个方括号"],[-1,1565,"https://pic.leetcode-cn.com/Figures/20/SIMPLE-3.png"]],[1616,1616],[1565,1590]]],[1559888763687,["GJX@GJXAIOU",[[1,1565,"**"],[1,1590,"**"]],[1565,1590],[1565,1594]]],[1559888769408,["GJX@GJXAIOU",[[1,1611,"**"],[1,1615,"**"]],[1611,1615],[1611,1619]]],[1559888790417,["GJX@GJXAIOU",[[1,1671,"![20-Valid-Parentheses-Recursive-Property]($resource/20-Valid-Parentheses-Recursive-Property.png)"]],[1671,1671],[1769,1769]]],[1559888810586,["GJX@GJXAIOU",[[1,1927,"gi"]],[1927,1927],[1929,1929]]],[1559888812330,["GJX@GJXAIOU",[[-1,1927,"gi"]],[1929,1929],[1927,1927]]],[1559889080276,["GJX@GJXAIOU",[[1,1274,"![算法演示]($resource/%E7%AE%97%E6%B3%95%E6%BC%94%E7%A4%BA.gif)"]],[1274,1274],[1334,1334]]],[1559889297932,["GJX@GJXAIOU",[[1,2050,"\n"]],[2048,2048],[2049,2049]]],[1559889304359,["GJX@GJXAIOU",[[1,2049,"![算法演示2]($resource/%E7%AE%97%E6%B3%95%E6%BC%94%E7%A4%BA2.gif)"]],[2049,2049],[2111,2111]]],[1559889311295,["GJX@GJXAIOU",[[-1,2112,"2 / 5"]],[2112,2117],[2112,2112]]],[1559889315504,["GJX@GJXAIOU",[[1,2225,"**"],[1,2227,"**"]],[2225,2227],[2225,2231]]],[1559889326207,["GJX@GJXAIOU",[[1,2233,"* "],[1,2241,"* "],[1,2255,"* "],[1,2307,"* "],[1,2383,"* "]],[2233,2413],[2235,2423]]],[1559889573232,["GJX@GJXAIOU",[[1,2451,"\n"]],[2449,2449],[2450,2450]]],[1559889580083,["GJX@GJXAIOU",[[1,2450,"![算法最终实现2]($resource/%E7%AE%97%E6%B3%95%E6%9C%80%E7%BB%88%E5%AE%9E%E7%8E%B02.gif)"]],[2450,2450],[2532,2532]]],[1559889584111,["GJX@GJXAIOU",[[-1,2533,"10 / 12"],[1,2540,"\n"]],[2533,2540],[2534,2534]]],[1559889588456,["GJX@GJXAIOU",[[1,2554,"```"]],[2554,2554],[2557,2557]]],[1559889588485,["GJX@GJXAIOU",[[1,2557,"language\n```\n"]],[2557,2557],[2557,2565]]],[1559889590929,["GJX@GJXAIOU",[[-1,2557,"language"],[1,2565,"J"]],[2557,2565],[2558,2558]]],[1559889591546,["GJX@GJXAIOU",[[1,2558,"ava"]],[2558,2558],[2561,2561]]],[1559889592430,["GJX@GJXAIOU",[[1,2562,"\n"]],[2561,2561],[2562,2562]]],[1559889595110,["GJX@GJXAIOU",[[-1,2567,"JavaPython"]],[2567,2577],[2567,2567]]],[1559889595615,["GJX@GJXAIOU",[[-1,2567,"\n"]],[2567,2567],[2566,2566]]],[1559889597457,["GJX@GJXAIOU",[[-1,2563,"```"]],[2563,2566],[2563,2563]]],[1559889602186,["GJX@GJXAIOU",[[1,3827,"\n"]],[3826,3826],[3827,3827]]],[1559889602335,["GJX@GJXAIOU",[[1,3828,"\n"]],[3827,3827],[3828,3828]]],[1559889602785,["GJX@GJXAIOU",[[1,3828,"```"]],[3828,3828],[3831,3831]]],[1559889607095,["GJX@GJXAIOU",[[-1,3849,"O(n)"]],[3849,3853],[3849,3849]]],[1559889609168,["GJX@GJXAIOU",[[-1,3882,"O(1)"]],[3878,3882],[3878,3878]]],[1559889611832,["GJX@GJXAIOU",[[1,3952,"`"]],[3952,3952],[3953,3953]]],[1559889614591,["GJX@GJXAIOU",[[-1,3953," "]],[3954,3954],[3953,3953]]],[1559889616864,["GJX@GJXAIOU",[[1,3963,"`"]],[3963,3963],[3964,3964]]],[1559889620200,["GJX@GJXAIOU",[[-1,3900,"(n)O"]],[3903,3903],[3899,3899]]],[1559889629174,["GJX@GJXAIOU",[[1,3839,"* "],[1,3893,"* "]],[3839,3961],[3841,3965]]],[1559889633534,["GJX@GJXAIOU",[[1,3832,"**"],[1,3837,"**"]],[3832,3837],[3832,3841]]],[1559889635352,["GJX@GJXAIOU",[[1,3832,"\n"]],[3832,3832],[3833,3833]]],[1559889638513,["GJX@GJXAIOU",[[1,4121,"\n"]],[4120,4120],[4121,4121]]],[1559889638647,["GJX@GJXAIOU",[[1,4122,"\n"]],[4121,4121],[4122,4122]]],[1559889638806,["GJX@GJXAIOU",[[1,4123,"\n"]],[4122,4122],[4123,4123]]],[1559889639047,["GJX@GJXAIOU",[[1,4124,"\n"]],[4123,4123],[4124,4124]]],[1559889639191,["GJX@GJXAIOU",[[1,4125,"\n"]],[4124,4124],[4125,4125]]],[1559889639295,["GJX@GJXAIOU",[[1,4126,"\n"]],[4125,4125],[4126,4126]]],[1559889639432,["GJX@GJXAIOU",[[1,4127,"\n"]],[4126,4126],[4127,4127]]],[1559889645082,["GJX@GJXAIOU",[[1,4127,"### fanan"]],[4127,4127],[4136,4136]]],[1559889646470,["GJX@GJXAIOU",[[-1,4131,"fanan"]],[4136,4136],[4131,4131]]],[1559889650219,["GJX@GJXAIOU",[[1,4131,"方案二："]],[4131,4131],[4135,4135]]],[1559889650732,["GJX@GJXAIOU",[[1,4136,"\n"]],[4135,4135],[4136,4136]]],[1559889697853,["GJX@GJXAIOU",[[1,4137,"\n"]],[4136,4136],[4137,4137]]],[1559889698688,["GJX@GJXAIOU",[[-1,4137,"\n"],[1,4138,"`"]],[4137,4137],[4138,4138]]],[1559889699055,["GJX@GJXAIOU",[[1,4138,"``"]],[4138,4138],[4140,4140]]],[1559889699086,["GJX@GJXAIOU",[[1,4140,"language\n```\n"]],[4140,4140],[4140,4148]]],[1559889701744,["GJX@GJXAIOU",[[-1,4140,"language"],[1,4148,"j"]],[4140,4148],[4141,4141]]],[1559889702177,["GJX@GJXAIOU",[[1,4141,"ava"]],[4141,4141],[4144,4144]]],[1559889702479,["GJX@GJXAIOU",[[1,4145,"\n"]],[4144,4144],[4145,4145]]],[1559889703680,["GJX@GJXAIOU",[[1,4145,"class Solution {\n    public boolean isValid(String s) {\n        \n        while (s.contains(\"{}\")||s.contains(\"[]\")|| s.contains(\"()\")){\n\n            if(s.contains(\"{}\")) s=s.replace(\"{}\",\"\");\n            if(s.contains(\"()\")) s=s.replace(\"()\",\"\");\n            if(s.contains(\"[]\")) s=s.replace(\"[]\",\"\");\n            \n        }\n\n        return s.isEmpty();\n    }\n}\n\n作者：td0Gn7z2GP\n链接：https://leetcode-cn.com/problems/two-sum/solution/you-xiao-de-gua-hao-java-by-td0gn7z2gp/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[4145,4145],[4665,4665]]],[1559889711480,["GJX@GJXAIOU",[[-1,4508,"作者：td0Gn7z2GP\n链接：https://leetcode-cn.com/problems/two-sum/solution/you-xiao-de-gua-hao-java-by-td0gn7z2gp/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n"]],[4507,4665],[4507,4507]]],[1559889713447,["GJX@GJXAIOU",[[1,4512,"\n"]],[4511,4511],[4512,4512]]],[1559889713550,["GJX@GJXAIOU",[[1,4513,"\n"]],[4512,4512],[4513,4513]]],[1559889713989,["GJX@GJXAIOU",[[1,4514,"作者：td0Gn7z2GP\n链接：https://leetcode-cn.com/problems/two-sum/solution/you-xiao-de-gua-hao-java-by-td0gn7z2gp/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n"]],[4513,4513],[4671,4671]]],[1559890109868,["GJX@GJXAIOU",[[-1,4209,"\n        "],[-1,4223," "],[-1,4237,"{}"],[1,4239,"()"],[1,4241," "],[1,4243," "],[1,4259," "],[-1,4274,"()"],[1,4276,"{}"],[-1,4281,"\n  "],[-1,4292,"  "],[1,4294,"\t"],[1,4296," "],[-1,4309,"{}"],[1,4311,"()"],[1,4315,"{\n        \t\t"],[1,4316," "],[1,4317," "],[-1,4328,"{}\","],[1,4332,"()\" , "],[1,4344," \t}\n"],[1,4349,"   \t"],[1,4351," "],[-1,4364,"()"],[1,4366,"[]"],[1,4370,"{\n        \t\t"],[1,4371," "],[1,4372," "],[-1,4383,"()\","],[1,4387,"[]\" , "],[1,4400,"\t}\n   "],[1,4404," \t"],[1,4406," "],[-1,4419,"[]"],[1,4421,"{}"],[1,4425,"{\n        \t\t"],[1,4426," "],[1,4427," "],[-1,4438,"[]\","],[1,4442,"{}\" , "],[-1,4455,"    "],[1,4459,"\t}"],[-1,4469,"\n"]],[4145,4506],[4559,4559]]],[1559890113785,["GJX@GJXAIOU",[[-1,4567,"作者：td0Gn7z2GP\n链接：https://leetcode-cn.com/problems/two-sum/solution/you-xiao-de-gua-hao-java-by-td0gn7z2gp/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n"]],[4566,4724],[4566,4566]]],[1559890114596,["GJX@GJXAIOU",[[-1,4566,"\n"]],[4566,4566],[4565,4565]]],[1559890120065,["GJX@GJXAIOU",[[1,4135,"ziji"]],[4135,4135],[4139,4139]]],[1559890121170,["GJX@GJXAIOU",[[-1,4134,"：ziji"]],[4139,4139],[4134,4134]]],[1559890125194,["GJX@GJXAIOU",[[1,4134,"：自己的，方式"]],[4134,4134],[4141,4141]]],[1559890125927,["GJX@GJXAIOU",[[-1,4139,"方式"]],[4141,4141],[4139,4139]]],[1559890127109,["GJX@GJXAIOU",[[1,4139,"但是"]],[4139,4139],[4141,4141]]],[1559890134355,["GJX@GJXAIOU",[[1,4141,"执行时间较长"]],[4141,4141],[4147,4147]]]],null,"GJX@GJXAIOU"],["9a88fa44-4c9f-45ee-909a-416686ec6dd3",1560058618333,"---\ntags: \nflag: green\ndata: '2019-6-6'\n---\n\n\n\n# 6.有效的括号\n\n\n## 一、题目\n\n给定一个只包括 `'('`，`')'`，`'{'`，`'}'`，`'['`，`']'` 的字符串，判断字符串是否有效。\n\n有效字符串需满足：\n\n1.  左括号必须用相同类型的右括号闭合。\n2.  左括号必须以正确的顺序闭合。\n\n注意空字符串可被认为是有效字符串。\n\n**示例 1:**\n\n**输入:** \"()\"\n**输出:** true\n\n**示例 2:**\n\n**输入:** \"()[]{}\"\n**输出:** true\n\n**示例 3:**\n\n**输入:** \"(]\"\n**输出:** false\n\n**示例 4:**\n\n**输入:** \"([)]\"\n**输出:** false\n\n**示例 5:**\n\n**输入:** \"{[]}\"\n**输出:** true\n\n\n\n## 二、解答\n\n**思路**\n\n想象一下，你正在为你的大学课设编写一个小型编译器，编译器的任务之一（或称子任务）将检测括号是否匹配。\n\n我们本文中看到的算法可用于处理编译器正在编译的程序中的所有括号，并检查是否所有括号都已配对。这将检查给定的括号字符串是否有效，是一个重要的编程问题。\n\n我们这个问题中将要处理的表达式可以包含以下三种不同类型的括号：`()，{} 以及[]`\n在查看如何检查由这些括号组成的给定表达式是否有效之前，让我们看一下该问题的简化版本，在简化后的问题中，只含一种类型的括号。这么一来，我们将会遇到的表达式是\n\n`(((((()))))) -- VALID`\n`()()()()     -- VALID`\n`(((((((()    -- INVALID`\n`((()(())))   -- VALID`\n上我们试着用一个简单的算法来解决这一问题。\n\n1.我们从表达式的左侧开始，每次只处理一个括号。\n2.假设我们遇到一个开括号（即 `(`），表达式是否无效取决于在该表达式的其余部分的某处是否有相匹配的闭括号（即 `)`）。此时，我们只是增加计数器的值保持跟踪现在为止开括号的数目。left += 1\n3.如果我们遇到一个闭括号，这可能意味着这样两种情况：\n  - 此闭括号没有与与之对应的开括号，在这种情况下，我们的表达式无效。当 left == 0，也就是没有未配对的左括号可用时就是这种情况。\n  - 我们有一些未配对的开括号可以与该闭括号配对。当 left > 0，也就是有未配对的左括号可用时就是这种情况。\n\n4.如果我们在 left == 0 时遇到一个闭括号（例如 )），那么当前的表达式无效。否则，我们会减少 left 的值，也就是减少了可用的未配对的左括号的数量。\n5.继续处理字符串，直到处理完所有括号。\n6.如果最后我们仍然有未配对的左括号，这意味着表达式无效。\n\n在这里讨论这个特定算法是因为我们从该解决方案中获得灵感以解决原始问题。为了更好地理解我们讨论的算法，请观看下面的动画演示。\n\n![算法演示]($resource/%E7%AE%97%E6%B3%95%E6%BC%94%E7%A4%BA.gif)\n\n如果我们只是尝试对原始问题采用相同的办法，这是根本就行不通的。基于简单计数器的方法能够在上面完美运行是因为所有括号都具有相同的类型。因此，当我们遇到一个闭括号时，我们只需要假设有一个对应匹配的开括号是可用的，即假设 `left > 0`。\n\n但是，在我们的问题中，如果我们遇到 `]`，我们真的不知道是否有相应的 `[ `可用。你可能会问：\n为什么不为不同类型的括号分别维护一个单独的计数器？\n\n这可能不起作用，因为括号的相对位置在这里也很重要。例如：`[{]`\n\n如果我们只是在这里维持计数器，那么只要我们遇到闭合方括号，我们就会知道此处有一个可用的未配对的开口方括号。但是，**最近的未配对的开括号是一个花括号，而不是一个方括号**，因此计数方法在这里被打破了。\n\n**方法：栈**\n关于有效括号表达式的一个有趣属性是有效表达式的子表达式也应该是有效表达式。（不是每个子表达式）例如\n\n![20-Valid-Parentheses-Recursive-Property]($resource/20-Valid-Parentheses-Recursive-Property.png)\n\n此外，如果仔细查看上述结构，颜色标识的单元格将标记开闭的括号对。整个表达式是有效的，而它的子表达式本身也是有效的。这为问题提供了一种递归结构。例如，考虑上图中两个绿色括号内的表达式。开括号位于索引 1，相应闭括号位于索引 6。\n\n如果每当我们在表达式中遇到一对匹配的括号时，我们只是从表达式中删除它，会发生什么？\n\n让我们看看下面的这个想法，从整体表达式中一次删除一个较小的表达式，因为这是一个有效的表达式，我们最后剩留下一个空字符串。\n\n![算法演示2]($resource/%E7%AE%97%E6%B3%95%E6%BC%94%E7%A4%BA2.gif)\n\n\n在表示问题的递归结构时，栈数据结构可以派上用场。我们无法真正地从内到外处理这个问题，因为我们对整体结构一无所知。但是，栈可以帮助我们递归地处理这种情况，即从外部到内部。\n\n让我们看看使用栈作为该问题的中间数据结构的算法。\n\n**算法**\n\n* 初始化栈 S。\n* 一次处理表达式的每个括号。\n* 如果遇到开括号，我们只需将其推到栈上即可。这意味着我们将稍后处理它，让我们简单地转到前面的 子表达式。\n* 如果我们遇到一个闭括号，那么我们检查栈顶的元素。如果栈顶的元素是一个 相同类型的 左括号，那么我们将它从栈中弹出并继续处理。否则，这意味着表达式无效。\n* 如果到最后我们剩下的栈中仍然有元素，那么这意味着表达式无效。\n我们来看一下该算法的动画演示，然后转到实现部分。\n\n![算法最终实现2]($resource/%E7%AE%97%E6%B3%95%E6%9C%80%E7%BB%88%E5%AE%9E%E7%8E%B02.gif)\n\n\n\n现在让我们看看该算法是如何实现的。\n\n```Java\n\n\nclass Solution {\n\n  // Hash table that takes care of the mappings.\n  private HashMap<Character, Character> mappings;\n\n  // Initialize hash map with mappings. This simply makes the code easier to read.\n  public Solution() {\n    this.mappings = new HashMap<Character, Character>();\n    this.mappings.put(')', '(');\n    this.mappings.put('}', '{');\n    this.mappings.put(']', '[');\n  }\n\n  public boolean isValid(String s) {\n\n    // Initialize a stack to be used in the algorithm.\n    Stack<Character> stack = new Stack<Character>();\n\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n\n      // If the current character is a closing bracket.\n      if (this.mappings.containsKey(c)) {\n\n        // Get the top element of the stack. If the stack is empty, set a dummy value of '#'\n        char topElement = stack.empty() ? '#' : stack.pop();\n\n        // If the mapping for this bracket doesn't match the stack's top element, return false.\n        if (topElement != this.mappings.get(c)) {\n          return false;\n        }\n      } else {\n        // If it was an opening bracket, push to the stack.\n        stack.push(c);\n      }\n    }\n\n    // If the stack still contains elements, then it is an invalid expression.\n    return stack.isEmpty();\n  }\n}\n\n```\n\n**复杂度分析**\n\n* 时间复杂度：O(n)，因为我们一次只遍历给定的字符串中的一个字符并在栈上进行 O(1) 的推入和弹出操作。\n* 空间复杂度：O(n)，当我们将所有的开括号都推到栈上时以及在最糟糕的情况下，我们最终要把所有括号推到栈上。例如`((((((((((`。\n\n作者：LeetCode\n链接：https://leetcode-cn.com/problems/two-sum/solution/you-xiao-de-gua-hao-by-leetcode/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n\n\n\n\n\n### 方案二：自己的，但是执行时间较长\n\n```java\nclass Solution {\n    public boolean isValid(String s) {\n        while(s.contains(\"()\") || s.contains(\"[]\") || s.contains(\"{}\")){\n        \tif (s.contains(\"()\")) {\n        \t\ts = s.replace(\"()\" , \"\");\n        \t}\n        \tif (s.contains(\"[]\")) {\n        \t\ts = s.replace(\"[]\" , \"\");\n        \t}\n        \tif (s.contains(\"{}\")) {\n        \t\ts = s.replace(\"{}\" , \"\");\n        \t}\n        }\n        return s.isEmpty();\n    }\n}\n\n```\n\n",[[1560058612063,["GJX@GJXAIOU",[[1,11,"\n"]],[10,10],[11,11]]],[1560058613398,["GJX@GJXAIOU",[[1,11,"  - "]],[11,11],[15,15]]],[1560058615132,["GJX@GJXAIOU",[[-1,14," "]],[15,15],[14,14]]],[1560058615957,["GJX@GJXAIOU",[[1,14," "]],[14,14],[15,15]]],[1560058619407,["GJX@GJXAIOU",[[1,15,"简单"]],[15,15],[17,17]]]],null,"GJX@GJXAIOU"],["3df630eb-6e2b-45d9-8d0e-116a1c13855e",1560157519517,"---\ntags: \n  - 简单\nflag: green\ndata: '2019-6-6'\n---\n\n\n\n# 6.有效的括号\n\n\n## 一、题目\n\n给定一个只包括 `'('`，`')'`，`'{'`，`'}'`，`'['`，`']'` 的字符串，判断字符串是否有效。\n\n有效字符串需满足：\n\n1.  左括号必须用相同类型的右括号闭合。\n2.  左括号必须以正确的顺序闭合。\n\n注意空字符串可被认为是有效字符串。\n\n**示例 1:**\n\n**输入:** \"()\"\n**输出:** true\n\n**示例 2:**\n\n**输入:** \"()[]{}\"\n**输出:** true\n\n**示例 3:**\n\n**输入:** \"(]\"\n**输出:** false\n\n**示例 4:**\n\n**输入:** \"([)]\"\n**输出:** false\n\n**示例 5:**\n\n**输入:** \"{[]}\"\n**输出:** true\n\n\n\n## 二、解答\n\n**思路**\n\n想象一下，你正在为你的大学课设编写一个小型编译器，编译器的任务之一（或称子任务）将检测括号是否匹配。\n\n我们本文中看到的算法可用于处理编译器正在编译的程序中的所有括号，并检查是否所有括号都已配对。这将检查给定的括号字符串是否有效，是一个重要的编程问题。\n\n我们这个问题中将要处理的表达式可以包含以下三种不同类型的括号：`()，{} 以及[]`\n在查看如何检查由这些括号组成的给定表达式是否有效之前，让我们看一下该问题的简化版本，在简化后的问题中，只含一种类型的括号。这么一来，我们将会遇到的表达式是\n\n`(((((()))))) -- VALID`\n`()()()()     -- VALID`\n`(((((((()    -- INVALID`\n`((()(())))   -- VALID`\n上我们试着用一个简单的算法来解决这一问题。\n\n1.我们从表达式的左侧开始，每次只处理一个括号。\n2.假设我们遇到一个开括号（即 `(`），表达式是否无效取决于在该表达式的其余部分的某处是否有相匹配的闭括号（即 `)`）。此时，我们只是增加计数器的值保持跟踪现在为止开括号的数目。left += 1\n3.如果我们遇到一个闭括号，这可能意味着这样两种情况：\n  - 此闭括号没有与与之对应的开括号，在这种情况下，我们的表达式无效。当 left == 0，也就是没有未配对的左括号可用时就是这种情况。\n  - 我们有一些未配对的开括号可以与该闭括号配对。当 left > 0，也就是有未配对的左括号可用时就是这种情况。\n\n4.如果我们在 left == 0 时遇到一个闭括号（例如 )），那么当前的表达式无效。否则，我们会减少 left 的值，也就是减少了可用的未配对的左括号的数量。\n5.继续处理字符串，直到处理完所有括号。\n6.如果最后我们仍然有未配对的左括号，这意味着表达式无效。\n\n在这里讨论这个特定算法是因为我们从该解决方案中获得灵感以解决原始问题。为了更好地理解我们讨论的算法，请观看下面的动画演示。\n\n![算法演示]($resource/%E7%AE%97%E6%B3%95%E6%BC%94%E7%A4%BA.gif)\n\n如果我们只是尝试对原始问题采用相同的办法，这是根本就行不通的。基于简单计数器的方法能够在上面完美运行是因为所有括号都具有相同的类型。因此，当我们遇到一个闭括号时，我们只需要假设有一个对应匹配的开括号是可用的，即假设 `left > 0`。\n\n但是，在我们的问题中，如果我们遇到 `]`，我们真的不知道是否有相应的 `[ `可用。你可能会问：\n为什么不为不同类型的括号分别维护一个单独的计数器？\n\n这可能不起作用，因为括号的相对位置在这里也很重要。例如：`[{]`\n\n如果我们只是在这里维持计数器，那么只要我们遇到闭合方括号，我们就会知道此处有一个可用的未配对的开口方括号。但是，**最近的未配对的开括号是一个花括号，而不是一个方括号**，因此计数方法在这里被打破了。\n\n**方法：栈**\n关于有效括号表达式的一个有趣属性是有效表达式的子表达式也应该是有效表达式。（不是每个子表达式）例如\n\n![20-Valid-Parentheses-Recursive-Property]($resource/20-Valid-Parentheses-Recursive-Property.png)\n\n此外，如果仔细查看上述结构，颜色标识的单元格将标记开闭的括号对。整个表达式是有效的，而它的子表达式本身也是有效的。这为问题提供了一种递归结构。例如，考虑上图中两个绿色括号内的表达式。开括号位于索引 1，相应闭括号位于索引 6。\n\n如果每当我们在表达式中遇到一对匹配的括号时，我们只是从表达式中删除它，会发生什么？\n\n让我们看看下面的这个想法，从整体表达式中一次删除一个较小的表达式，因为这是一个有效的表达式，我们最后剩留下一个空字符串。\n\n![算法演示2]($resource/%E7%AE%97%E6%B3%95%E6%BC%94%E7%A4%BA2.gif)\n\n\n在表示问题的递归结构时，栈数据结构可以派上用场。我们无法真正地从内到外处理这个问题，因为我们对整体结构一无所知。但是，栈可以帮助我们递归地处理这种情况，即从外部到内部。\n\n让我们看看使用栈作为该问题的中间数据结构的算法。\n\n**算法**\n\n* 初始化栈 S。\n* 一次处理表达式的每个括号。\n* 如果遇到开括号，我们只需将其推到栈上即可。这意味着我们将稍后处理它，让我们简单地转到前面的 子表达式。\n* 如果我们遇到一个闭括号，那么我们检查栈顶的元素。如果栈顶的元素是一个 相同类型的 左括号，那么我们将它从栈中弹出并继续处理。否则，这意味着表达式无效。\n* 如果到最后我们剩下的栈中仍然有元素，那么这意味着表达式无效。\n我们来看一下该算法的动画演示，然后转到实现部分。\n\n![算法最终实现2]($resource/%E7%AE%97%E6%B3%95%E6%9C%80%E7%BB%88%E5%AE%9E%E7%8E%B02.gif)\n\n\n\n现在让我们看看该算法是如何实现的。\n\n```Java\n\n\nclass Solution {\n\n  // Hash table that takes care of the mappings.\n  private HashMap<Character, Character> mappings;\n\n  // Initialize hash map with mappings. This simply makes the code easier to read.\n  public Solution() {\n    this.mappings = new HashMap<Character, Character>();\n    this.mappings.put(')', '(');\n    this.mappings.put('}', '{');\n    this.mappings.put(']', '[');\n  }\n\n  public boolean isValid(String s) {\n\n    // Initialize a stack to be used in the algorithm.\n    Stack<Character> stack = new Stack<Character>();\n\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n\n      // If the current character is a closing bracket.\n      if (this.mappings.containsKey(c)) {\n\n        // Get the top element of the stack. If the stack is empty, set a dummy value of '#'\n        char topElement = stack.empty() ? '#' : stack.pop();\n\n        // If the mapping for this bracket doesn't match the stack's top element, return false.\n        if (topElement != this.mappings.get(c)) {\n          return false;\n        }\n      } else {\n        // If it was an opening bracket, push to the stack.\n        stack.push(c);\n      }\n    }\n\n    // If the stack still contains elements, then it is an invalid expression.\n    return stack.isEmpty();\n  }\n}\n\n```\n\n**复杂度分析**\n\n* 时间复杂度：O(n)，因为我们一次只遍历给定的字符串中的一个字符并在栈上进行 O(1) 的推入和弹出操作。\n* 空间复杂度：O(n)，当我们将所有的开括号都推到栈上时以及在最糟糕的情况下，我们最终要把所有括号推到栈上。例如`((((((((((`。\n\n作者：LeetCode\n链接：https://leetcode-cn.com/problems/two-sum/solution/you-xiao-de-gua-hao-by-leetcode/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n\n\n\n\n\n### 方案二：自己的，但是执行时间较长\n\n```java\nclass Solution {\n    public boolean isValid(String s) {\n        while(s.contains(\"()\") || s.contains(\"[]\") || s.contains(\"{}\")){\n        \tif (s.contains(\"()\")) {\n        \t\ts = s.replace(\"()\" , \"\");\n        \t}\n        \tif (s.contains(\"[]\")) {\n        \t\ts = s.replace(\"[]\" , \"\");\n        \t}\n        \tif (s.contains(\"{}\")) {\n        \t\ts = s.replace(\"{}\" , \"\");\n        \t}\n        }\n        return s.isEmpty();\n    }\n}\n\n```\n\n",[[1560157495244,["GJX@GJXAIOU",[[-1,56,"6"]],[57,57],[56,56]]],[1560157496082,["GJX@GJXAIOU",[[1,56,"20"]],[56,56],[58,58]]]],null,"GJX@GJXAIOU"],["6212c71f-4ee7-4e38-9581-f563516a4df9",1561422533998,"---\ntags: \n  - 简单\nflag: green\ndata: '2019-6-6'\n---\n\n\n\n# 20.有效的括号\n\n\n## 一、题目\n\n给定一个只包括 `'('`，`')'`，`'{'`，`'}'`，`'['`，`']'` 的字符串，判断字符串是否有效。\n\n有效字符串需满足：\n\n1.  左括号必须用相同类型的右括号闭合。\n2.  左括号必须以正确的顺序闭合。\n\n注意空字符串可被认为是有效字符串。\n\n**示例 1:**\n\n**输入:** \"()\"\n**输出:** true\n\n**示例 2:**\n\n**输入:** \"()[]{}\"\n**输出:** true\n\n**示例 3:**\n\n**输入:** \"(]\"\n**输出:** false\n\n**示例 4:**\n\n**输入:** \"([)]\"\n**输出:** false\n\n**示例 5:**\n\n**输入:** \"{[]}\"\n**输出:** true\n\n\n\n## 二、解答\n\n**思路**\n\n想象一下，你正在为你的大学课设编写一个小型编译器，编译器的任务之一（或称子任务）将检测括号是否匹配。\n\n我们本文中看到的算法可用于处理编译器正在编译的程序中的所有括号，并检查是否所有括号都已配对。这将检查给定的括号字符串是否有效，是一个重要的编程问题。\n\n我们这个问题中将要处理的表达式可以包含以下三种不同类型的括号：`()，{} 以及[]`\n在查看如何检查由这些括号组成的给定表达式是否有效之前，让我们看一下该问题的简化版本，在简化后的问题中，只含一种类型的括号。这么一来，我们将会遇到的表达式是\n\n`(((((()))))) -- VALID`\n`()()()()     -- VALID`\n`(((((((()    -- INVALID`\n`((()(())))   -- VALID`\n上我们试着用一个简单的算法来解决这一问题。\n\n1.我们从表达式的左侧开始，每次只处理一个括号。\n2.假设我们遇到一个开括号（即 `(`），表达式是否无效取决于在该表达式的其余部分的某处是否有相匹配的闭括号（即 `)`）。此时，我们只是增加计数器的值保持跟踪现在为止开括号的数目。left += 1\n3.如果我们遇到一个闭括号，这可能意味着这样两种情况：\n  - 此闭括号没有与与之对应的开括号，在这种情况下，我们的表达式无效。当 left == 0，也就是没有未配对的左括号可用时就是这种情况。\n  - 我们有一些未配对的开括号可以与该闭括号配对。当 left > 0，也就是有未配对的左括号可用时就是这种情况。\n\n4.如果我们在 left == 0 时遇到一个闭括号（例如 )），那么当前的表达式无效。否则，我们会减少 left 的值，也就是减少了可用的未配对的左括号的数量。\n5.继续处理字符串，直到处理完所有括号。\n6.如果最后我们仍然有未配对的左括号，这意味着表达式无效。\n\n在这里讨论这个特定算法是因为我们从该解决方案中获得灵感以解决原始问题。为了更好地理解我们讨论的算法，请观看下面的动画演示。\n\n![算法演示]($resource/%E7%AE%97%E6%B3%95%E6%BC%94%E7%A4%BA.gif)\n\n如果我们只是尝试对原始问题采用相同的办法，这是根本就行不通的。基于简单计数器的方法能够在上面完美运行是因为所有括号都具有相同的类型。因此，当我们遇到一个闭括号时，我们只需要假设有一个对应匹配的开括号是可用的，即假设 `left > 0`。\n\n但是，在我们的问题中，如果我们遇到 `]`，我们真的不知道是否有相应的 `[ `可用。你可能会问：\n为什么不为不同类型的括号分别维护一个单独的计数器？\n\n这可能不起作用，因为括号的相对位置在这里也很重要。例如：`[{]`\n\n如果我们只是在这里维持计数器，那么只要我们遇到闭合方括号，我们就会知道此处有一个可用的未配对的开口方括号。但是，**最近的未配对的开括号是一个花括号，而不是一个方括号**，因此计数方法在这里被打破了。\n\n**方法：栈**\n关于有效括号表达式的一个有趣属性是有效表达式的子表达式也应该是有效表达式。（不是每个子表达式）例如\n\n![20-Valid-Parentheses-Recursive-Property]($resource/20-Valid-Parentheses-Recursive-Property.png)\n\n此外，如果仔细查看上述结构，颜色标识的单元格将标记开闭的括号对。整个表达式是有效的，而它的子表达式本身也是有效的。这为问题提供了一种递归结构。例如，考虑上图中两个绿色括号内的表达式。开括号位于索引 1，相应闭括号位于索引 6。\n\n如果每当我们在表达式中遇到一对匹配的括号时，我们只是从表达式中删除它，会发生什么？\n\n让我们看看下面的这个想法，从整体表达式中一次删除一个较小的表达式，因为这是一个有效的表达式，我们最后剩留下一个空字符串。\n\n![算法演示2]($resource/%E7%AE%97%E6%B3%95%E6%BC%94%E7%A4%BA2.gif)\n\n\n在表示问题的递归结构时，栈数据结构可以派上用场。我们无法真正地从内到外处理这个问题，因为我们对整体结构一无所知。但是，栈可以帮助我们递归地处理这种情况，即从外部到内部。\n\n让我们看看使用栈作为该问题的中间数据结构的算法。\n\n**算法**\n\n* 初始化栈 S。\n* 一次处理表达式的每个括号。\n* 如果遇到开括号，我们只需将其推到栈上即可。这意味着我们将稍后处理它，让我们简单地转到前面的 子表达式。\n* 如果我们遇到一个闭括号，那么我们检查栈顶的元素。如果栈顶的元素是一个 相同类型的 左括号，那么我们将它从栈中弹出并继续处理。否则，这意味着表达式无效。\n* 如果到最后我们剩下的栈中仍然有元素，那么这意味着表达式无效。\n我们来看一下该算法的动画演示，然后转到实现部分。\n\n![算法最终实现2]($resource/%E7%AE%97%E6%B3%95%E6%9C%80%E7%BB%88%E5%AE%9E%E7%8E%B02.gif)\n\n\n\n现在让我们看看该算法是如何实现的。\n\n```Java\n\n\nclass Solution {\n\n  // Hash table that takes care of the mappings.\n  private HashMap<Character, Character> mappings;\n\n  // Initialize hash map with mappings. This simply makes the code easier to read.\n  public Solution() {\n    this.mappings = new HashMap<Character, Character>();\n    this.mappings.put(')', '(');\n    this.mappings.put('}', '{');\n    this.mappings.put(']', '[');\n  }\n\n  public boolean isValid(String s) {\n\n    // Initialize a stack to be used in the algorithm.\n    Stack<Character> stack = new Stack<Character>();\n\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n\n      // If the current character is a closing bracket.\n      if (this.mappings.containsKey(c)) {\n\n        // Get the top element of the stack. If the stack is empty, set a dummy value of '#'\n        char topElement = stack.empty() ? '#' : stack.pop();\n\n        // If the mapping for this bracket doesn't match the stack's top element, return false.\n        if (topElement != this.mappings.get(c)) {\n          return false;\n        }\n      } else {\n        // If it was an opening bracket, push to the stack.\n        stack.push(c);\n      }\n    }\n\n    // If the stack still contains elements, then it is an invalid expression.\n    return stack.isEmpty();\n  }\n}\n\n```\n\n**复杂度分析**\n\n* 时间复杂度：O(n)，因为我们一次只遍历给定的字符串中的一个字符并在栈上进行 O(1) 的推入和弹出操作。\n* 空间复杂度：O(n)，当我们将所有的开括号都推到栈上时以及在最糟糕的情况下，我们最终要把所有括号推到栈上。例如`((((((((((`。\n\n作者：LeetCode\n链接：https://leetcode-cn.com/problems/two-sum/solution/you-xiao-de-gua-hao-by-leetcode/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n\n\n\n\n\n### 方案二：自己的，但是执行时间较长\n\n```java\nclass Solution {\n    public boolean isValid(String s) {\n        while(s.contains(\"()\") || s.contains(\"[]\") || s.contains(\"{}\")){\n        \tif (s.contains(\"()\")) {\n        \t\ts = s.replace(\"()\" , \"\");\n        \t}\n        \tif (s.contains(\"[]\")) {\n        \t\ts = s.replace(\"[]\" , \"\");\n        \t}\n        \tif (s.contains(\"{}\")) {\n        \t\ts = s.replace(\"{}\" , \"\");\n        \t}\n        }\n        return s.isEmpty();\n    }\n}\n\n```\n\n",[[1561422480706,["GJX@GJXAIOU",[[-1,33,"a"]],[34,34],[33,33]]],[1561422481561,["GJX@GJXAIOU",[[1,33,"e"]],[33,33],[34,34]]],[1561422483801,["GJX@GJXAIOU",[[1,30,"\n"]],[29,29],[30,30]]],[1561422484416,["GJX@GJXAIOU",[[1,30,"s"]],[30,30],[31,31]]],[1561422485512,["GJX@GJXAIOU",[[-1,30,"s"]],[31,31],[30,30]]],[1561422488050,["GJX@GJXAIOU",[[1,30,"style: sumn"]],[30,30],[41,41]]],[1561422489001,["GJX@GJXAIOU",[[-1,40,"n"]],[41,41],[40,40]]],[1561422490112,["GJX@GJXAIOU",[[1,40,"mer"]],[40,40],[43,43]]],[1561422492359,["GJX@GJXAIOU",[[1,18,"  \n"]],[17,17],[20,20]]],[1561422494303,["GJX@GJXAIOU",[[1,20,"-wang"]],[20,20],[25,25]]],[1561422495058,["GJX@GJXAIOU",[[-1,21,"wang"]],[25,25],[21,21]]],[1561422498753,["GJX@GJXAIOU",[[1,21," 完成"]],[21,21],[24,24]]],[1561422500437,["GJX@GJXAIOU",[[1,25,"  \n"]],[24,24],[27,27]]],[1561422503026,["GJX@GJXAIOU",[[1,27,"- 数组"]],[27,27],[31,31]]]],null,"GJX@GJXAIOU"]]}