{"compress":true,"commitItems":[["1c8a0a77-7145-42c5-a5d7-dea021512314",1560521005689,"",[[1560520958295,["GJX@GJXAIOU",[[1,0,"# 985.查询后的偶数和\n\n\n\n"]],[0,0],[16,16]]],[1560520961055,["GJX@GJXAIOU",[[1,0,"\n"]],[0,0],[1,1]]],[1560520961186,["GJX@GJXAIOU",[[1,0,"\n"]],[1,1],[2,2]]],[1560520963001,["GJX@GJXAIOU",[[1,0,"-"]],[0,0],[1,1]]],[1560520963160,["GJX@GJXAIOU",[[1,0,"-"]],[1,1],[2,2]]],[1560520963295,["GJX@GJXAIOU",[[1,2,"-"]],[2,2],[3,3]]],[1560520963318,["GJX@GJXAIOU",[[1,5,"---\n\n\n"]],[3,3],[4,4]]],[1560520969057,["GJX@GJXAIOU",[[1,4,"tags: "]],[4,4],[10,10]]],[1560520969761,["GJX@GJXAIOU",[[1,11,"\n"]],[10,10],[11,11]]],[1560520970939,["GJX@GJXAIOU",[[1,11,"- shu"]],[11,11],[16,16]]],[1560520971567,["GJX@GJXAIOU",[[-1,13,"shu"]],[16,16],[13,13]]],[1560520973325,["GJX@GJXAIOU",[[1,13,"简单"]],[13,13],[15,15]]],[1560520973568,["GJX@GJXAIOU",[[1,16,"\n"]],[15,15],[16,16]]],[1560520974752,["GJX@GJXAIOU",[[1,16,"- "]],[16,16],[18,18]]],[1560520975959,["GJX@GJXAIOU",[[1,19,"\n"]],[18,18],[19,19]]],[1560520978490,["GJX@GJXAIOU",[[1,19,"- 数组"]],[19,19],[23,23]]],[1560520978968,["GJX@GJXAIOU",[[1,24,"\n"]],[23,23],[24,24]]],[1560520986224,["GJX@GJXAIOU",[[1,25,"\n"]],[24,24],[25,25]]],[1560520995616,["GJX@GJXAIOU",[[1,25,"flag: green"]],[25,25],[36,36]]],[1560520996104,["GJX@GJXAIOU",[[1,37,"\n"]],[36,36],[37,37]]],[1560520999344,["GJX@GJXAIOU",[[1,37,"sty;e"]],[37,37],[42,42]]],[1560520999879,["GJX@GJXAIOU",[[-1,40,";e"]],[42,42],[40,40]]],[1560521003768,["GJX@GJXAIOU",[[1,40,"le: summer"]],[40,40],[50,50]]],[1560521004408,["GJX@GJXAIOU",[[1,51,"\n"]],[50,50],[51,51]]],[1560521014983,["GJX@GJXAIOU",[[1,51,"data: '2019-6-14'"]],[51,51],[68,68]]],[1560521015848,["GJX@GJXAIOU",[[1,69,"\n"]],[68,68],[69,69]]],[1560521019087,["GJX@GJXAIOU",[[1,93,"\n"]],[91,91],[92,92]]],[1560521020775,["GJX@GJXAIOU",[[1,92,"## e"]],[92,92],[96,96]]],[1560521021185,["GJX@GJXAIOU",[[-1,95,"e"]],[96,96],[95,95]]],[1560521024285,["GJX@GJXAIOU",[[1,95,"一、题目"]],[95,95],[99,99]]],[1560521024911,["GJX@GJXAIOU",[[1,101,"\n"]],[99,99],[100,100]]],[1560521025919,["GJX@GJXAIOU",[[1,102,"\n"]],[100,100],[101,101]]],[1560521026039,["GJX@GJXAIOU",[[1,103,"\n"]],[101,101],[102,102]]],[1560521026672,["GJX@GJXAIOU",[[1,104,"\n"]],[102,102],[103,103]]],[1560521036249,["GJX@GJXAIOU",[[1,102,"给出一个整数数组 A 和一个查询数组 queries。\n\n对于第 i 次查询，有 val = queries[i][0], index = queries[i][1]，我们会把 val 加到 A[index] 上。然后，第 i 次查询的答案是 A 中偶数值的和。\n\n（此处给定的 index = queries[i][1] 是从 0 开始的索引，每次查询都会永久修改数组 A。）\n\n返回所有查询的答案。你的答案应当以数组 answer 给出，answer[i] 为第 i 次查询的答案。\n\n \n\n示例：\n\n输入：A = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]\n输出：[8,6,2,4]\n解释：\n开始时，数组为 [1,2,3,4]。\n将 1 加到 A[0] 上之后，数组为 [2,2,3,4]，偶数值之和为 2 + 2 + 4 = 8。\n将 -3 加到 A[1] 上之后，数组为 [2,-1,3,4]，偶数值之和为 2 + 4 = 6。\n将 -4 加到 A[0] 上之后，数组为 [-2,-1,3,4]，偶数值之和为 -2 + 4 = 2。\n将 2 加到 A[3] 上之后，数组为 [-2,-1,3,6]，偶数值之和为 -2 + 6 = 4。\n \n\n提示：\n\n1 <= A.length <= 10000\n-10000 <= A[i] <= 10000\n1 <= queries.length <= 10000\n-10000 <= queries[i][0] <= 10000\n0 <= queries[i][1] < A.length\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/sum-of-even-numbers-after-queries\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。"]],[102,102],[920,920]]],[1560521049070,["GJX@GJXAIOU",[[-1,354,"\n"]],[354,354],[353,353]]],[1560521050995,["GJX@GJXAIOU",[[-1,110," A "],[1,113," A "],[-1,120," "],[1,121," "],[-1,134," i "],[1,137," i "],[-1,142," "],[1,143," "],[-1,148," "],[1,149," "],[-1,169," "],[1,170," "],[-1,190," val 加到 "],[1,198," val 加到 "],[-1,206," "],[1,207," "],[-1,213," i "],[1,216," i "],[-1,241," "],[1,242," "],[-1,263," "],[1,264," "],[-1,287," "],[1,288," "],[-1,312," "],[1,313," "],[-1,319," "],[1,320," "],[-1,332," 为第 i "],[1,338," 为第 i "],[-1,347," "],[1,348," "],[1,350,"-"],[-1,651," "],[1,652," "]],[350,350],[351,351]]],[1560521051144,["GJX@GJXAIOU",[[1,351," "]],[351,351],[352,352]]],[1560521053976,["GJX@GJXAIOU",[[1,425,"- "]],[425,425],[427,427]]]],null,"GJX@GJXAIOU"],["7e5d524f-1805-4694-aec1-f8b74070cedf",1561295125739,"---\ntags: \n- 简单\n- \n- 数组\n\nflag: green\nstyle: summer\ndata: '2019-6-14'\n\n---\n\n\n# 985.查询后的偶数和\n\n\n## 一、题目\n\n\n给出一个整数数组 A 和一个查询数组 queries。\n\n对于第 i 次查询，有 val = queries[i][0], index = queries[i][1]，我们会把 val 加到 A[index] 上。然后，第 i 次查询的答案是 A 中偶数值的和。\n\n（此处给定的 index = queries[i][1] 是从 0 开始的索引，每次查询都会永久修改数组 A。）\n\n返回所有查询的答案。你的答案应当以数组 answer 给出，answer[i] 为第 i 次查询的答案。\n\n \n\n- 示例：\n输入：A = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]\n输出：[8,6,2,4]\n- 解释：\n开始时，数组为 [1,2,3,4]。\n将 1 加到 A[0] 上之后，数组为 [2,2,3,4]，偶数值之和为 2 + 2 + 4 = 8。\n将 -3 加到 A[1] 上之后，数组为 [2,-1,3,4]，偶数值之和为 2 + 4 = 6。\n将 -4 加到 A[0] 上之后，数组为 [-2,-1,3,4]，偶数值之和为 -2 + 4 = 2。\n将 2 加到 A[3] 上之后，数组为 [-2,-1,3,6]，偶数值之和为 -2 + 6 = 4。\n \n\n提示：\n\n1 <= A.length <= 10000\n-10000 <= A[i] <= 10000\n1 <= queries.length <= 10000\n-10000 <= queries[i][0] <= 10000\n0 <= queries[i][1] < A.length\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/sum-of-even-numbers-after-queries\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\n\n\n",[[1561295098767,["GJX@GJXAIOU",[[1,926,"\n"]],[925,925],[926,926]]],[1561295098896,["GJX@GJXAIOU",[[1,927,"\n"]],[926,926],[927,927]]],[1561295099027,["GJX@GJXAIOU",[[1,928,"\n"]],[927,927],[928,928]]],[1561295099138,["GJX@GJXAIOU",[[1,929,"\n"]],[928,928],[929,929]]],[1561295099256,["GJX@GJXAIOU",[[1,930,"\n"]],[929,929],[930,930]]],[1561295099363,["GJX@GJXAIOU",[[1,931,"\n"]],[930,930],[931,931]]],[1561295102832,["GJX@GJXAIOU",[[1,931,"### "]],[931,931],[935,935]]],[1561295105177,["GJX@GJXAIOU",[[-1,933,"# "]],[935,935],[933,933]]],[1561295106540,["GJX@GJXAIOU",[[1,933," er"]],[933,933],[936,936]]],[1561295107191,["GJX@GJXAIOU",[[-1,934,"er"]],[936,936],[934,934]]],[1561295111908,["GJX@GJXAIOU",[[1,934,"二、解答"]],[934,934],[938,938]]],[1561295112181,["GJX@GJXAIOU",[[1,939,"\n"]],[938,938],[939,939]]],[1561295112296,["GJX@GJXAIOU",[[1,940,"\n"]],[939,939],[940,940]]],[1561295112434,["GJX@GJXAIOU",[[1,941,"\n"]],[940,940],[941,941]]],[1561295114353,["GJX@GJXAIOU",[[-1,941,"\n"],[1,942,"`"]],[941,941],[942,942]]],[1561295114721,["GJX@GJXAIOU",[[1,942,"``"]],[942,942],[944,944]]],[1561295114745,["GJX@GJXAIOU",[[1,944,"language\n```\n"]],[944,944],[944,952]]],[1561295115938,["GJX@GJXAIOU",[[-1,944,"language"],[1,952,"j"]],[944,952],[945,945]]],[1561295116272,["GJX@GJXAIOU",[[1,945,"ava"]],[945,945],[948,948]]],[1561295116336,["GJX@GJXAIOU",[[1,949,"\n"]],[948,948],[949,949]]],[1561295118449,["GJX@GJXAIOU",[[1,941,"\n"]],[939,939],[940,940]]],[1561295118592,["GJX@GJXAIOU",[[1,942,"\n"]],[940,940],[941,941]]],[1561295121793,["GJX@GJXAIOU",[[1,942,"- zieo"]],[942,942],[948,948]]],[1561295122968,["GJX@GJXAIOU",[[-1,944,"zieo"]],[948,948],[944,944]]],[1561295125381,["GJX@GJXAIOU",[[1,944,"自我解答"]],[944,944],[948,948]]],[1561295127384,["GJX@GJXAIOU",[[1,949,"超时"]],[949,949],[951,951]]],[1561295130025,["GJX@GJXAIOU",[[1,960,"class Solution {\n    public int[] sumEvenAfterQueries(int[] A, int[][] queries) {\n        \n         //求queries的长和宽\n        int cows = queries.length;\n        int colume = 2;\n\n        //新建一个数组放置结果\n        int[] ans = new int[cows];\n\n        //合法性判断\n        int ans1 = 0;\n        if (queries == null ) {\n            for (int i = 0;i < A.length ;i++ ) {\n                if (A[i] % 2 == 0) {\n                    ans[0] += A[i];\n                }\n            }\n        }\n\n\n\n        //对queries进行遍历\n        for (int i = 0 ;i < cows;i++ ) {\n            A[queries[i][1]] += queries[i][0];\n            for (int j = 0;j < cows ;j++ ) {\n                  if (A[j] % 2 == 0) {\n                      ans1 += A[j];\n                  }\n              } \n              ans[i] = ans1; \n              ans1 = 0;\n        }\n\n         return ans;\n    }\n}"]],[960,960],[1790,1790]]],[1561295133688,["GJX@GJXAIOU",[[1,942,"\n"]],[940,940],[941,941]]],[1561295133816,["GJX@GJXAIOU",[[1,943,"\n"]],[941,941],[942,942]]],[1561295133927,["GJX@GJXAIOU",[[1,944,"\n"]],[942,942],[943,943]]],[1561295134049,["GJX@GJXAIOU",[[1,945,"\n"]],[943,943],[944,944]]],[1561295134187,["GJX@GJXAIOU",[[1,946,"\n"]],[944,944],[945,945]]],[1561295134293,["GJX@GJXAIOU",[[1,947,"\n"]],[945,945],[946,946]]],[1561295134426,["GJX@GJXAIOU",[[1,948,"\n"]],[946,946],[947,947]]],[1561295134543,["GJX@GJXAIOU",[[1,949,"\n"]],[947,947],[948,948]]],[1561295134680,["GJX@GJXAIOU",[[1,950,"\n"]],[948,948],[949,949]]],[1561295134800,["GJX@GJXAIOU",[[1,951,"\n"]],[949,949],[950,950]]],[1561295134910,["GJX@GJXAIOU",[[1,952,"\n"]],[950,950],[951,951]]],[1561295146881,["GJX@GJXAIOU",[[1,941,"方法：调整数组和\n思路与算法\n\n让我们尝试不断调整 S，即每一步操作之后整个数组的偶数和。\n\n我们操作数组中的某一个元素 A[index] 的时候，数组 A 其他位置的元素都应保持不变。如果 A[index] 是偶数，我们就从 S 中减去它，然后计算 A[index] + val 对 S 的影响（如果是偶数则在 S 中加上它）。\n\n这里有一些例子：\n\n如果当前情况为 A = [2,2,2,2,2]、S = 10，并且需要执行 A[0] += 4 操作：我们应该先令 S -= 2，然后令 S += 6。最后得到 A = [6,2,2,2,2] 与 S = 14。\n\n如果当前情况为 A = [1,2,2,2,2]、S = 8，同时需要执行 A[0] += 3 操作：我们会跳过第一次更新 S 的步骤（因为 A[0] 是奇数），然后令 S += 4。 最后得到 A = [4,2,2,2,2] 与 S = 12。\n\n如果当前情况为 A = [2,2,2,2,2]、S = 10，同时需要执行 A[0] += 1 操作：我们先令 S -= 2，然后跳过第二次更新 S 的操作（因为 A[0] + 1 是奇数）。最后得到 A = [3,2,2,2,2] 与 S = 8。\n\n如果当前情况为 A = [1,2,2,2,2]、S = 8，同时需要执行 A[0] += 2 操作：我们跳过第一次更新 S 的操作（因为 A[0] 是奇数），然后再跳过第二次更新 S 的操作（因为 A[0] + 2 是奇数）。最后得到 A = [3,2,2,2,2] 与 S = 8。\n\n这些例子充分展现了我们的算法在每一次询问操作之后应该如何调整 S 。\n\nJavaPython\nclass Solution {\n    public int[] sumEvenAfterQueries(int[] A, int[][] queries) {\n        int S = 0;\n        for (int x: A)\n            if (x % 2 == 0)\n                S += x;\n\n        int[] ans = new int[queries.length];\n\n        for (int i = 0; i < queries.length; ++i) {\n            int val = queries[i][0], index = queries[i][1];\n            if (A[index] % 2 == 0) S -= A[index];\n            A[index] += val;\n            if (A[index] % 2 == 0) S += A[index];\n            ans[i] = S;\n        }\n\n        return ans;\n    }\n}\n复杂度分析\n\n时间复杂度：O(N+Q)O(N+Q)，其中 NN 是数组 A 的长度， QQ 是询问 queries 的数量。\n\n空间复杂度：O(N+Q)O(N+Q)，事实上我们只使用了 O(1)O(1) 的额外空间。\n\n作者：LeetCode\n链接：https://leetcode-cn.com/problems/two-sum/solution/cha-xun-hou-de-ou-shu-he-by-leetcode/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[941,941],[2457,2457]]],[1561295160866,["GJX@GJXAIOU",[[1,941,"- "]],[941,941],[943,943]]],[1561295163716,["GJX@GJXAIOU",[[1,952,"**"],[1,957,"**"]],[952,957],[952,961]]],[1561295165265,["GJX@GJXAIOU",[[1,952,"- \n"]],[951,951],[954,954]]],[1561295165596,["GJX@GJXAIOU",[[-1,952,"- "]],[954,954],[952,952]]],[1561295173465,["GJX@GJXAIOU",[[-1,1668,"Python"]],[1668,1673],[1668,1668]]],[1561295176604,["GJX@GJXAIOU",[[1,1664,"···"]],[1664,1664],[1667,1667]]],[1561295177732,["GJX@GJXAIOU",[[-1,1664,"···"]],[1667,1667],[1664,1664]]],[1561295179028,["GJX@GJXAIOU",[[1,1664,"```"]],[1664,1664],[1667,1667]]],[1561295181969,["GJX@GJXAIOU",[[1,2198,"\n"]],[2197,2197],[2198,2198]]],[1561295182081,["GJX@GJXAIOU",[[1,2199,"\n"]],[2198,2198],[2199,2199]]],[1561295182749,["GJX@GJXAIOU",[[1,2199,"```"]],[2199,2199],[2202,2202]]],[1561295184887,["GJX@GJXAIOU",[[1,2203,"\n"]],[2203,2203],[2204,2204]]],[1561295185574,["GJX@GJXAIOU",[[1,2204,"- "]],[2204,2204],[2206,2206]]],[1561295245761,[null,[[-1,2487,"\n"],[1,2488,"："],[1,2490,"\n"],[-1,2497,"\n"],[1,3329,"\n"]],[2487,2487],[3330,3330]]],[1561295245761,[null,[[1,2487,"\n"],[-1,2487,"："],[-1,2490,"\n"],[1,2498,"\n"],[-1,3329,"\n"]],[3330,3330],[2487,2487]]],[1561295195011,["GJX@GJXAIOU",[[-1,2225,"O(N+Q)"]],[2226,2231],[2225,2225]]],[1561295197249,["GJX@GJXAIOU",[[-1,2230,"N"]],[2230,2230],[2229,2229]]],[1561295199307,["GJX@GJXAIOU",[[-1,2243,"Q"]],[2243,2243],[2242,2242]]],[1561295201800,["GJX@GJXAIOU",[[-1,2292,"(1)O"]],[2295,2295],[2291,2291]]],[1561295204608,["GJX@GJXAIOU",[[-1,2274,"O(N+Q)"]],[2280,2280],[2274,2274]]],[1561295208677,["GJX@GJXAIOU",[[1,2213,"- "]],[2213,2213],[2215,2215]]],[1561295209899,["GJX@GJXAIOU",[[1,2264,"- "]],[2264,2264],[2266,2266]]],[1561295211480,["GJX@GJXAIOU",[[-1,2263,"\n"]],[2263,2263],[2262,2262]]],[1561295213894,["GJX@GJXAIOU",[[1,2213,"  "],[1,2263,"  "]],[2214,2299],[2216,2303]]],[1561295305763,[null,[[-1,2476,"\n"],[1,2477,"："],[1,2479,"\n"],[-1,2486,"\n"],[1,3318,"\n"]],[2476,2476],[3319,3319]]],[1561295305763,[null,[[1,2476,"\n"],[-1,2476,"："],[-1,2479,"\n"],[1,2487,"\n"],[-1,3318,"\n"]],[3319,3319],[2476,2476]]],[1561295287070,["GJX@GJXAIOU",[[1,2204,"\n"]],[2202,2202],[2203,2203]]],[1561295287210,["GJX@GJXAIOU",[[1,2205,"\n"]],[2203,2203],[2204,2204]]],[1561295287339,["GJX@GJXAIOU",[[1,2206,"\n"]],[2204,2204],[2205,2205]]],[1561295290105,["GJX@GJXAIOU",[[-1,2206,"\n"]],[2205,2205],[2204,2204]]],[1561295290238,["GJX@GJXAIOU",[[-1,2205,"\n"]],[2204,2204],[2203,2203]]],[1561295293642,["GJX@GJXAIOU",[[1,2464,"- sil"]],[2464,2464],[2469,2469]]],[1561295294569,["GJX@GJXAIOU",[[-1,2465," sil"]],[2469,2469],[2465,2465]]],[1561295305300,["GJX@GJXAIOU",[[1,2465,"思路同上，但是优化了"]],[2465,2465],[2475,2475]]],[1561295365779,[null,[[-1,2488,"\n"],[1,2489,"："],[1,2491,"\n"],[-1,2498,"\n"],[1,3330,"\n"]],[2488,2488],[3331,3331]]],[1561295365779,[null,[[1,2488,"\n"],[-1,2488,"："],[-1,2491,"\n"],[1,2499,"\n"],[-1,3330,"\n"]],[3331,3331],[2488,2488]]],[1561295308715,["GJX@GJXAIOU",[[1,2465," "]],[2465,2465],[2466,2466]]],[1561295317001,["GJX@GJXAIOU",[[1,2483,"\n"]],[2477,2477],[2478,2478]]],[1561295317347,["GJX@GJXAIOU",[[1,2478,"执行\n执行用时 : 5 ms, 在Sum of Even Numbers After Queries的Java提交中击败了99.90% 的用户\n内存消耗 : 57.7 MB, 在Sum of Even Numbers After Queries的Java提交中击败了92.42% 的用户\n思路\n思路和官方题解的一致，不过优化了if语句的执行时间。 之前本来是用的%2的操作来判断是否为偶数，但是遇到个问题就是数字为负数，%2操作之后为-1，进行乘法运算答案是错误的。碰巧在评论去看到有人判断偶数用的是&1操作，恍然大悟，所以就改成了&1。\n\n实现\nclass Solution {\n\tpublic int[] sumEvenAfterQueries(int[] A, int[][] queries) {\n\t\tint sum = 0;\n\t\tint[] result = new int[queries.length];\n\t\tfor (int i = 0; i < A.length; i++) {\n\t\t\tsum += (((A[i]+1) & 1) * A[i]);\n\t\t}\n\t\tfor (int i = 0; i < queries.length; i++) {\n\t\t\tsum -= (((A[queries[i][1]]+1)&1) * A[queries[i][1]]);\n                        A[queries[i][1]] = (A[queries[i][1]] + queries[i][0]);\n\t\t\tsum += (((A[queries[i][1]]+1)&1) * A[queries[i][1]]);\n\t\t\tresult[i] = sum;\n\t\t}\n\t\treturn result;\n\t}\n}\n\n作者：VioletKiss\n链接：https://leetcode-cn.com/problems/two-sum/solution/java-ti-jie-985cha-xun-hou-de-ou-shu-he-by-1331635/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[2478,2478],[3420,3420]]],[1561295320694,["GJX@GJXAIOU",[[1,2478,"**"],[1,2480,"**"]],[2478,2480],[2478,2484]]],[1561295324283,["GJX@GJXAIOU",[[1,2626,"**"],[1,2628,"**"]],[2626,2628],[2626,2632]]],[1561295327818,["GJX@GJXAIOU",[[1,2757,"**"],[1,2759,"**"]],[2757,2759],[2757,2763]]],[1561295329881,["GJX@GJXAIOU",[[1,2764,"\n"]],[2763,2763],[2764,2764]]],[1561295331371,["GJX@GJXAIOU",[[1,2764,"···"]],[2764,2764],[2767,2767]]],[1561295332392,["GJX@GJXAIOU",[[-1,2764,"···"]],[2767,2767],[2764,2764]]],[1561295335875,["GJX@GJXAIOU",[[1,2764,"```java"]],[2764,2764],[2771,2771]]],[1561295339195,["GJX@GJXAIOU",[[1,3271,"\n"]],[3270,3270],[3271,3271]]],[1561295339899,["GJX@GJXAIOU",[[1,3271,"```"]],[3271,3271],[3274,3274]]],[1561295345802,["GJX@GJXAIOU",[[1,18,"wang"]],[18,18],[22,22]]],[1561295346811,["GJX@GJXAIOU",[[-1,18,"wang"]],[22,22],[18,18]]],[1561295351812,["GJX@GJXAIOU",[[1,18,"完成超时"]],[18,18],[22,22]]],[1561295362549,["GJX@GJXAIOU",[[1,978,"数组和"]],[978,978],[981,981]]],[1561295364441,["GJX@GJXAIOU",[[-1,977," "]],[978,978],[977,977]]]],null,"GJX@GJXAIOU"]]}